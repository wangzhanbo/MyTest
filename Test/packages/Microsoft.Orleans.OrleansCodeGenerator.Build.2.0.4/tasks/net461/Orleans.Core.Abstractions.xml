<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Core.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Orleans.PublicOrleansTaskExtensions">
            <summary>
            Utility functions for dealing with Tasks.
            </summary>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtensions.Ignore(System.Threading.Tasks.Task)">
            <summary>
            Observes and ignores a potential exception on a given Task.
            If a Task fails and throws an exception which is never observed, it will be caught by the .NET finalizer thread.
            This function awaits the given task and if the exception is thrown, it observes this exception and simply ignores it.
            This will prevent the escalation of this exception to the .NET finalizer thread.
            </summary>
            <param name="task">The task to be ignored.</param>
        </member>
        <member name="T:Orleans.GrainCancellationToken">
            <summary>
            Grain cancellation token
            </summary>
        </member>
        <member name="F:Orleans.GrainCancellationToken._targetGrainReferences">
            <summary>
            References to remote grains to which this token was passed.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.#ctor(System.Guid)">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationToken"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.#ctor(System.Guid,System.Boolean,Orleans.Runtime.IGrainCancellationTokenRuntime)">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationToken"/>.
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationToken.Id">
            <summary>
            Unique id of concrete token
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationToken.CancellationToken">
            <summary>
            Underlying cancellation token
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationToken.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Orleans.GrainCancellationTokenSource">
            <summary>
            Distributed version of the CancellationTokenSource
            </summary>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.#ctor">
            <summary>
            Initializes the <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
        </member>
        <member name="P:Orleans.GrainCancellationTokenSource.Token">
            <summary>
            Gets the <see cref="T:Orleans.GrainCancellationTokenSource">CancellationToken</see>
            associated with this <see cref="T:Orleans.GrainCancellationTokenSource"/>.
            </summary>
            <value>The <see cref="T:Orleans.GrainCancellationToken">CancellationToken</see>
            associated with this <see cref="T:Orleans.GrainCancellationToken"/>.</value>
        </member>
        <member name="P:Orleans.GrainCancellationTokenSource.IsCancellationRequested">
            <summary>
            Gets whether cancellation has been requested for this <see
            cref="T:Orleans.GrainCancellationTokenSource">CancellationTokenSource</see>.
            </summary>
            <value>Whether cancellation has been requested for this <see
            cref="T:Orleans.GrainCancellationTokenSource">CancellationTokenSource</see>.</value>
            <remarks>
            <para>
            This property indicates whether cancellation has been requested for this token source, such as
            due to a call to its
            <see cref="M:Orleans.GrainCancellationTokenSource.Cancel">Cancel</see> method.
            </para>
            <para>
            If this property returns true, it only guarantees that cancellation has been requested. It does not
            guarantee that every handler registered with the corresponding token has finished executing, nor
            that cancellation requests have finished propagating to all registered handlers and remote targets. Additional
            synchronization may be required, particularly in situations where related objects are being
            canceled concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.Cancel">
            <summary>
            Communicates a request for cancellation.
            </summary>
            <remarks>
            <para>
            The associated <see cref="T:Orleans.Async.GrainCancellationToken" /> will be
            notified of the cancellation and will transition to a state where
            <see cref="P:Orleans.GrainCancellationToken.CancellationToken">IsCancellationRequested</see> returns true.
            Any callbacks or cancelable operations
            registered with the <see cref="T:Orleans.Threading.CancellationToken"/>  will be executed.
            </para>
            <para>
            Cancelable operations and callbacks registered with the token should not throw exceptions.
            However, this overload of Cancel will aggregate any exceptions thrown into a <see cref="T:System.AggregateException"/>,
            such that one callback throwing an exception will not prevent other registered callbacks from being executed.
            </para>
            <para>
            The <see cref="T:System.Threading.ExecutionContext"/> that was captured when each callback was registered
            will be reestablished when the callback is invoked.
            </para>
            </remarks>
            <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown
            by the registered callbacks on the associated <see cref="T:Orleans.Async.GrainCancellationToken"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This <see
            cref="T:Orleans.Async.GrainCancellationTokenSource"/> has been disposed.</exception>
        </member>
        <member name="M:Orleans.GrainCancellationTokenSource.Dispose">
            <summary>
            Releases the resources used by this <see cref="T:Orleans.Async.GrainCancellationTokenSource" />.
            </summary>
            <remarks>
            This method is not thread-safe for any other concurrent calls.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.ClientNotAvailableException">
            <summary>
            Indicates that a client is not longer reachable.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.DeadlockException">
            <summary>
            Signifies that a silo has detected a deadlock / loop in a call graph.
            </summary>
            <remarks>
            <para>
            Deadlock detection is not enabled by default in Orleans silos, 
            because it introduces some extra overhead in call handling.
            </para>
            <para>
            There are some constraints on the types of deadlock that can currently be detected 
            by Orleans silos.
            </para>
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.GatewayTooBusyException">
            <summary>
            Signifies that a gateway silo is currently in overloaded / load shedding state 
            and is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is usaully a transient condition.
            The message is likely to be accepted by this or another gateway if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.GrainExtensionNotInstalledException">
            <summary>
            Signifies that an attempt was made to invoke a grain extension method on a grain where that extension was not installed.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.LimitExceededException">
            <summary>
            Signifies that a silo is in an overloaded state where some 
            runtime limit setting is currently being exceeded, 
            and so that silo is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is often a transient condition.
            The message is likely to be accepted by this or another silo if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.OrleansConfigurationException">
            <summary>
            Represents a configuration exception.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansConfigurationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.OrleansConfigurationException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.OrleansConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.OrleansException">
            <summary>
            An exception class used by the Orleans runtime for reporting errors.
            </summary>
            <remarks>
            This is also the base class for any more specific exceptions 
            raised by the Orleans runtime.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.OrleansLifecycleCanceledException">
            <summary>
            Indicates a lifecycle was canceled, either by request or due to observer error.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.OrleansMessageRejectionException">
            <summary>
            Indicates that an Orleans message was rejected.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloUnavailableException">
            <summary>
            Signifies that an request was cancelled due to target silo unavailability.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.#ctor">
            <summary>
            Only used in Json serialization
            DO NOT USE TO CREATE A RANDOM ACTIVATION ID
            Use ActivationId.NewId to create new activation IDs.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.GetUniformHashCode">
            <summary>
            Get a uniformly distributed hash code value for this grain, based on Jenkins Hash function.
            NOTE: Hash code value may be positive or NEGATIVE.
            </summary>
            <returns>Hash code for this GrainId</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.ToParsableString">
            <summary>
            Return this GrainId in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>GrainId in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.FromParsableString(System.String)">
            <summary>
            Create a new GrainId object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="grainId">String containing the GrainId info to be parsed.</param>
            <returns>New GrainId object created from the input data.</returns>
        </member>
        <member name="T:Orleans.Runtime.GuidId">
            <summary>
            Wrapper object around Guid.
            Can be used in places where Guid is optional and in those cases it can be set to null and will not use the storage of an empty Guid struct.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloAddress">
            <summary>
            Data class encapsulating the details of silo addresses.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.Zero">
            <summary> Special constant value to indicate an empty SiloAddress. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.New(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Factory for creating new SiloAddresses with specified IP endpoint address and silo generation number.
            </summary>
            <param name="ep">IP endpoint address of the silo.</param>
            <param name="gen">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with specified address and silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.AllocateNewGeneration">
            <summary> Allocate a new silo generation number. </summary>
            <returns>A new silo generation number.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToParsableString">
            <summary>
            Return this SiloAddress in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>SiloAddress in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.FromParsableString(System.String)">
            <summary>
            Create a new SiloAddress object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="addr">String containing the SiloAddress info to be parsed.</param>
            <returns>New SiloAddress object created from the input data.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToString">
            <summary> Object.ToString method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToLongString">
            <summary>
            Return a long string representation of this SiloAddress.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representaiton of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToStringWithHashCode">
            <summary>
            Return a long string representation of this SiloAddress, including it's consistent hash value.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representaiton of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(System.Object)">
            <summary> Object.Equals method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetHashCode">
            <summary> Object.GetHashCode method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetConsistentHashCode">
            <summary>Get a consistent hash value for this silo address.</summary>
            <returns>Consistent hash value for this silo address.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Matches(Orleans.Runtime.SiloAddress)">
            <summary>
            Two silo addresses match if they are equal or if one generation or the other is 0
            </summary>
            <param name="other"> The other SiloAddress to compare this one with. </param>
            <returns> Returns <c>true</c> if the two SiloAddresses are considered to match -- if they are equal or if one generation or the other is 0. </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(Orleans.Runtime.SiloAddress)">
            <summary> IEquatable.Equals method override. </summary>
        </member>
        <member name="T:Orleans.Runtime.UniqueKey.Category">
            <summary>
            Type id values encoded into UniqueKeys
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Severity">
            <summary> Severity levels for log messages. </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainLifecycleStage">
            <summary>
            Stages of a grains lifecycle.
            TODO: Add more later, see ActivationInitializationStage
            Full grain lifecycle, including register, state setup, and 
              stream cleanup should all eventually be triggered by the 
              grain lifecycle.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainLifecycleStage.SetupState">
            <summary>
            Setup grain state prior to activation 
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainLifecycleStage.Activate">
            <summary>
            Activate grain
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceNotBoundException">
            <summary>
            Indicates that a <see cref="T:Orleans.Runtime.GrainReference"/> was not bound to the runtime before being used.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReference">
            <summary>
            This is the base class for all typed grain references.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReference.invokeMethodOptions">
            <summary>
            Invoke method options specific to this grain reference instance
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound to a runtime and hence valid for making requests.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReference.SystemTargetSilo">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.IsInitializedSystemTarget">
            <summary>
            Whether the runtime environment for system targets has been initialized yet.
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainId,System.String,Orleans.Runtime.SiloAddress,Orleans.Runtime.GuidId,Orleans.Runtime.IGrainReferenceRuntime)">
            <summary>Constructs a reference to the grain with the specified Id.</summary>
            <param name="grainId">The Id of the grain to refer to.</param>
            <param name="genericArgument">Type arguments in case of a generic grain.</param>
            <param name="systemTargetSilo">Target silo in case of a system target reference.</param>
            <param name="observerId">Observer ID in case of an observer reference.</param>
            <param name="runtime">The runtime which this grain reference is bound to.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainReference)">
            <summary>
            Constructs a copy of a grain reference.
            </summary>
            <param name="other">The reference to copy.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.FromGrainId(Orleans.Runtime.GrainId,Orleans.Runtime.IGrainReferenceRuntime,System.String,Orleans.Runtime.SiloAddress)">
            <summary>Constructs a reference to the grain with the specified ID.</summary>
            <param name="grainId">The ID of the grain to refer to.</param>
            <param name="runtime">The runtime client</param>
            <param name="genericArguments">Type arguments in case of a generic grain.</param>
            <param name="systemTargetSilo">Target silo in case of a system target reference.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Bind(Orleans.Runtime.IGrainReferenceRuntime)">
            <summary>
            Binds this instance to a runtime.
            </summary>
            <param name="runtime">The runtime.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Equals(System.Object)">
            <summary>
            Tests this reference for equality to another object.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="obj">The object to test for equality against this reference.</param>
            <returns><c>true</c> if the object is equal to this reference.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetHashCode">
            <summary> Calculates a hash code for a grain reference. </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetUniformHashCode">
            <summary>Get a uniform hash code for this grain reference.</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Equality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for equality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>true</c> if both grain references refer to the same grain (by grain identifier).</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Inequality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for inequality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>false</c> if both grain references are resolved to the same grain (by grain identifier).</returns>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceId">
            <summary>
            Implemented by generated subclasses to return a constant
            Implemented in generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceVersion">
            <summary>
            Implemented in generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.IsCompatible(System.Int32)">
            <summary>
            Implemented in generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceName">
            <summary>
            Return the name of the interface for this GrainReference. 
            Implemented in Orleans generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetMethodName(System.Int32,System.Int32)">
            <summary>
            Return the method name associated with the specified interfaceId and methodId values.
            </summary>
            <param name="interfaceId">Interface Id</param>
            <param name="methodId">Method Id</param>
            <returns>Method name string.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeOneWayMethod(System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeMethodAsync``1(System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToString">
            <summary>Returns a string representation of this reference.</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToKeyString">
            <summary> Get the key value for this grain, as a string. </summary>
        </member>
        <member name="T:Orleans.Runtime.IAddressable">
            <summary>
            Marker interface for addressable endpoints, such as grains, observers, and other system-internal addressable endpoints
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainExtension">
            <summary>
            Marker interface for grain extensions, used by internal runtime extension endpoints
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainReferenceRuntime">
            <summary>
            Runtime logic for <see cref="T:Orleans.Runtime.GrainReference"/>s to be usable.
            This service is not meant to be used directly by user code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.InvokeOneWayMethod(Orleans.Runtime.GrainReference,System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>Invokes a fire and forget method on a remote object.</summary>
            <param name="reference">The reference to the addressable target.</param>
            <param name="methodId">The method to invoke.</param>
            <param name="arguments">The method payload.</param>
            <param name="options">Invocation options.</param>
            <param name="silo">The target silo.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.InvokeMethodAsync``1(Orleans.Runtime.GrainReference,System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>Invokes a method on a remote object.</summary>
            <typeparam name="T">The result type</typeparam>
            <param name="reference">The reference to the addressable target.</param>
            <param name="methodId">The method to invoke.</param>
            <param name="arguments">The method payload.</param>
            <param name="options">Invocation options.</param>
            <param name="silo">The target silo.</param>
            <returns>Returns the response from the remote object.</returns>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceRuntime.Convert``1(Orleans.Runtime.IAddressable)">
            <summary>Converts the provided <paramref name="grain"/> to the specified interface.</summary>
            <typeparam name="TGrainInterface">The target grain interface type.</typeparam>
            <param name="grain">The grain reference being cast.</param>
            <returns>A reference to <paramref name="grain"/> which implements <typeparamref name="TGrainInterface"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainRuntime">
            <summary>
            The gateway of the <see cref="T:Orleans.Grain"/> to the Orleans runtime. The <see cref="T:Orleans.Grain"/> should only interact with the runtime through this interface.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.ServiceId">
            <summary>
            Provides the ServiceId this cluster is running as.
            ServiceId's are intended to be long lived Id values for a particular service which will remain constant 
            even if the service is started / redeployed multiple times during its operations life.
            </summary>
            <returns>ServiceId Guid for this service.</returns>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.SiloIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.RequestContext">
            <summary>
            This class holds information regarding the request currently being processed.
            It is explicitly intended to be available to application code.
            </summary>
            <remarks>
            <para>
            The request context is represented as a property bag.
            Some values are provided by default; others are derived from messages headers in the
            request that led to the current processing.
            </para>
            <para>
            Information stored in RequestContext is propagated from 
            Orleans clients to Orleans grains automatically 
            by the Orleans runtime.
            </para>
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.PropagateActivityId">
            <summary>
            Whether Trace.CorrelationManager.ActivityId settings should be propagated into grain calls.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.ActivityId">
            <summary>Gets or sets an activity ID that can be used for correlation.</summary>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Get(System.String)">
            <summary>
            Retrieve a value from the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be retrieved.</param>
            <returns>The value currently in the RequestContext for the specified key, 
            otherwise returns <c>null</c> if no data is present for that key.</returns>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Set(System.String,System.Object)">
            <summary>
            Sets a value into the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be updated / added.</param>
            <param name="value">The value to be stored into RequestContext.</param>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Remove(System.String)">
            <summary>
            Remove a value from the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be removed.</param>
            <returns>Boolean <c>True</c> if the value was previously in the RequestContext key-value bag and has now been removed, otherwise returns <c>False</c>.</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainReminder">
            <summary>
            Handle for a persistent Reminder.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainReminder.ReminderName">
            <summary> Name of this Reminder. </summary>
        </member>
        <member name="T:Orleans.Runtime.TickStatus">
            <summary>
            The status of a tick when the tick is delivered to the registrar grain.
            In case of failures, it may happen that a tick is not delivered on time. The app can notice such missed missed ticks as follows.
            Upon receiving a tick, the app can calculate the theoretical number of ticks since start of the reminder as: 
            curCount = (Now - FirstTickTime) / Period
            The app can keep track of it as 'count'. Upon receiving a tick, the number of missed ticks = curCount - count - 1
            Thereafter, the app can set count = curCount
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.FirstTickTime">
            <summary>
            The time at which the first tick of this reminder is due, or was triggered
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.Period">
            <summary>
            The period of the reminder
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.CurrentTickTime">
            <summary>
            The time on the runtime silo when the silo initiated the delivery of this tick.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ReminderException">
            <summary>
            Exception related to Orleans Reminder functions or Reminder service.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IKeyedServiceCollection`2">
            <summary>
            Collection of services that can be disambiguated by key
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceCollectionExtensions.GetServiceByKey``2(System.IServiceProvider,``0)">
            <summary>
            Acquire a service by key.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceCollectionExtensions.GetRequiredServiceByKey``2(System.IServiceProvider,``0)">
            <summary>
            Acquire a service by key.  Throws KeyNotFound exception if key is not found.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceCollectionExtensions.GetServiceByName``1(System.IServiceProvider,System.String)">
            <summary>
            Acquire a service by name.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceCollectionExtensions.GetRequiredServiceByName``1(System.IServiceProvider,System.String)">
            <summary>
            Acquire a service by name.  Throws KeyNotFound exception if name is not found.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainSupportClassAttribute">
            <summary>
            For internal (run-time) use only.
            Base class of all the activation attributes 
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainSupportClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GrainSupportClassAttribute"/> class.
            </summary>
            <param name="targetType">The type which this implementation applies to.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.GrainSupportClassAttribute.TargetType">
            <summary>
            Gets the type which this implementation applies to.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.MethodInvokerAttribute">
            <summary>
            Identifies a class that knows how to map the messages targeting a specifies interface ID to a grain (CLR) interface.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.MethodInvokerAttribute.#ctor(System.Type,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.MethodInvokerAttribute"/> class.</summary>
            <param name="targetType">The grain implementation type</param>
            <param name="interfaceId">The ID assigned to the interface by Orleans</param>
        </member>
        <member name="P:Orleans.CodeGeneration.MethodInvokerAttribute.InterfaceId">
            <summary>Gets the ID assigned to the interface by Orleans</summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainReferenceAttribute">
            <summary>Identifies a concrete grain reference to an interface ID</summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainReferenceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GrainReferenceAttribute"/> class.
            </summary>
            <param name="targetType">The type which this implementation applies to.</param>
        </member>
        <member name="T:Orleans.CodeGeneration.SerializerAttribute">
            <summary>
            Identifies a class that contains all the serializer methods for a type.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.SerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.SerializerAttribute"/> class.
            </summary>
            <param name="targetType">The type that this implementation can serialize.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.SerializerAttribute.TargetType">
            <summary>
            Gets the type which this implementation applies to.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.TypeCodeOverrideAttribute">
            <summary>
            The TypeCodeOverrideAttribute attribute allows to specify the grain interface ID or the grain class type code
            to override the default ones to avoid hash collisions
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.TypeCodeOverrideAttribute.TypeCode">
            <summary>
            Use a specific grain interface ID or grain class type code (e.g. to avoid hash collisions)
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.MethodIdAttribute">
            <summary>
            Specifies the method id for the interface method which this attribute is declared on.
            </summary>
            <remarks>
            Method ids must be unique for all methods in a given interface.
            This attribute is only applicable for interface method declarations, not for method definitions on classes.
            </remarks>
        </member>
        <member name="P:Orleans.CodeGeneration.MethodIdAttribute.MethodId">
            <summary>
            Gets the method id for the interface method this attribute is declared on.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.MethodIdAttribute.#ctor(System.Int32)">
            <summary>
            Specifies the method id for the interface method which this attribute is declared on.
            </summary>
            <remarks>
            Method ids must be unique for all methods in a given interface.
            This attribute is only valid only on interface method declarations, not on method definitions.
            </remarks>
            <param name="methodId">The method id.</param>
        </member>
        <member name="T:Orleans.CodeGeneration.VersionAttribute">
            <summary>
            The VersionAttribute allows to specify the version number of the interface
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.CopierMethodAttribute">
            <summary>
            Used to mark a method as providing a copier function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.SerializerMethodAttribute">
            <summary>
            Used to mark a method as providing a serializer function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.DeserializerMethodAttribute">
            <summary>
            Used to mark a method as providing a deserializer function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated for this type.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute.#ctor(System.Type,System.Boolean)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute"/>.</summary>
            <param name="type">The type that the generator should generate code for</param>
            <param name="throwOnFailure">When <see langword="true"/>, it will throw an exception if code cannot be generated for this type.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute.Type">
            <summary>
            Gets the type which should be considered for code generation.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.ConsiderForCodeGenerationAttribute.ThrowOnFailure">
            <summary>
            Gets a value indicating whether or not to throw if code was not generated for the specified type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.KnownTypeAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated for this type.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.KnownTypeAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.KnownTypeAttribute"/>.</summary>
            <param name="type">The type that the generator should generate code for</param>
        </member>
        <member name="T:Orleans.CodeGeneration.GenerateSerializerAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated for this type.
            Forces generation of type serializer, throwing if a serializer could not be generated.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GenerateSerializerAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.GenerateSerializerAttribute"/>.</summary>
            <param name="type">The type that the generator should generate code for</param>
        </member>
        <member name="T:Orleans.CodeGeneration.KnownBaseTypeAttribute">
            <summary>
            Indicates that this type and all subtypes are to be considered as [Serializable].
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainFactoryBase">
            <summary>
            Abstract base class for all grain proxy factory classes.
            </summary>
            <remarks>
            These methods are used from generated code.
            </remarks>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(Orleans.IGrainObserver)">
            <summary>
            Check that a grain observer parameter is of the correct underlying concrent type -- either extending from <c>GrainRefereence</c> or <c>Grain</c>
            </summary>
            <param name="grainObserver">Grain observer parameter to be checked.</param>
            <exception cref="T:System.ArgumentNullException">If grainObserver is <c>null</c></exception>
            <exception cref="T:System.NotSupportedException">If grainObserver class is not an appropriate underlying concrete type.</exception>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainMethodInvoker">
            <summary>
            An implementation of this interface is generated for every grain interface as part of the client-side code generation.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId">
            <summary> The interface id that this invoker supports. </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.InvokeMethodRequest)">
            <summary>
            Invoke a grain method.
            Invoker classes in generated code implement this method to provide a method call jump-table to map invoke data to a strongly typed call to the correct method on the correct interface.
            </summary>
            <param name="grain">Reference to the grain to be invoked.</param>
            <param name="request">The request being invoked.</param>
            <returns>Value promise for the result of the method invoke.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainExtensionMethodInvoker">
            <summary>
            An implementation of this interface is generated for every grain extension as part of the client-side code generation.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainExtensionMethodInvoker.Invoke(Orleans.Runtime.IGrainExtension,Orleans.CodeGeneration.InvokeMethodRequest)">
            <summary>
            Invoke a grain extension method.
            </summary>
            <param name="extension">Reference to the extension to be invoked.</param>
            <param name="request">The request being invoked.</param>
            <returns>Value promise for the result of the method invoke.</returns>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainExtensionMap">
            <summary>
            Methods for querying a collection of grain extensions.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainExtensionMap.TryGetExtension(System.Int32,Orleans.Runtime.IGrainExtension@)">
            <summary>
            Gets the extension from this instance if it is available.
            </summary>
            <param name="interfaceId">The interface id.</param>
            <param name="extension">The extension.</param>
            <returns>
            <see langword="true"/> if the extension is found, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodRequest">
            <summary>
            Data object holding metadata associated with a grain Invoke request.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.InterfaceId">
            <summary> InterfaceId for this Invoke request. </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.MethodId">
            <summary> MethodId for this Invoke request. </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.Arguments">
            <summary> Arguments for this Invoke request. </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.InvokeMethodRequest.ToString">
            <summary> 
            String representation for this Invoke request. 
            </summary>
            <remarks>
            Note: This is not the serialized wire form of this Invoke request.
            </remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodOptions">
            <summary>
            Invoke options for an <c>InvokeMethodRequest</c>
            </summary>
            <remarks>
            These flag values are used in Orleans generated invoker code, and should not be altered. </remarks>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.None">
            <summary>No options defined.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.OneWay">
            <summary>Invocation is one-way with no feedback on whether the call succeeds or fails.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.ReadOnly">
            <summary>Invocation is read-only and can interleave with other read-only invocations.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.Unordered">
            <summary>Invocation does not care about ordering and can consequently be optimized.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.DelayForConsistency">
            <summary>Obsolete field.</summary>
        </member>
        <member name="F:Orleans.CodeGeneration.InvokeMethodOptions.AlwaysInterleave">
            <summary>The invocation can interleave with any other request type, including write requests.</summary>
        </member>
        <member name="T:Orleans.CodeGeneration.KnownAssemblyAttribute">
            <summary>
            The attribute which informs the code generator that code should be generated an assembly.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.KnownAssemblyAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.KnownAssemblyAttribute"/>.</summary>
            <param name="type">A type contained by the target assembly. 
            The type itself is not relevant, and it's just a way to inrectly identify the assembly.</param>
        </member>
        <member name="M:Orleans.CodeGeneration.KnownAssemblyAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.KnownAssemblyAttribute"/>.</summary>
            <param name="assemblyName">The target assembly name.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.KnownAssemblyAttribute.Assembly">
            <summary>
            Gets or sets the assembly to include in code generation.
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.KnownAssemblyAttribute.TreatTypesAsSerializable">
            <summary>
            Gets or sets a value indicating whether or not to assume that all types in the specified assembly are
            serializable.
            </summary>
            <remarks>This is equivalent to specifying <see cref="T:Orleans.CodeGeneration.KnownTypeAttribute"/> for all types.</remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute">
            <summary>
            The attribute which informs the code generator which assemblies an assembly contains generated code for.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute"/>.</summary>
            <param name="assemblyName">The target assembly name.</param>
        </member>
        <member name="P:Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute.AssemblyName">
            <summary>
            The target assembly name that the generated code is for.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.SkipCodeGenerationAttribute">
            <summary>
            The attribute which informs the code generator that no code should be generated an assembly.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.IOnDeserialized">
            <summary>
            Indicates that a class is to be notified when it has been deserialized.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IOnDeserialized.OnDeserialized(Orleans.Serialization.ISerializerContext)">
            <summary>
            Notifies this instance that it has been fully deserialized.
            </summary>
            <param name="context">The serializer context.</param>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.Reset(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Resets this instance with the provided data.
            </summary>
            <param name="buffs">The underlying buffers.</param>
        </member>
        <member name="P:Orleans.Serialization.IBinaryTokenStreamReader.CurrentPosition">
            <summary> Current read position in the stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.IBinaryTokenStreamReader.Length">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.Copy">
            <summary>
            Creates a copy of the current stream reader.
            </summary>
            <returns>The new copy</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadBoolean">
            <summary> Read a <c>bool</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadInt">
            <summary> Read an <c>Int32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadUInt">
            <summary> Read an <c>UInt32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadShort">
            <summary> Read an <c>Int16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadUShort">
            <summary> Read an <c>UInt16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadLong">
            <summary> Read an <c>Int64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadULong">
            <summary> Read an <c>UInt64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadFloat">
            <summary> Read an <c>float</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadDouble">
            <summary> Read an <c>double</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadDecimal">
            <summary> Read an <c>decimal</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadString">
            <summary> Read an <c>string</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadBytes(System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="destination">Output array to store the returned data in.</param>
            <param name="offset">Offset into the destination array to write to.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadChar">
            <summary> Read an <c>char</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadByte">
            <summary> Read an <c>byte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadSByte">
            <summary> Read an <c>sbyte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadIPAddress">
            <summary> Read an <c>IPAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadIPEndPoint">
            <summary> Read an <c>IPEndPoint</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadSiloAddress">
            <summary> Read an <c>SiloAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamReader.ReadBlockInto(System.Array,System.Int32)">
            <summary>
            Read a block of data into the specified output <c>Array</c>.
            </summary>
            <param name="array">Array to output the data to.</param>
            <param name="n">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.ToBytes">
            <summary> Return the output stream as a set of <c>ArraySegment</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.ToByteArray">
            <summary> Return the output stream as a <c>byte[]</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.ReleaseBuffers">
            <summary> Release any serialization buffers being used by this stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.IBinaryTokenStreamWriter.CurrentOffset">
            <summary> Current write position in the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32)">
            <summary> Write an <c>Int32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16)">
            <summary> Write an <c>Int16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64)">
            <summary> Write an <c>Int64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte)">
            <summary> Write a <c>sbyte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32)">
            <summary> Write a <c>UInt32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16)">
            <summary> Write a <c>UInt16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64)">
            <summary> Write a <c>UInt64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte)">
            <summary> Write a <c>byte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single)">
            <summary> Write a <c>float</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double)">
            <summary> Write a <c>double</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Decimal)">
            <summary> Write a <c>decimal</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.String)">
            <summary> Write a <c>string</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char)">
            <summary> Write a <c>char</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean)">
            <summary> Write a <c>bool</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.WriteNull">
            <summary> Write a <c>null</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.WriteTypeHeader(System.Type,System.Type)">
            <summary> Write a type header for the specified Type to the stream. </summary>
            <param name="t">Type to write header for.</param>
            <param name="expected">Currently expected Type for this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[])">
            <summary> Write a <c>byte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary> Write a list of byte array segments to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Write the specified number of bytes to the stream, starting at the specified offset in the input <c>byte[]</c>. </summary>
            <param name="b">The input data to be written.</param>
            <param name="offset">The offset into the inout byte[] to start writing bytes from.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int16[])">
            <summary> Write a <c>Int16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int32[])">
            <summary> Write a <c>Int32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Int64[])">
            <summary> Write a <c>Int64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt16[])">
            <summary> Write a <c>UInt16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt32[])">
            <summary> Write a <c>UInt32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.UInt64[])">
            <summary> Write a <c>UInt64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.SByte[])">
            <summary> Write a <c>sbyte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Char[])">
            <summary> Write a <c>char[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Boolean[])">
            <summary> Write a <c>bool[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Double[])">
            <summary> Write a <c>double[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Single[])">
            <summary> Write a <c>float[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Net.IPEndPoint)">
            <summary> Write a <c>IPEndPoint</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Net.IPAddress)">
            <summary> Write a <c>IPAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)">
            <summary> Write a <c>SiloAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.TimeSpan)">
            <summary> Write a <c>TimeSpan</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.DateTime)">
            <summary> Write a <c>DataTime</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.Write(System.Guid)">
            <summary> Write a <c>Guid</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.IBinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)">
            <summary>
            Try to write a simple type (non-array) value to the stream.
            </summary>
            <param name="obj">Input object to be written to the output stream.</param>
            <returns>Returns <c>true</c> if the value was successfully written to the output stream.</returns>
        </member>
        <member name="T:Orleans.Serialization.ValueTypeSetter`2">
            <summary>
            The delegate used to set fields in value types.
            </summary>
            <typeparam name="TDeclaring">The declaring type of the field.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <param name="instance">The instance having its field set.</param>
            <param name="value">The value being set.</param>
        </member>
        <member name="M:Orleans.Serialization.IFieldUtils.GetGetter(System.Reflection.FieldInfo)">
            <summary>
            Returns a delegate to get the value of a specified field.
            </summary>
            <returns>A delegate to get the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.IFieldUtils.GetReferenceSetter(System.Reflection.FieldInfo)">
            <summary>
            Returns a delegate to set the value of this field for an instance.
            </summary>
            <returns>A delegate to set the value of this field for an instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.IFieldUtils.GetValueSetter(System.Reflection.FieldInfo)">
            <summary>
            Returns a delegate to set the value of this field for an instance.
            </summary>
            <returns>A delegate to set the value of this field for an instance.</returns>
        </member>
        <member name="P:Orleans.Serialization.ISerializerContext.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ISerializerContext.AdditionalContext">
            <summary>
            Gets additional context associated with this instance.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ICopyContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Record an object-to-copy mapping into the current serialization context.
            Used for maintaining the .NET object graph during serialization operations.
            Used in generated code.
            </summary>
            <param name="original">Original object.</param>
            <param name="copy">Copy object that will be the serialized form of the original.</param>
        </member>
        <member name="P:Orleans.Serialization.ISerializationContext.StreamWriter">
            <summary>
            Gets the stream writer.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ISerializationContext.RecordObject(System.Object,System.Int32)">
            <summary>
            Records the provided object at the specified offset into <see cref="P:Orleans.Serialization.ISerializationContext.StreamWriter"/>.
            </summary>
            <param name="original"></param>
            <param name="offset"></param>
        </member>
        <member name="P:Orleans.Serialization.IDeserializationContext.StreamReader">
            <summary>
            The stream reader.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.IDeserializationContext.CurrentObjectOffset">
            <summary>
            The offset of the current object in <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.IDeserializationContext.CurrentPosition">
            <summary>
            Gets the current position in the stream.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IDeserializationContext.RecordObject(System.Object,System.Int32)">
            <summary>
            Records deserialization of the provided object.
            </summary>
            <param name="obj"></param>
            <param name="offset">The offset within <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.</param>
        </member>
        <member name="M:Orleans.Serialization.IDeserializationContext.RecordObject(System.Object)">
            <summary>
            Records deserialization of the provided object at the current object offset.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Orleans.Serialization.IDeserializationContext.FetchReferencedObject(System.Int32)">
            <summary>
            Returns the object from the specified offset.
            </summary>
            <param name="offset">The offset within <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.</param>
            <returns>The object from the specified offset.</returns>
        </member>
        <member name="T:Orleans.Serialization.Deserializer">
            <summary>
            Deserializer function.
            </summary>
            <param name="expected">Expected Type to receive.</param>
            <param name="context">The context under which this object is being deserialized.</param>
            <returns>Rehydrated object of the specified Type read from the current position in the input stream.</returns>
        </member>
        <member name="T:Orleans.Serialization.Serializer">
            <summary> Serializer function. </summary>
            <param name="raw">Input object to be serialized.</param>
            <param name="context">The context under which this object is being serialized.</param>
            <param name="expected">Current Type active in this stream.</param>
        </member>
        <member name="T:Orleans.Serialization.DeepCopier">
            <summary>
            Deep copier function.
            </summary>
            <param name="original">Original object to be deep copied.</param>
            <param name="context">The serialization context.</param>
            <returns>Deep copy of the original object.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializerMethods">
            <summary>
            Contains delegates for serialization.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerMethods.DeepCopy">
            <summary>
            Gets the deep copier delegate.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerMethods.Serialize">
            <summary>
            Gets the serializer delegate.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerMethods.Deserialize">
            <summary>
            Gets the deserializer delegate.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializerFeature">
            <summary>
            Contains metadata about serializers and serialization types.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerFeature.SerializerTypes">
            <summary>
            Gets a collection of metadata about types which contain serializer methods for individual types.
            </summary>
            <remarks>
            This collection corresponds to the <see cref="T:Orleans.CodeGeneration.SerializerAttribute"/> attribute as well as types which are self-serializing.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.SerializerFeature.SerializerDelegates">
            <summary>
            Gets a collection of metadata about delegates used to serialize individual types.
            </summary>
            <remarks>
            This collection is intended to hold information about built-in serializers which are represented as a collection of delegates.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.SerializerFeature.KnownTypes">
            <summary>
            Gets a collection of metadata about types which may be serializable.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializerFeature.AddSerializerType(System.Type,System.Type)">
            <summary>
            Adds a serializer type 
            </summary>
            <param name="targetType"></param>
            <param name="serializerType"></param>
        </member>
        <member name="M:Orleans.Serialization.SerializerFeature.AddKnownType(System.String,System.String)">
            <summary>
            Adds a known type to the <see cref="P:Orleans.Serialization.SerializerFeature.KnownTypes"/> property.
            </summary>
            <param name="fullyQualifiedTypeName">the fully-qualified type name.</param>
            <param name="typeKey">The orleans type key.</param>
        </member>
        <member name="T:Orleans.Serialization.SerializerTypeMetadata">
            <summary>
            Describes a class which has serialization methods.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerTypeMetadata.Serializer">
            <summary>
            Gets the serializer type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerTypeMetadata.Target">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializerDelegateMetadata">
            <summary>
            Describes a set of delegates which are used to serializer a specified type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerDelegateMetadata.Target">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerDelegateMetadata.Delegates">
            <summary>
            Gets the serialization delegates.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializerKnownTypeMetadata">
            <summary>
            Describes a type which can be identified by the serializer.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerKnownTypeMetadata.TypeKey">
            <summary>
            Gets the type key.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializerKnownTypeMetadata.Type">
            <summary>
            Gets the fully-qualified type name.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ReadOnlyAttribute">
            <summary>
            The ReadOnly attribute is used to mark methods that do not modify the state of a grain.
            <para>
            Marking methods as ReadOnly allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ReentrantAttribute">
            <summary>
            The Reentrant attribute is used to mark grain implementation classes that allow request interleaving within a task.
            <para>
            This is an advanced feature and should not be used unless the implications are fully understood.
            That said, allowing request interleaving allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.UnorderedAttribute">
            <summary>
            The Unordered attribute is used to mark grain interface in which the delivery order of
            messages is not significant.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.StatelessWorkerAttribute">
            <summary>
            The StatelessWorker attribute is used to mark grain class in which there is no expectation
            of preservation of grain state between requests and where multiple activations of the same grain are allowed to be created by the runtime.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.AlwaysInterleaveAttribute">
            <summary>
            The AlwaysInterleaveAttribute attribute is used to mark methods that can interleave with any other method type, including write (non ReadOnly) requests.
            </summary>
            <remarks>
            Note that this attribute is applied to method declaration in the grain interface,
            and not to the method in the implementation class itself.
            </remarks>
        </member>
        <member name="T:Orleans.Concurrency.MayInterleaveAttribute">
            <summary>
            The MayInterleaveAttribute attribute is used to mark classes
            that want to control request interleaving via supplied method callback.
            </summary>
            <remarks>
            The callback method name should point to a public static function declared on the same class
            and having the following signature: <c>public static bool MayInterleave(InvokeMethodRequest req)</c>
            </remarks>
        </member>
        <member name="P:Orleans.Concurrency.MayInterleaveAttribute.CallbackMethodName">
            <summary>
            The name of the callback method
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableAttribute">
            <summary>
            The Immutable attribute indicates that instances of the marked class or struct are never modified
            after they are created.
            </summary>
            <remarks>
            Note that this implies that sub-objects are also not modified after the instance is created.
            </remarks>
        </member>
        <member name="T:Orleans.Concurrency.OneWayAttribute">
            <summary>
            Indicates that a method on a grain interface is one-way and that no response message will be sent to the caller.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.Immutable`1">
            <summary>
            Wrapper class for carrying immutable data.
            </summary>
            <remarks>
            Objects that are known to be immutable are given special fast-path handling by the Orleans serializer 
            -- which in a nutshell allows the DeepCopy step to be skipped during message sends where the sender and reveiving grain are in the same silo.
            
            One very common usage pattern for Immutable is when passing byte[] parameters to a grain. 
            If a program knows it will not alter the contents of the byte[] (for example, if it contains bytes from a static image file read from disk)
            then considerable savings in memory usage and message throughput can be obtained by marking that byte[] argument as <c>Immutable</c>.
            </remarks>
            <typeparam name="T">Type of data to be wrapped by this Immutable</typeparam>
        </member>
        <member name="P:Orleans.Concurrency.Immutable`1.Value">
            <summary> Return reference to the original value stored in this Immutable wrapper. </summary>
        </member>
        <member name="M:Orleans.Concurrency.Immutable`1.#ctor(`0)">
            <summary>
            Constructor to wrap the specified data object in new Immutable wrapper.
            </summary>
            <param name="value">Value to be wrapped and marked as immutable.</param>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableExt">
            <summary>
            Utility class to add the .AsImmutable method to all objects.
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)">
            <summary>
            Extension method to return this value wrapped in <c>Immutable</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be wrapped.</param>
            <returns>Immutable wrapper around the original object.</returns>
            <seealso cref="T:Orleans.Concurrency.Immutable`1"/>"/>
        </member>
        <member name="T:Orleans.Grain">
            <summary>
            The abstract base class for all grain classes.
            </summary>
        </member>
        <member name="P:Orleans.Grain.GrainFactory">
            <summary>
            Gets an object which can be used to access other grains. Null if this grain is not associated with a Runtime, such as when created directly for unit testing.
            </summary>
        </member>
        <member name="P:Orleans.Grain.ServiceProvider">
            <summary>
            Gets the IServiceProvider managed by the runtime. Null if this grain is not associated with a Runtime, such as when created directly for unit testing.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of Grain) do not have to add a constructor.
            Client code should use the GrainFactory property to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime)">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity and IGrainRuntime with test doubles (mocks/stubs).
            </summary>
        </member>
        <member name="P:Orleans.Grain.IdentityString">
            <summary>
            String representation of grain's SiloIdentity including type and primary key.
            </summary>
        </member>
        <member name="P:Orleans.Grain.RuntimeIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="M:Orleans.Grain.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a timer to send periodic callbacks to this grain.
            </summary>
            <remarks>
            <para>
            This timer will not prevent the current grain from being deactivated.
            If the grain is deactivated, then the timer will be discarded.
            </para>
            <para>
            Until the Task returned from the asyncCallback is resolved, 
            the next timer tick will not be scheduled. 
            That is to say, timer callbacks never interleave their turns.
            </para>
            <para>
            The timer may be stopped at any time by calling the <c>Dispose</c> method 
            on the timer handle returned from this call.
            </para>
            <para>
            Any exceptions thrown by or faulted Task's returned from the asyncCallback 
            will be logged, but will not prevent the next timer tick from being queued.
            </para>
            </remarks>
            <param name="asyncCallback">Callback function to be invoked when timr ticks.</param>
            <param name="state">State object that will be passed as argument when calling the asyncCallback.</param>
            <param name="dueTime">Due time for first timer tick.</param>
            <param name="period">Period of subsequent timer ticks.</param>
            <returns>Handle for this Timer.</returns>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Orleans.Grain.RegisterOrUpdateReminder(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a persistent, reliable reminder to send regular notifications (reminders) to the grain.
            The grain must implement the <c>Orleans.IRemindable</c> interface, and reminders for this grain will be sent to the <c>ReceiveReminder</c> callback method.
            If the current grain is deactivated when the timer fires, a new activation of this grain will be created to receive this reminder.
            If an existing reminder with the same name already exists, that reminder will be overwritten with this new reminder.
            Reminders will always be received by one activation of this grain, even if multiple activations exist for this grain.
            </summary>
            <param name="reminderName">Name of this reminder</param>
            <param name="dueTime">Due time for this reminder</param>
            <param name="period">Frequence period for this reminder</param>
            <returns>Promise for Reminder handle.</returns>
        </member>
        <member name="M:Orleans.Grain.UnregisterReminder(Orleans.Runtime.IGrainReminder)">
            <summary>
            Unregisters a previously registered reminder.
            </summary>
            <param name="reminder">Reminder to unregister.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Grain.GetReminder(System.String)">
            <summary>
            Returns a previously registered reminder.
            </summary>
            <param name="reminderName">Reminder to return</param>
            <returns>Promise for Reminder handle.</returns>
        </member>
        <member name="M:Orleans.Grain.GetReminders">
            <summary>
            Returns a list of all reminders registered by the grain.
            </summary>
            <returns>Promise for list of Reminders registered for this grain.</returns>
        </member>
        <member name="M:Orleans.Grain.DeactivateOnIdle">
            <summary>
            Deactivate this activation of the grain after the current grain method call is completed.
            This call will mark this activation of the current grain to be deactivated and removed at the end of the current method.
            The next call to this grain will result in a different activation to be used, which typical means a new activation will be created automatically by the runtime.
            </summary>
        </member>
        <member name="M:Orleans.Grain.DelayDeactivation(System.TimeSpan)">
            <summary>
            Delay Deactivation of this activation at least for the specified time duration.
            A positive <c>timeSpan</c> value means “prevent GC of this activation for that time span”.
            A negative <c>timeSpan</c> value means “cancel the previous setting of the DelayDeactivation call and make this activation behave based on the regular Activation Garbage Collection settings”.
            DeactivateOnIdle method would undo / override any current “keep alive” setting, 
            making this grain immediately available for deactivation.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnActivateAsync">
            <summary>
            This method is called at the end of the process of activating a grain.
            It is called before any messages have been dispatched to the grain.
            For grains with declared persistent state, this method is called after the State property has been populated.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnDeactivateAsync">
            <summary>
            This method is called at the begining of the process of deactivating a grain.
            </summary>
        </member>
        <member name="T:Orleans.Grain`1">
            <summary>
            Base class for a Grain with declared persistent state.
            </summary>
            <typeparam name="TGrainState">The class of the persistent state object</typeparam>
        </member>
        <member name="M:Orleans.Grain`1.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of this class) do not have to add a constructor.
            Client code should use the GrainFactory to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime,Orleans.Core.IStorage{`0})">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity, IGrainRuntime and State with test doubles (mocks/stubs).
            </summary>
        </member>
        <member name="P:Orleans.Grain`1.State">
            <summary>
            Strongly typed accessor for the grain state 
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.ClearStateAsync">
            <summary>Clear the current grain state data from backing store.</summary>
        </member>
        <member name="M:Orleans.Grain`1.WriteStateAsync">
            <summary>Write of the current grain state data into backing store.</summary>
        </member>
        <member name="M:Orleans.Grain`1.ReadStateAsync">
            <summary>Read the current grain state data from backing store.</summary>
            <remarks>Any previous contents of the grain state data will be overwritten.</remarks>
        </member>
        <member name="T:Orleans.GrainExtensions">
            <summary>
            Extension methods for grains.
            </summary>
        </member>
        <member name="M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Converts this grain to a specific grain interface.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to convert.</param>
            <returns>A strongly typed <c>GrainReference</c> of grain interface type TGrainInterface.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts a grain to a specific grain interface.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to cast.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.BindGrainReference(Orleans.Runtime.IAddressable,Orleans.IGrainFactory)">
            <summary>
            Binds the grain reference to the provided <see cref="T:Orleans.IGrainFactory"/>.
            </summary>
            <param name="grain">The grain reference.</param>
            <param name="grainFactory">The grain factory.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.IsPrimaryKeyBasedOnLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns whether part of the primary key is of type long.
            </summary>
            <param name="grain">The target grain.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the long representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output paramater to return the extended key part of the grain primary key, if extened primary key was provided for that grain.</param>
            <returns>A long representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the long representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A long representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the Guid representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output paramater to return the extended key part of the grain primary key, if extened primary key was provided for that grain.</param>
            <returns>A Guid representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the Guid representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A Guid representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyString(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the string primary key of the grain.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A string representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.InvokeOneWay``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Invokes a method of a grain interface is one-way fashion so that no response message will be sent to the caller.
            </summary>
            <typeparam name="T">Grain interface</typeparam>
            <param name="grainReference">Grain reference which will be copied and then a call executed on it</param>
            <param name="grainMethodInvocation">Function that should invoke grain method and return resulting task</param>
        </member>
        <member name="T:Orleans.IGrain">
            <summary>
            Marker interface for grains
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Guid"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Int64"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithStringKey">
            <summary>
            Marker interface for grains with <see cref="T:System.String"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.GrainCallFilterDelegate">
            <summary>
            A delegate used to intercept invocation of a request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.OutgoingGrainCallFilterDelegate">
            <summary>
            A delegate used to intercept an incoming request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.IncomingGrainCallFilterDelegate">
            <summary>
            A delegate used to intercept an outgoing request.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which must be awaited before processing continues.</returns>
        </member>
        <member name="T:Orleans.IGrainCallContext">
            <summary>
            Represents a method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Grain">
            <summary>
            Gets the grain being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> of the method being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.InterfaceMethod">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> for the interface method being invoked.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Arguments">
            <summary>
            Gets the arguments for this method invocation.
            </summary>
        </member>
        <member name="M:Orleans.IGrainCallContext.Invoke">
            <summary>
            Invokes the request.
            </summary>
        </member>
        <member name="P:Orleans.IGrainCallContext.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="T:Orleans.IIncomingGrainCallContext">
            <summary>
            Represents an incoming method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="P:Orleans.IIncomingGrainCallContext.ImplementationMethod">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> for the implementation method being invoked.
            </summary>
        </member>
        <member name="T:Orleans.IOutgoingGrainCallContext">
            <summary>
            Represents an outgoing method invocation as well as the result of invocation.
            </summary>
        </member>
        <member name="T:Orleans.IIncomingGrainCallFilter">
            <summary>
            Interface for incoming grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.IIncomingGrainCallFilter.Invoke(Orleans.IIncomingGrainCallContext)">
            <summary>
            Invokes this filter.
            </summary>
            <param name="context">The grain call context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.IGrainCallFilter">
            <inheritdoc />
        </member>
        <member name="T:Orleans.IOutgoingGrainCallFilter">
            <summary>
            Interface for outgoing grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.IOutgoingGrainCallFilter.Invoke(Orleans.IOutgoingGrainCallContext)">
            <summary>
            Invokes this filter.
            </summary>
            <param name="context">The grain call context.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Guid,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Int64,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extension of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extension of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns>A reference to the specified grain.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Creates a reference to the provided <paramref name="obj"/>.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The object to create a reference to.</param>
            <returns>The reference to <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Deletes the provided object reference.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The reference being deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IGrainFactory.BindGrainReference(Orleans.Runtime.IAddressable)">
            <summary>
            Binds the provided grain reference to this instance.
            </summary>
            <param name="grain">The grain reference.</param>
        </member>
        <member name="M:Orleans.Core.IStorage`1.ClearStateAsync">
            <summary>
            Async method to cause the current grain state data to be cleared and reset. 
            This will usually mean the state record is deleted from backing store, but the specific behavior is defined by the storage provider instance configured for this grain.
            If Etags do not match, then this operation will fail; Set Etag = <c>null</c> to indicate "always delete".
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage`1.WriteStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            If Etags do not match, then this operation will fail; Set Etag = <c>null</c> to indicate "always overwrite".
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage`1.ReadStateAsync">
            <summary>
            Async method to cause refresh of the current grain state data from backing store.
            Any previous contents of the grain state data will be overwritten.
            </summary>
        </member>
        <member name="T:Orleans.Core.Abstractions.Internal.Interner`2">
            <summary>
            Provide a weakly-referenced cache of interned objects.
            Interner is used to optimise garbage collection.
            We use it to store objects that are allocated frequently and may have long timelife. 
            This means those object may quickly fill gen 2 and cause frequent costly full heap collections.
            Specificaly, a message that arrives to a silo and all the headers and ids inside it may stay alive long enough to reach gen 2.
            Therefore, we store all ids in interner to re-use their memory accros different messages.
            </summary>
            <typeparam name="K">Type of objects to be used for intern keys</typeparam>
            <typeparam name="T">Type of objects to be interned / cached</typeparam>
        </member>
        <member name="M:Orleans.Core.Abstractions.Internal.Interner`2.FindOrCreate(`0,System.Func{`0,`1})">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Core.Abstractions.Internal.Interner`2.TryFind(`0,`1@)">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The existing value if the key is found</param>
        </member>
        <member name="M:Orleans.Core.Abstractions.Internal.Interner`2.Intern(`0,`1)">
            <summary>
            Find cached copy of object with specified key, otherwise store the supplied one. 
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The new object to store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or justed passed in</returns>
        </member>
        <member name="T:Orleans.IGrainObserver">
            <summary>
            The IGrainObserver interface is a marker interface for observers.
            Observers are used to receive notifications from grains; that is, they represent the subscriber side of a 
            publisher/subscriber interface.
            Note that all observer methods should be void, since they do not return a value to the observed grain.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.ClusterLocalRegistration">
            <summary>
            A multi-cluster registration strategy where each cluster has 
            its own independent directory. This is the default.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.GlobalSingleInstanceRegistration">
            <summary>
            A multi-cluster registration strategy that uses the 
            the global-single-instance protocol to coordinate grain directories.
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.IMultiClusterRegistrationStrategy">
            <summary>
            Interface for multi-cluster registration strategies. Used by protocols that coordinate multiple instances.
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IMultiClusterRegistrationStrategy.GetRemoteInstances(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Determines which remote clusters have instances.
            </summary>
            <param name="clusters">List of all clusters</param>
            <param name="myClusterId">The cluster id of this cluster</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.GrainDirectory.MultiClusterRegistrationStrategy">
            <summary>
            A superclass for all multi-cluster registration strategies.
            Strategy object which is used as keys to select the proper registrar.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.RegistrationAttribute">
            <summary>
            base class for multi cluster registration strategies.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.GlobalSingleInstanceAttribute">
            <summary>
            This attribute indicates that instances of the marked grain class will have a single instance across all available clusters. Any requests in any clusters will be forwarded to the single activation instance.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.OneInstancePerClusterAttribute">
            <summary>
            This attribute indicates that instances of the marked grain class
            will have an independent instance for each cluster with
            no coordination.
            </summary>
        </member>
        <member name="T:Orleans.ILifecycleObservable">
            <summary>
            Observable lifecycle.
            Each stage of lifecycle is observable.  All observers will be notified 
              when the stage is reached when starting, and stopping.
            Stages are started in ascending order, and stopped in decending order.
            </summary>
        </member>
        <member name="M:Orleans.ILifecycleObservable.Subscribe(System.String,System.Int32,Orleans.ILifecycleObserver)">
            <summary>
            Subscribe for notification when a stage is reached while starting or stopping.
            </summary>
            <param name="observerName">name of observer, for reporting purposes</param>
            <param name="stage">stage of interest</param>
            <param name="observer">stage observer</param>
            <returns>A disposable that can be disposed of to unsubscribe</returns>
        </member>
        <member name="T:Orleans.ILifecycleObserver">
            <summary>
            Lifecycle observer used to handle start and stop notification.
            </summary>
        </member>
        <member name="M:Orleans.ILifecycleObserver.OnStart(System.Threading.CancellationToken)">
            <summary>
            Handle start notifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.ILifecycleObserver.OnStop(System.Threading.CancellationToken)">
            <summary>
            Handle stop notifications
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.ILifecycleParticipant`1">
            <summary>
            Provides hook to take part in lifecycle.
            Also may act as a signal interface indicating that an object can take part in lifecycle.
            </summary>
        </member>
        <member name="T:Orleans.ILifecycleSubject">
            <summary>
            Both a lifecycle observer and observable lifecycle.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ConnectionIssue">
            <summary>
            Represents information about connection issues encountered inside log consistency protocols.
            It is used both inside the protocol to track retry loops, and is made visible to users 
            who want to monitor their log-consistent grains for communication issues.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.TimeStamp">
            <summary>
            The UTC timestamp of the last time at which the issue was observed
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.TimeOfFirstFailure">
            <summary>
            The UTC timestamp of the first time we observed this issue
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.NumberOfConsecutiveFailures">
            <summary>
            The number of times we have observed this issue since the first failure
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ConnectionIssue.RetryDelay">
            <summary>
            The delay we are waiting before the next retry
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ConnectionIssue.ComputeRetryDelay(System.Nullable{System.TimeSpan})">
            <summary>
            Computes the retry delay based on the rest of the information. Is overridden by subclasses
            that represent specific categories of issues.
            </summary>
            <param name="previous">The previously used retry delay</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.LogConsistency.NotificationFailed">
            <summary>
            Represents information about notification failures encountered inside log consistency protocols.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.NotificationFailed.RemoteClusterId">
            <summary>
            The clusterId of the remote cluster to which we had an issue when sending change notifications.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.NotificationFailed.Exception">
            <summary>
            The exception we caught, or null if the problem was not caused by an exception.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.FeaturePopulatorAttribute">
            <summary>
            Defines a feature populator for this assembly.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.FeaturePopulatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Metadata.FeaturePopulatorAttribute"/> class.
            </summary>
            <param name="populatorType">The feature populator type.</param>
        </member>
        <member name="P:Orleans.Metadata.FeaturePopulatorAttribute.PopulatorType">
            <summary>
            Gets the feature populator type.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainClassFeature">
            <summary>
            Contains grain class descriptions.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainClassFeature.Classes">
            <summary>
            Gets a collection of metadata about grain classes.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainClassMetadata">
            <summary>
            Describes a grain class.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainClassMetadata.#ctor(System.Type)">
            <summary>
            Initializes an instance of the <see cref="T:Orleans.Metadata.GrainClassMetadata"/> class.
            </summary>
            <param name="classType">The grain class type.</param>
        </member>
        <member name="P:Orleans.Metadata.GrainClassMetadata.ClassType">
            <summary>
            Gets the grain class type described by this instance.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainInterfaceFeature">
            <summary>
            Contains grain interface descriptions.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainInterfaceFeature.Interfaces">
            <summary>
            Gets a collection of metadata about grain interfaces.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.GrainInterfaceMetadata">
            <summary>
            Describes a grain interface.
            </summary>
        </member>
        <member name="M:Orleans.Metadata.GrainInterfaceMetadata.#ctor(System.Type,System.Type,System.Type,System.Int32)">
            <summary>
            Initializes an instance of the <see cref="T:Orleans.Metadata.GrainInterfaceMetadata"/> class.
            </summary>
            <param name="interfaceType">The grain interface type</param>
            <param name="referenceType">The grain reference type.</param>
            <param name="invokerType">The grain method invoker type.</param>
            <param name="interfaceId">The interface id.</param>
        </member>
        <member name="P:Orleans.Metadata.GrainInterfaceMetadata.InterfaceType">
            <summary>
            Gets the interface type.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainInterfaceMetadata.ReferenceType">
            <summary>
            Gets the type of the grain reference for this interface.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainInterfaceMetadata.InvokerType">
            <summary>
            Gets the type of the grain method invoker for this interface.
            </summary>
        </member>
        <member name="P:Orleans.Metadata.GrainInterfaceMetadata.InterfaceId">
            <summary>
            Gets the interface id.
            </summary>
        </member>
        <member name="T:Orleans.Metadata.IFeaturePopulator`1">
            <summary>
            Populates a specified kind of feature.
            </summary>
            <typeparam name="TFeature">The type of the feature.</typeparam>
        </member>
        <member name="M:Orleans.Metadata.IFeaturePopulator`1.Populate(`0)">
            <summary>
            Populates the provided <paramref name="feature"/>.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="T:Orleans.Placement.PlacementAttribute">
            <summary>
            Base for all placement policy marker attributes.
            </summary>
        </member>
        <member name="T:Orleans.Placement.RandomPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>RandomPlacement</c> policy.
            </summary>
            <remarks>
            This is the default placement policy, so this attribute does not need to be used for normal grains.
            </remarks>
        </member>
        <member name="T:Orleans.Placement.HashBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>HashBasedPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.Placement.PreferLocalPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>PreferLocalPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.Placement.ActivationCountBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>ActivationCountBasedPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.Providers.StorageProviderAttribute">
            <summary>
            The [Orleans.Providers.StorageProvider] attribute is used to define which storage provider to use for persistence of grain state.
            <para>
            Specifying [Orleans.Providers.StorageProvider] property is recommended for all grains which extend Grain&lt;T&gt;.
            If no [Orleans.Providers.StorageProvider] attribute is  specified, then a "Default" strorage provider will be used.
            If a suitable storage provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.StorageProviderAttribute.ProviderName">
            <summary>
            The name of the provider to be used for persisting of grain state
            </summary>
        </member>
        <member name="T:Orleans.Providers.LogConsistencyProviderAttribute">
            <summary>
            The [Orleans.Providers.LogConsistencyProvider] attribute is used to define which consistency provider to use for grains using the log-view state abstraction.
            <para>
            Specifying [Orleans.Providers.LogConsistencyProvider] property is recommended for all grains that derive
            from LogConsistentGrain, such as JournaledGrain.
            If no [Orleans.Providers.LogConsistencyProvider] attribute is  specified, then the runtime tries to locate
            one as follows. First, it looks for a
            "Default" provider in the configuration file, then it checks if the grain type defines a default.
            If a consistency provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.LogConsistencyProviderAttribute.ProviderName">
            <summary>
            The name of the provider to be used for consistency
            </summary>
        </member>
        <member name="T:Orleans.Streams.IAsyncObservable`1">
            <summary>
            This interface generalizes the standard .NET IObserveable interface to allow asynchronous consumption of items.
            Asynchronous here means that the consumer can process items asynchronously and signal item completion to the 
            producer by completing the returned Task.
            <para>
            Note that this interface is invoked (used) by item consumers and implemented by item producers.
            This means that the producer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="T:Orleans.Streams.IAsyncObserver`1">
            <summary>
            This interface generalizes the standard .NET IObserver interface to allow asynchronous production of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next item to the consumer.
            <para>
            The Task returned from this method should be completed when the item's processing has been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            When the consumer is the (producer endpoint of) a stream, the Task is completed when the stream implementation
            has accepted responsibility for the item and is assured of meeting its delivery guarantees.
            For instance, a stream based on a durable queue would complete the Task when the item has been durably saved.
            A stream that provides best-effort at most once delivery would return a Task that is already complete.
            </para>
            <para>
            When the producer is the (consumer endpoint of) a stream, the Task should be completed by the consumer code
            when it has accepted responsibility for the item. 
            In particular, if the stream provider guarantees at-least-once delivery, then the item should not be considered
            delivered until the Task returned by the consumer has been completed.
            </para>
            </summary>
            <param name="item">The item to be passed.</param>
            <param name="token">The stream sequence token of this item.</param>
            <returns>A Task that is completed when the item has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnCompletedAsync">
            <summary>
            Notifies the consumer that the stream was completed.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <returns>A Task that is completed when the stream-complete operation has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnErrorAsync(System.Exception)">
            <summary>
            Notifies the consumer that the stream had an error.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <param name="ex">An Exception that describes the error that occured on the stream.</param>
            <returns>A Task that is completed when the close has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncBatchObserver`1">
            <summary>
            This interface generalizes the IAsyncObserver interface to allow production and consumption of batches of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the consumer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(System.Collections.Generic.IEnumerable{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next batch of items to the consumer.
            <para>
            The Task returned from this method should be completed when all items in the batch have been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            That is, the semantics of the returned Task is the same as for <code>OnNextAsync</code>,
            extended for all items in the batch.
            </para>
            </summary>
            <param name="batch">The items to be passed.</param>
            <param name="token">The stream sequence token of this batch of items.</param>
            <returns>A Task that is completed when the batch has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncStream`1">
            <summary>
            This interface represents an object that serves as a distributed rendevous between producers and consumers.
            It is similar to a Reactive Framework <code>Subject</code> and implements
            <code>IObserver</code> nor <code>IObservable</code> interfaces.
            </summary>
            <typeparam name="T">The type of object that flows through the stream.</typeparam>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream`1.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream`1.ProviderName">
            <summary> Stream Provider Name. </summary>
        </member>
        <member name="M:Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles">
            <summary>
            Retrieves a list of all active subscriptions created by the caller for this stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Guid">
            <summary> Stream primary key guid. </summary>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Namespace">
            <summary> Stream namespace. </summary>
        </member>
        <member name="T:Orleans.Streams.StreamSequenceToken">
            <summary>
            Handle representing stream sequence number/token.
            Consumer may subsribe to the stream while specifying the start of the subsription sequence token.
            That means that the stream infarstructure will deliver stream events starting from this sequence token.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionHandle`1">
            <summary>
            Handle representing this subsription.
            Consumer may serialize and store the handle in order to unsubsribe later, for example
            in another activation on this grain.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandle`1.HandleId">
            <summary>
            Unique identifier for this StreamSubscriptionHandle
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.UnsubscribeAsync">
            <summary>
            Unsubscribe a stream consumer from this observable.
            </summary>
            <returns>A promise to unsubscription action.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.ResumeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumed consumption from a subscription to a stream.
            </summary>
            <param name="observer">The Observer object.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise with an updates subscription handle.
            </returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="T:Orleans.Streams.GenericAsyncObserver`1">
            <summary>
            Class used by the IAsyncObservable extension methods to allow observation via delegate.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="handle">The subscription handle.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="T:Orleans.Streams.IStreamNamespacePredicate">
            <summary>
            Stream namespace predicate used for filtering implicit subscriptions using 
            <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>.
            </summary>
            <remarks>All implementations must be serializable.</remarks>
        </member>
        <member name="M:Orleans.Streams.IStreamNamespacePredicate.IsMatch(System.String)">
            <summary>
            Defines if the consumer grain should subscribe to the specified namespace.
            </summary>
            <param name="streamNamespace">The target stream namespace to check.</param>
            <returns><c>true</c>, if the grain should subscribe to the specified namespace; <c>false</c>, otherwise.
            </returns>
        </member>
        <member name="T:Orleans.Streams.RegexStreamNamespacePredicate">
            <summary>
            <see cref="T:Orleans.Streams.IStreamNamespacePredicate"/> implementation allowing to filter stream namespaces by regular
            expression.
            </summary>
        </member>
        <member name="M:Orleans.Streams.RegexStreamNamespacePredicate.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates an instance of <see cref="T:Orleans.Streams.RegexStreamNamespacePredicate"/> with the specified regular expression.
            </summary>
            <param name="regex">The stream namespace regular expression.</param>
        </member>
        <member name="M:Orleans.Streams.RegexStreamNamespacePredicate.IsMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.Name">
            <summary>Name of the stream provider.</summary>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.IsRewindable">
            <summary>
            Determines whether this is a rewindable provider - supports creating rewindable streams 
            (streams that allow subscribing from previous point in time).
            </summary>
            <returns>True if this is a rewindable provider, false otherwise.</returns>
        </member>
        <member name="T:Orleans.ImplicitStreamSubscriptionAttribute">
            <summary>
            The [Orleans.ImplicitStreamSubscription] attribute is used to mark grains as implicit stream subscriptions.
            </summary>
        </member>
        <member name="P:Orleans.ImplicitStreamSubscriptionAttribute.Predicate">
            <summary>
            Gets the stream namespace filter predicate.
            </summary>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor">
            <summary>
            Used to subscribe to all stream namespaces.
            </summary>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(System.String)">
            <summary>
            Used to subscribe to the specified stream namespace.
            </summary>
            <param name="streamNamespace">The stream namespace to subscribe.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(System.Type)">
            <summary>
            Allows to pass an arbitrary predicate type to filter stream namespaces to subscribe. The predicate type 
            must have a constructor without parameters.
            </summary>
            <param name="predicateType">The stream namespace predicate type.</param>
        </member>
        <member name="M:Orleans.ImplicitStreamSubscriptionAttribute.#ctor(Orleans.Streams.IStreamNamespacePredicate)">
            <summary>
            Allows to pass an instance of the stream namespace predicate. To be used mainly as an extensibility point
            via inheriting attributes.
            </summary>
            <param name="predicate">The stream namespace predicate.</param>
        </member>
        <member name="T:Orleans.RegexImplicitStreamSubscriptionAttribute">
            <summary>
            The [Orleans.RegexImplicitStreamSubscription] attribute is used to mark grains as implicit stream
            subscriptions by filtering stream namespaces to subscribe using a regular expression.
            </summary>
        </member>
        <member name="M:Orleans.RegexImplicitStreamSubscriptionAttribute.#ctor(System.String)">
            <summary>
            Allows to pass a regular expression to filter stream namespaces to subscribe to.
            </summary>
            <param name="pattern">The stream namespace regular expression filter.</param>
        </member>
        <member name="M:Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a new reminder or updates an existing one
            </summary>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            <param name="dueTime"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.ISystemTarget">
            <summary>
            This is a markup interface for system targets.
            System target are internal runtime objects that share some behaivior with grains, but also impose certain restrictions. In particular:
            System target are asynchronusly addressable actors.
            Proxy class is being generated for ISystemTarget, just like for IGrain
            System target are scheduled by the runtime scheduler and follow turn based concurrency.
            </summary> 
        </member>
        <member name="T:Orleans.ISystemTargetBase">
            <summary>
            Internal interface implemented by SystemTarget classes to expose the necessary internal info that allows this.AsReference to for for SystemTarget's same as it does for a grain class.
            </summary>
        </member>
        <member name="M:Orleans.IVersionManager.SetCompatibilityStrategy(Orleans.Versions.Compatibility.CompatibilityStrategy)">
            <summary>
            Set the compatibility strategy
            </summary>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetSelectorStrategy(Orleans.Versions.Selector.VersionSelectorStrategy)">
            <summary>
            Set the selector strategy
            </summary>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetCompatibilityStrategy(System.Int32,Orleans.Versions.Compatibility.CompatibilityStrategy)">
            <summary>
            Set the compatibility strategy for a specific interface
            </summary>
            <param name="interfaceId">The ID of the interface</param>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IVersionManager.SetSelectorStrategy(System.Int32,Orleans.Versions.Selector.VersionSelectorStrategy)">
            <summary>
            Set the selector strategy for a specific interface
            </summary>
            <param name="interfaceId">The ID of the interface</param>
            <param name="strategy">The strategy to set. Set to null to revert to the default strategy provided in configuration</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.IRemindable">
            <summary>
            Callback interface that grains must implement inorder to be able to register and receive Reminders.
            </summary>
        </member>
        <member name="M:Orleans.IRemindable.ReceiveReminder(System.String,Orleans.Runtime.TickStatus)">
            <summary>
            Receive a new Reminder.
            </summary>
            <param name="reminderName">Name of this Reminder</param>
            <param name="status">Status of this Reminder tick</param>
            <returns>Completion promise which the grain will resolve when it has finished processing this Reminder tick.</returns>
        </member>
        <member name="T:Orleans.TransactionAttribute">
            <summary>
            The TransactionAttribute attribute is used to mark methods that start and join transactions.
            </summary>
        </member>
    </members>
</doc>
