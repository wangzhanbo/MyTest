<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Core</name>
    </assembly>
    <members>
        <member name="T:Orleans.ApplicationParts.ApplicationPartManager">
            <summary>
            Manages the parts and features of an Orleans application.
            </summary>
        </member>
        <member name="P:Orleans.ApplicationParts.ApplicationPartManager.FeatureProviders">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ApplicationParts.ApplicationPartManager.ApplicationParts">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.ApplicationPartManager.AddApplicationPart(Orleans.ApplicationParts.IApplicationPart)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.ApplicationPartManager.AddFeatureProvider(Orleans.ApplicationParts.IApplicationFeatureProvider)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.ApplicationPartManager.PopulateFeature``1(``0)">
            <summary>
            Populates the given <paramref name="feature"/> using the list of
            <see cref="T:Orleans.ApplicationParts.IApplicationFeatureProvider`1"/>s configured on the
            <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/>.
            </summary>
            <typeparam name="TFeature">The type of the feature.</typeparam>
            <param name="feature">The feature instance to populate.</param>
        </member>
        <member name="T:Orleans.ApplicationParts.AssemblyAttributeFeatureProvider`1">
            <summary>
            Populates a feature using assembly-level attributes which implement <see cref="T:Orleans.Metadata.IFeaturePopulator`1"/>.
            </summary>
            <typeparam name="TFeature">The feature type.</typeparam>
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyAttributeFeatureProvider`1.Equals(Orleans.ApplicationParts.AssemblyAttributeFeatureProvider{`0})">
            <summary>
            Returns <see langword="true"/> if this instance is equivalent to the provided instance, <see langword="false"/> otherwise.
            </summary>
            <param name="other">The other instance.</param>
            <returns>
            <see langword="true"/> if this instance is equivalent to the provided instance, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyAttributeFeatureProvider`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyAttributeFeatureProvider`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyAttributeFeatureProvider`1.PopulateFeature(System.Collections.Generic.IEnumerable{Orleans.ApplicationParts.IApplicationPart},`0)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.ApplicationParts.AssemblyPart">
            <summary>
            An <see cref="T:Orleans.ApplicationParts.IApplicationPart"/> backed by an <see cref="P:Orleans.ApplicationParts.AssemblyPart.Assembly"/>.
            </summary>
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyPart.#ctor(System.Reflection.Assembly)">
            <summary>
            Initalizes a new <see cref="T:Orleans.ApplicationParts.AssemblyPart"/> instance.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:Orleans.ApplicationParts.AssemblyPart.IsFrameworkAssembly">
            <summary>
            Gets or sets a value indicating whether or not this assembly is an Orleans framework assembly.
            </summary>
        </member>
        <member name="P:Orleans.ApplicationParts.AssemblyPart.Assembly">
            <summary>
            Gets the <see cref="P:Orleans.ApplicationParts.AssemblyPart.Assembly"/> of the <see cref="T:Orleans.ApplicationParts.IApplicationPart"/>.
            </summary>
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyPart.Equals(Orleans.ApplicationParts.AssemblyPart)">
            <summary>
            Returns <see langword="true"/> if this instance is equivalent to the provided instance, <see langword="false"/> otherwise.
            </summary>
            <param name="other">The other instance/</param>
            <returns>
            <see langword="true"/> if this instance is equivalent to the provided instance, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyPart.Equals(Orleans.ApplicationParts.IApplicationPart)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyPart.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ApplicationParts.AssemblyPart.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Orleans.ApplicationParts.IApplicationFeatureProvider">
            <summary>
            Marker interface for <see cref="T:Orleans.ApplicationParts.IApplicationFeatureProvider"/>
            implementations.
            </summary>
        </member>
        <member name="T:Orleans.ApplicationParts.IApplicationFeatureProvider`1">
            <summary>
            A provider for a given <typeparamref name="TFeature"/> feature.
            </summary>
            <typeparam name="TFeature">The type of the feature.</typeparam>
        </member>
        <member name="M:Orleans.ApplicationParts.IApplicationFeatureProvider`1.PopulateFeature(System.Collections.Generic.IEnumerable{Orleans.ApplicationParts.IApplicationPart},`0)">
            <summary>
            Updates the <paramref name="feature"/> instance.
            </summary>
            <param name="parts">The list of <see cref="T:Orleans.ApplicationParts.IApplicationPart"/>s of the
            application.
            </param>
            <param name="feature">The feature instance to populate.</param>
        </member>
        <member name="T:Orleans.ApplicationParts.IApplicationPart">
            <summary>
            A part of an Orleans application.
            </summary>
        </member>
        <member name="T:Orleans.ApplicationParts.IApplicationPartManager">
            <summary>
            Builder for configuring application parts.
            </summary>
        </member>
        <member name="P:Orleans.ApplicationParts.IApplicationPartManager.FeatureProviders">
            <summary>
            Gets the list of <see cref="T:Orleans.ApplicationParts.IApplicationFeatureProvider"/>s.
            </summary>
        </member>
        <member name="P:Orleans.ApplicationParts.IApplicationPartManager.ApplicationParts">
            <summary>
            Gets the list of <see cref="T:Orleans.ApplicationParts.IApplicationPart"/>s.
            </summary>
        </member>
        <member name="M:Orleans.ApplicationParts.IApplicationPartManager.AddApplicationPart(Orleans.ApplicationParts.IApplicationPart)">
            <summary>
            Adds an application part.
            </summary>
            <param name="part">The application part.</param>
        </member>
        <member name="M:Orleans.ApplicationParts.IApplicationPartManager.AddFeatureProvider(Orleans.ApplicationParts.IApplicationFeatureProvider)">
            <summary>
            Adds a feature provider.
            </summary>
            <param name="featureProvider">The feature provider.</param>
        </member>
        <member name="M:Orleans.ApplicationParts.IApplicationPartManager.PopulateFeature``1(``0)">
            <summary>
            Populates the given <paramref name="feature"/> using the list of
            <see cref="T:Orleans.ApplicationParts.IApplicationFeatureProvider`1"/>s configured on the
            <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/>.
            </summary>
            <typeparam name="TFeature">The type of the feature.</typeparam>
            <param name="feature">The feature instance to populate.</param>
        </member>
        <member name="T:Orleans.ApplicationParts.IApplicationPartManagerWithAssemblies">
            <summary>
            Represents an <see cref="T:Orleans.ApplicationParts.IApplicationPartManager"/> scoped to a set of included assembly parts.
            </summary>
        </member>
        <member name="P:Orleans.ApplicationParts.IApplicationPartManagerWithAssemblies.Assemblies">
            <summary>
            Gets the assemblies which in the scope of this instance.
            </summary>
        </member>
        <member name="T:Orleans.ApplicationPartManagerExtensions">
            <summary>
            Extensions for working with <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/>.
            </summary>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.GetApplicationPartManager(Orleans.Hosting.HostBuilderContext)">
            <summary>
            Returns the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for the provided context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> belonging to the provided context.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.ConfigureDefaults(Orleans.ApplicationParts.IApplicationPartManager)">
            <summary>
            Adds default application parts if no non-framework parts have been added.
            </summary>
            <param name="applicationPartsManager">The application part manager.</param>
            <returns>The application part manager.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.CreateAndPopulateFeature``1(Orleans.ApplicationParts.IApplicationPartManager)">
            <summary>
            Creates and populates a feature.
            </summary>
            <typeparam name="TFeature">The feature.</typeparam>
            <param name="applicationPartManager">The application part manager.</param>
            <returns>The populated feature.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.AddFrameworkPart(Orleans.ApplicationParts.IApplicationPartManager,System.Reflection.Assembly)">
            <summary>
            Adds the provided assembly to the builder as a framework assembly.
            </summary>
            <param name="manager">The builder.</param>
            <param name="assembly">The assembly.</param>
            <returns>The builder with the additionally added assembly.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.AddApplicationPart(Orleans.ApplicationParts.IApplicationPartManager,System.Reflection.Assembly)">
            <summary>
            Adds the provided assembly to the builder.
            </summary>
            <param name="manager">The builder.</param>
            <param name="assembly">The assembly.</param>
            <returns>The builder with the additionally added assembly.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.AddFromApplicationBaseDirectory(Orleans.ApplicationParts.IApplicationPartManager)">
            <summary>
            Adds assemblies from the current <see cref="P:System.AppDomain.BaseDirectory"/> to the builder.
            </summary>
            <param name="manager">The builder.</param>
            <returns>The builder with the additionally added assemblies.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.AddFromAppDomain(Orleans.ApplicationParts.IApplicationPartManager)">
            <summary>
            Adds assemblies from the current <see cref="T:System.AppDomain"/> to the builder.
            </summary>
            <param name="manager">The builder.</param>
            <returns>The builder with the added assemblies.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.WithReferences(Orleans.ApplicationParts.IApplicationPartManagerWithAssemblies)">
            <summary>
            Adds all assemblies referenced by the assemblies in the builder's <see cref="P:Orleans.ApplicationParts.IApplicationPartManagerWithAssemblies.Assemblies"/> property.
            </summary>
            <param name="manager">The builder.</param>
            <returns>The builder with the additionally included assemblies.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.AddFromDependencyContext(Orleans.ApplicationParts.IApplicationPartManager)">
            <summary>
            Adds all assemblies referencing Orleans found in the application's <see cref="T:Microsoft.Extensions.DependencyModel.DependencyContext"/>.
            </summary>
            <param name="manager">The builder.</param>
            <returns>The builder with the additionally included assemblies.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.AddFromDependencyContext(Orleans.ApplicationParts.IApplicationPartManager,System.Reflection.Assembly)">
            <summary>
            Adds all assemblies referencing Orleans found in the provided assembly's <see cref="T:Microsoft.Extensions.DependencyModel.DependencyContext"/>.
            </summary>
            <param name="manager">The builder.</param>
            <param name="entryAssembly">Assembly to start looking for application parts from.</param>
            <returns>The builder with the additionally included assemblies.</returns>
        </member>
        <member name="M:Orleans.ApplicationPartManagerExtensions.GetApplicationPartManager(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Returns the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for the provided properties.
            </summary>
            <param name="properties">The properties.</param>
            <returns>The <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> belonging to the provided properties.</returns>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoader.LoadAssemblies(System.Collections.Generic.Dictionary{System.String,System.IO.SearchOption},System.Collections.Generic.IEnumerable{Orleans.Runtime.AssemblyLoaderPathNameCriterion},System.Collections.Generic.IEnumerable{Orleans.Runtime.AssemblyLoaderReflectionCriterion},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Loads assemblies according to caller-defined criteria.
            </summary>
            <param name="dirEnumArgs">A list of arguments that are passed to Directory.EnumerateFiles(). 
                The sum of the DLLs found from these searches is used as a base set of assemblies for
                criteria to evaluate.</param>
            <param name="pathNameCriteria">A list of criteria that are used to disqualify
                assemblies from being loaded based on path name alone (e.g.
                AssemblyLoaderCriteria.ExcludeFileNames) </param>
            <param name="reflectionCriteria">A list of criteria that are used to identify
                assemblies to be loaded based on examination of their ReflectionOnly type
                information (e.g. AssemblyLoaderCriteria.LoadTypesAssignableFrom).</param>
            <param name="logger">A logger to provide feedback to.</param>
            <returns>List of discovered assemblies</returns>
        </member>
        <member name="T:Orleans.Runtime.AssemblyLoaderCriterion">
            <summary>
            A subsystem interested in loading additional assemblies passes an instance
            of AssemblyLoadCriterion to AssemblyLoader.QualifySearch to ensure that
            assemblies that meet a given criterion are loaded into memory.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.AssemblyLoaderCriterion.Predicate">
            <summary>
            An AssemblyLoadCriterion wraps a delegate where the predicate logic is implemented.
            </summary>
            <param name="complaints">If the candidate is not interesting to the subsystem that
            registered the criterion, the predicate must supply a complaint-- i.e. a message
            describing why the assembly wasn't interesting to the subsystem.</param>
            <param name="input">This either an absolute path name in the case of exclusion
            criteria, or an Assembly object in the case of load criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderCriterion.EvaluateCandidate(System.Object,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            AssemblyLoader invokes this wrapper for predicate when it needs to know whether an
            assembly is interesting to a subsystem that registered a criterion.
            </summary>
            <param name="complaints">The complaint, if the return value is *false*</param>
            <param name="input">The argument.</param>
            <returns>If T is a string, *false* indicates that the path name should be excluded from loading.
            If T is an assembly object, *true* indicates that the assembly should be loaded.</returns>
            <exception cref="T:System.InvalidOperationException">
            The predicate must provide a substantive complaint string if it returns *false*.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.AssemblyPredicate)">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="assemblyPredicate">A predicate which accepts an assembly an an argument. If this predicate returns true, the assembly will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate must provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.TypePredicate,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="typePredicate">A predicate which accepts a reflection-only type as an argument. If this predicate returns true, the assembly that provides the specified type will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate may provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <param name="defaultComplaints">If no predicate provides a complaint, then these default complaints are logged instead.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.TypePredicate,System.String)">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="typePredicate">A predicate which accepts a reflection-only type as an argument. If this predicate returns true, the assembly that provides the specified type will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate may provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <param name="defaultComplaint">If no predicate provides a complaint, then this default complaint is logged instead.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>        
        </member>
        <member name="M:Orleans.Runtime.CachedReflectionOnlyTypeResolver.TryPerformUncachedTypeResolution(System.String,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.CachedTypeResolver.ResolveType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.CachedTypeResolver.TryResolveType(System.String,System.Type@)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Runtime.ITypeResolver">
            <summary>
            Provides methods for resolving a <see cref="T:System.Type"/> from a string.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ITypeResolver.ResolveType(System.String)">
            <summary>
            Returns the <see cref="T:System.Type"/> corresponding to the provided <paramref name="name"/>, throwing an exception if resolution fails.
            </summary>
            <param name="name">The type name.</param>
            <returns>The <see cref="T:System.Type"/> corresponding to the provided <paramref name="name"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.ITypeResolver.TryResolveType(System.String,System.Type@)">
            <summary>
            Resolves the <see cref="T:System.Type"/> corresponding to the provided <paramref name="name" />, returning true if resolution succeeded and false otherwise.
            </summary>
            <param name="name">The type name.</param>
            <param name="type">The resolved type.</param>
            <returns>true if resolution succeeded and false otherwise.</returns>
        </member>
        <member name="T:Orleans.Runtime.TypeMetadataCache">
            <summary>
            Cache of type metadata.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeMetadataCache.grainToInvokerMapping">
            <summary>
            The mapping between grain types and the corresponding type for the <see cref="T:Orleans.CodeGeneration.IGrainMethodInvoker"/> implementation.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeMetadataCache.grainToReferenceMapping">
            <summary>
            The mapping between grain types and the corresponding type for the <see cref="T:Orleans.Runtime.GrainReference"/> implementation.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IPipeline">
            <summary>
            A utility interface that allows to control the rate of generation of asynchronous activities.
            </summary>
            <seealso cref="T:Orleans.Runtime.AsyncPipeline"/>   
        </member>
        <member name="M:Orleans.Runtime.IPipeline.Add(System.Threading.Tasks.Task)">
            <summary>Adds a new task to the pipeline</summary>
            <param name="task">The task to add</param>
        </member>
        <member name="M:Orleans.Runtime.IPipeline.Wait">
            <summary>Waits until all currently queued asynchronous operations are done. Blocks the calling thread.</summary>
        </member>
        <member name="P:Orleans.Runtime.IPipeline.Count">
            <summary>The number of items currently enqueued into this pipeline.</summary>
        </member>
        <member name="T:Orleans.Runtime.AsyncPipeline">
            <summary>
            A helper utility class that allows to control the rate of generation of asynchronous activities.
            Maintains a pipeline of asynchronous operations up to a given maximal capacity and blocks the calling thread if the pipeline 
            gets too deep before enqueued operations are not finished.
            Effectively adds a back-pressure to the caller.
            This is mainly usefull for stress-testing grains under controlled load and should never be used from within a grain code! 
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AsyncPipeline.DEFAULT_CAPACITY">
            <summary>
            The Default Capacity of this AsyncPipeline. Equals to 10.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.AsyncPipeline.Capacity">
            <summary>
            The maximal number of async in-flight operations that can be enqueued into this async pipeline.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.AsyncPipeline.Count">
            <summary>
            The number of items currently enqueued into this async pipeline.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.#ctor">
            <summary>
            Constructs an empty AsyncPipeline with capacity equal to the DefaultCapacity.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.#ctor(System.Int32)">
            <summary>
            Constructs an empty AsyncPipeline with a given capacity.
            </summary>
            <param name="capacity">The maximal capacity of this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.Add(System.Threading.Tasks.Task)">
            <summary>
            Adds a new task to this AsyncPipeline.
            </summary>
            <param name="task">A task to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.AddRange(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Adds a collection of tasks to this AsyncPipeline.
            </summary>
            <param name="tasks">A collection of tasks to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.AddRange``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Adds a collection of tasks to this AsyncPipeline.
            </summary>
            <param name="tasks">A collection of tasks to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.Wait">
            <summary>
            Waits until all currently queued asynchronous operations are done.
            Blocks the calling thread.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TypeFormattingOptions">
            <summary>
            Options for formatting type names.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Char,System.Boolean)">
            <summary>Initializes a new instance of <see cref="T:Orleans.Runtime.TypeFormattingOptions"/>.</summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeNamespace">
            <summary>
            Gets a value indicating whether or not to include the fully-qualified namespace of the class in the result.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeTypeParameters">
            <summary>
            Gets a value indicating whether or not to include concrete type parameters in the result.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeGenericTypeParameters">
            <summary>
            Gets a value indicating whether or not to include generic type parameters in the result.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.NestedTypeSeparator">
            <summary>
            Gets the separator used between declaring types and their declared types.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.NameSuffix">
            <summary>
            Gets the name to append to the formatted name, before any type parameters.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TypeFormattingOptions.IncludeGlobal">
            <summary>
            Gets a value indicating whether or not to include the global namespace qualifier.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.Equals(Orleans.Runtime.TypeFormattingOptions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the specified object  is equal to the current object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified object  is equal to the current object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.op_Equality(Orleans.Runtime.TypeFormattingOptions,Orleans.Runtime.TypeFormattingOptions)">
            <summary>Determines whether the specified objects are equal.</summary>
        </member>
        <member name="M:Orleans.Runtime.TypeFormattingOptions.op_Inequality(Orleans.Runtime.TypeFormattingOptions,Orleans.Runtime.TypeFormattingOptions)">
            <summary>Determines whether the specified objects are not equal.</summary>
        </member>
        <member name="T:Orleans.Runtime.TypeUtils">
            <summary>
            A collection of utility functions for dealing with Type information.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeUtils.OrleansCoreAssembly">
            <summary>
            The assembly name of the core Orleans assembly.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TypeUtils.OrleansAbstractionsAssembly">
            <summary>
            The assembly name of the core Orleans abstractions assembly.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetAllFields(System.Type)">
            <summary>
            Returns all fields of the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>All fields of the specified type.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsNotSerialized(System.Reflection.FieldInfo)">
            <summary>
            Returns <see langword="true"/> if <paramref name="field"/> is marked as
            <see cref="F:System.Reflection.FieldAttributes.NotSerialized"/>, <see langword="false"/> otherwise.
            </summary>
            <param name="field">The field.</param>
            <returns>
            <see langword="true"/> if <paramref name="field"/> is marked as
            <see cref="F:System.Reflection.FieldAttributes.NotSerialized"/>, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsGrainClass(System.Type)">
            <summary>
            decide whether the class is derived from Grain
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsInNamespace(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            Returns true if the provided <paramref name="type"/> is in any of the provided
            <paramref name="namespaces"/>, false otherwise.
            </summary>
            <param name="type">The type to check.</param>
            <param name="namespaces"></param>
            <returns>
            true if the provided <paramref name="type"/> is in any of the provided <paramref name="namespaces"/>, false
            otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.HasAllSerializationMethods(System.Type)">
            <summary>
            Returns true if <paramref name="type"/> has implementations of all serialization methods, false otherwise.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if <paramref name="type"/> has implementations of all serialization methods, false otherwise.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsGrainMethod(System.Reflection.MethodInfo)">
            <summary>
            Returns a value indicating whether or not the provided <paramref name="methodInfo"/> is a grain method.
            </summary>
            <param name="methodInfo">The method.</param>
            <returns>A value indicating whether or not the provided <paramref name="methodInfo"/> is a grain method.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetSuitableClassName(System.Type)">
            <summary>
            Returns a sanitized version of <paramref name="type"/>s name which is suitable for use as a class name.
            </summary>
            <param name="type">
            The grain type.
            </param>
            <returns>
            A sanitized version of <paramref name="type"/>s name which is suitable for use as a class name.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetClassNameFromInterfaceName(System.String)">
            <summary>
            Returns a class-like version of <paramref name="interfaceName"/>.
            </summary>
            <param name="interfaceName">
            The interface name.
            </param>
            <returns>
            A class-like version of <paramref name="interfaceName"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetUnadornedTypeName(System.Type)">
            <summary>
            Returns the non-generic type name without any special characters.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The non-generic type name without any special characters.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetUnadornedMethodName(System.Reflection.MethodInfo)">
            <summary>
            Returns the non-generic method name without any special characters.
            </summary>
            <param name="method">
            The method.
            </param>
            <returns>
            The non-generic method name without any special characters.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetLogFormat(System.Type)">
            <summary>Returns a string representation of <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <returns>A string representation of the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetParseableName(System.Type,Orleans.Runtime.TypeFormattingOptions,System.Func{System.Type,System.String})">
            <summary>Returns a string representation of <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="options">The type formatting options.</param>
            <param name="getNameFunc">The delegate used to get the unadorned, simple type name of <paramref name="type"/>.</param>
            <returns>A string representation of the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetParseableName(System.Type,System.Text.StringBuilder,System.Collections.Generic.Queue{System.Type},Orleans.Runtime.TypeFormattingOptions,System.Func{System.Type,System.String})">
            <summary>Returns a string representation of <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append results to.</param>
            <param name="typeArguments">The type arguments of <paramref name="type"/>.</param>
            <param name="options">The type formatting options.</param>
            <param name="getNameFunc">Delegate that returns name for a type.</param>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetNamespaces(System.Type[])">
            <summary>
            Returns the namespaces of the specified types.
            </summary>
            <param name="types">
            The types to include.
            </param>
            <returns>
            The namespaces of the specified types.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">
            The containing type of the method.
            </typeparam>
            <typeparam name="TResult">
            The return type of the method.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">
            The containing type of the property.
            </typeparam>
            <typeparam name="TResult">
            The return type of the property.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="TResult">
            The return type of the property.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the simple member access call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Member``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo"/> for the simple member access in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">
            The containing type of the method.
            </typeparam>
            <typeparam name="TResult">
            The return type of the method.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> for the simple member access call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Member``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Returns the <see cref="T:System.Reflection.MemberInfo"/> for the simple member access in the provided <paramref name="expression"/>.</summary>
            <typeparam name="TResult">The return type of the method.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> for the simple member access call in the provided <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.</summary>
            <typeparam name="T">The containing type of the method.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </summary>
            <typeparam name="T">The containing type of the method.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.Method(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> for the simple method call in the provided <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetNamespaceOrEmpty(System.Type)">
            <summary>Returns the namespace of the provided type, or <see cref="F:System.String.Empty"/> if the type has no namespace.</summary>
            <param name="type">The type.</param>
            <returns>The namespace of the provided type, or <see cref="F:System.String.Empty"/> if the type has no namespace.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetTypes(System.Type,System.Boolean)">
            <summary>Returns the types referenced by the provided <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="includeMethods">Whether or not to include the types referenced in the methods of this type.</param>
            <returns>The types referenced by the provided <paramref name="type"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetConstructorThatMatches(System.Type,System.Type[])">
            <summary>
            Get a public or non-public constructor that matches the constructor arguments signature
            </summary>
            <param name="type">The type to use.</param>
            <param name="constructorArguments">The constructor argument types to match for the signature.</param>
            <returns>A constructor that matches the signature or <see langword="null"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsOrleansOrReferencesOrleans(System.Reflection.Assembly)">
            <summary>
            Returns a value indicating whether or not the provided assembly is the Orleans assembly or references it.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A value indicating whether or not the provided assembly is the Orleans assembly or references it.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.DoReferencesContain(System.Collections.Generic.IReadOnlyCollection{System.Reflection.AssemblyName},System.Reflection.AssemblyName)">
            <summary>
            Returns a value indicating whether or not the specified references contain the provided assembly name.
            </summary>
            <param name="references">The references.</param>
            <param name="assemblyName">The assembly name.</param>
            <returns>A value indicating whether or not the specified references contain the provided assembly name.</returns>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.GetTypes(System.Type,System.Boolean,System.Collections.Generic.HashSet{System.Type})">
            <summary>Returns the types referenced by the provided <paramref name="type"/>.</summary>
            <param name="type">The type.</param>
            <param name="includeMethods">Whether or not to include the types referenced in the methods of this type.</param>
            <param name="exclude">Types to exclude</param>
            <returns>The types referenced by the provided <paramref name="type"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ConfigUtilities">
            <summary>
            Utilities class for handling configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.GetLocalIPAddress(System.Net.Sockets.AddressFamily,System.String)">
            <summary>
            Gets the address of the local server.
            If there are multiple addresses in the correct family in the server's DNS record, the first will be returned.
            </summary>
            <returns>The server's IPv4 address.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RedactConnectionStringInfo(System.String)">
            <summary>
            Prints the the DataConnectionString,
            without disclosing any credential info
            such as the Azure Storage AccountKey, SqlServer password or AWS SecretKey.
            </summary>
            <param name="connectionString">The connection string to print.</param>
            <returns>The string representation of the DataConnectionString with account credential info redacted.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RuntimeVersionInfo">
            <summary>
            Returns the Runtime Version information.
            </summary>
            <returns>the Runtime Version information</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.StatisticsLevel">
            <summary>
            The level of runtime statistics to collect and report periodically.
            The default level is Info.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.IStatisticsConfiguration">
            <summary>
            Statistics Configuration that are common to client and silo.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitManager">
            <summary>
            Limits Manager
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitNames">
            <summary>
            Class containing key names for the configurable LimitValues used by Orleans runtime.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitValue">
            <summary>
            Data class encapsulating details of a particular system limit.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.Name">
            <summary>
            Name of this Limit value
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.SoftLimitThreshold">
            <summary>
            'Soft" limit threshold value for this Limit, after which Warnings will start to be generated
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.HardLimitThreshold">
            <summary>
            'Hard' limit threshold value, after which Errors will start to be generated and action take (for example, rejecting new request messages, etc) 
            to actively reduce the limit value back to within thresholds.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.IMessagingConfiguration">
            <summary>
            Specifies global messaging configuration that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.OpenConnectionTimeout">
            <summary>
            The OpenConnectionTimeout attribute specifies the timeout before a connection open is assumed to have failed
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ResponseTimeout">
            <summary>
            The ResponseTimeout attribute specifies the default timeout before a request is assumed to have failed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxResendCount">
            <summary>
            The MaxResendCount attribute specifies the maximal number of resends of the same message.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ResendOnTimeout">
            <summary>
            The ResendOnTimeout attribute specifies whether the message should be automaticaly resend by the runtime when it times out on the sender.
            Default is false.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxSocketAge">
            <summary>
            The MaxSocketAge attribute specifies how long to keep an open socket before it is closed.
            Default is TimeSpan.MaxValue (never close sockets automatically, unles they were broken).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.DropExpiredMessages">
            <summary>
            The DropExpiredMessages attribute specifies whether the message should be dropped if it has expired, that is if it was not delivered 
            to the destination before it has timed out on the sender.
            Default is true.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.SiloSenderQueues">
            <summary>
            The SiloSenderQueues attribute specifies the number of parallel queues and attendant threads used by the silo to send outbound
            messages (requests, responses, and notifications) to other silos.
            If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.GatewaySenderQueues">
            <summary>
            The GatewaySenderQueues attribute specifies the number of parallel queues and attendant threads used by the silo Gateway to send outbound
             messages (requests, responses, and notifications) to clients that are connected to it.
             If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ClientSenderBuckets">
            <summary>
             The ClientSenderBuckets attribute specifies the total number of grain buckets used by the client in client-to-gateway communication
             protocol. In this protocol, grains are mapped to buckets and buckets are mapped to gateway connections, in order to enable stickiness
             of grain to gateway (messages to the same grain go to the same gateway, while evenly spreading grains across gateways).
             This number should be about 10 to 100 times larger than the expected number of gateway connections.
             If this attribute is not specified, then Math.Pow(2, 13) is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ClientDropTimeout">
            <summary>
             This is the period of time a gateway will wait before dropping a disconnected client.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolBufferSize">
            <summary>
            The size of a buffer in the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolMaxSize">
            <summary>
            The maximum size of the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolPreallocationSize">
            <summary>
            The initial size of the messaging buffer pool that is pre-allocated.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.SerializationProviders">
            <summary>
            The list of serialization providers
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.FallbackSerializationProvider">
            <summary>
            Gets the fallback serializer, used as a last resort when no other serializer is able to serialize an object.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.MessagingConfiguration">
            <summary>
            Messaging configuration that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.MessagingConfiguration.MaxForwardCount">
            <summary>
            The MaxForwardCount attribute specifies the maximal number of times a message is being forwared from one silo to another.
            Forwarding is used internally by the tuntime as a recovery mechanism when silos fail and the membership is unstable.
            In such times the messages might not be routed correctly to destination, and runtime attempts to forward such messages a number of times before rejecting them.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ProviderConfiguration">
            <summary>
            Configuration for a particular provider instance.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ProviderConfiguration.Properties">
            <summary>
            Properties of this provider.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ProviderCategoryConfiguration">
            <summary>
            Provider categoty configuration.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.TelemetryConfiguration.ConsumerConfiguration.Properties">
            <summary>
            Configuration properties for this provider instance, as name-value pairs.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.InvalidSchedulingContextException">
            <summary>
            Signifies that an operation was attempted on an invalid SchedulingContext.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LifecycleParticipantExtensions.ParticipateIn``1(Orleans.ILifecycleParticipant{Orleans.ILifecycleObservable})">
            <summary>
            Conforms components written to participate with any ILifecycleObservable to take part in specific lifecycles
            </summary>
            <typeparam name="TLifecycle"></typeparam>
            <param name="participant"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.CrashUtils">
            <summary>
            Manages log sinks
            </summary>
        </member>
        <member name="T:Orleans.Runtime.OrleansLoggerExtension">
            <summary>
            Extension methods which preserves legacy orleans log methods style
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Debug severity level.
            </summary>
            <param name="logger">The logger</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Writes a log entry at the Verbose severity level.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Trace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Trace logLevel.
            </summary>
            <param name="logger">The logger</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Trace(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Writes a log entry at the Verbose2 severity level.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Info(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Information Level
            </summary>
            <param name="logger">Target logger.</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Info(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Writes a log entry at the Info logLevel 
            </summary>
            <param name="logger">Target logger.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Debug logLevel
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Debug logLevel
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Trace(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Trace logLevel
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Trace(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Trace logLevel
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Info(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Information logLevel
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Info(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String)">
            <summary>
            Writes a log entry at the Information logLevel
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Warn(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Warning level
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">Format string of the log message with named parameters
            <remarks>Not always suitable for <c>String.Format</c>. See Microsoft.Extensions.Logging MessageTemplate section for more information. Suggest to use their pattern over this extension method</remarks>
            </param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Warn(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Exception)">
            <summary>
            Writes a log entry at the Warning level
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The warning message to log.</param>
            <param name="exception">An exception related to the warning, if any.</param>
        </member>
        <member name="M:Orleans.Runtime.OrleansLoggerExtension.Error(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Exception)">
            <summary>
            Writes a log entry at the Error level
            </summary>
            <param name="logger">The logger</param>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The error message to log.</param>
            <param name="exception">An exception related to the error, if any.</param>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintDate(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable data format used by the Logger subsystem.
            </summary>
            <param name="date">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the Logger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintTime(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable time format used by the Logger subsystem.
            </summary>
            <param name="date">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the Logger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.LogFormatter.PrintException(System.Exception)">
            <summary>
            Utility function to convert an exception into printable format, including expanding and formatting any nested sub-expressions.
            </summary>
            <param name="exception">The exception to be printed.</param>
            <returns>Formatted string representation of the exception, including expanding and formatting any nested sub-expressions.</returns>
        </member>
        <member name="T:Orleans.Runtime.LoggingUtils">
            <summary>
            Logging Utility 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.BufferPool.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a buffer pool.
            </summary>
            <param name="bufferSize">The size, in bytes, of each buffer.</param>
            <param name="maxBuffers">The maximum number of buffers to keep around, unused; by default, the number of unused buffers is unbounded.</param>
            <param name="preallocationSize">Initial number of buffers to allocate.</param>
            <param name="name">Name of the buffer pool.</param>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.#ctor(Orleans.Runtime.BufferPool)">
            <summary>
            
            </summary>
            <param Name="size"></param>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Byte[])">
            <summary>
            Append a byte array to the byte array.
            Note that this assumes that the array passed in is now owned by the ByteArrayBuilder, and will not be modified.
            </summary>
            <param Name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(Orleans.Runtime.ByteArrayBuilder)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Append a list of byte array segments to the byte array.
            Note that this assumes that the data passed in is now owned by the ByteArrayBuilder, and will not be modified.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int16[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int64[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt16[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt64[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.SByte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Char[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Boolean[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Single[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Double[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IncomingMessageBuffer.AdjustBuffer">
            <summary>
            This call cleans up the buffer state to make it optimal for next read.
            The leading chunks, used by any processed messages, are removed from the front
              of the buffer and added to the back.   Decode and receiver offsets are adjusted accordingly.
            If the buffer was grown over the max sustained buffer size (to read a large message) it is shrunken.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Message.bodyBytes">
            <summary>
            NOTE: The contents of bodyBytes should never be modified
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.NewGrainType">
            <summary>
            Set by sender's placement logic when NewPlacementRequested is true
            so that receiver knows desired grain type
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.GenericGrainType">
            <summary>
            Set by caller's grain reference 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Message.SetBodyBytes(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Clears the current body and sets the serialized body contents to the provided value.
            </summary>
            <param name="body">The serialized body contents.</param>
        </member>
        <member name="M:Orleans.Runtime.Message.DeserializeBodyObject(Orleans.Serialization.SerializationManager,System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Deserializes the provided value into this instance's <see cref="P:Orleans.Runtime.Message.BodyObject"/>.
            </summary>
            <param name="serializationManager">The serialization manager.</param>
            <param name="body">The serialized body contents.</param>
        </member>
        <member name="M:Orleans.Runtime.Message.IsDuplicate(Orleans.Runtime.Message)">
            <summary>
            Tell whether two messages are duplicates of one another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.Message.HeadersContainer.NewGrainType">
            <summary>
            Set by sender's placement logic when NewPlacementRequested is true
            so that receiver knows desired grain type
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.HeadersContainer.GenericGrainType">
            <summary>
            Set by caller's grain reference 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SocketManager.GetAcceptingSocketForEndpoint(System.Net.IPEndPoint)">
            <summary>
            Creates a socket bound to an address for use accepting connections.
            This is for use by client gateways and other acceptors.
            </summary>
            <param name="address">The address to bind to.</param>
            <returns>The new socket, appropriately bound.</returns>
        </member>
        <member name="M:Orleans.Runtime.SocketManager.Connect(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.TimeSpan)">
            <summary>
            Connect the socket to the target endpoint
            </summary>
            <param name="s">The socket</param>
            <param name="endPoint">The target endpoint</param>
            <param name="connectionTimeout">The timeout value to use when opening the connection</param>
            <exception cref="T:System.TimeoutException">When the connection could not be established in time</exception>
        </member>
        <member name="T:Orleans.Runtime.Placement.IPlacementDirector">
            <summary>
            Interface for placement directors.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.PlacementResult.GrainType">
            <summary>
            Some storage providers need to know the grain type in order to read the state.
            The PlacementResult is generated based on the target grain type's policy, so the type
            is known and will be passed in the message NewGrainType header.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ITimebound">
            <summary>
            This interface is for use with the Orleans timers.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ITimebound.OnTimeout">
            <summary>
            This method is called by the timer when the time out is reached.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CallbackData.StartTimer(System.TimeSpan)">
            <summary>
            Start this callback timer
            </summary>
            <param name="time">Timeout time</param>
        </member>
        <member name="F:Orleans.Runtime.Constants.MinReminderPeriod">
            <summary>
            Minimum period for registering a reminder ... we want to enforce a lower bound
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Constants.RefreshReminderList">
            <summary>
            Refresh local reminder list to reflect the global reminder table every 'REFRESH_REMINDER_LIST' period
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainClassData">
            <summary>
            Metadata for a grain class
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceData">
            <summary>
            Metadata for a grain interface
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceMap">
            <summary>
            Internal data structure that holds a grain interfaces to grain classes map.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceCache`2">
            <summary>
            This class implements an LRU (Least-Recently Used) cache of grain references. It keeps a bounded set of values and will age-out "old" values 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCache`2.#ctor(System.Int32,System.TimeSpan,Orleans.Runtime.GrainReferenceCache{`0,`1}.FetchValueDelegate,Orleans.Runtime.GrainReferenceCache{`0,`1}.CastDelegate)">
            <summary>
            Creates a new LRU (Least-Recently Used) cache of GrainReferences.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
            <param name="f"> Delegate for fetching the value associated with a given key</param>
            <param name="c"> Delegate for casting IAddressable to TValue</param>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceCache`2.Count">
            <summary>
            Return the number of entries currently in the cache
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCache`2.Get(`0)">
            <summary>
            Get a grain reference for the specified cache-key.
            The grain reference will either be taken from cahce, or a new one will be created by calling the <c>FetchValueDelegate</c>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceRuntime.InvokeOneWayMethod(Orleans.Runtime.GrainReference,System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceRuntime.InvokeMethodAsync``1(Orleans.Runtime.GrainReference,System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceRuntime.SetGrainCancellationTokensTarget(System.Object[],Orleans.Runtime.GrainReference)">
            <summary>
            Sets target grain to the found instances of type GrainCancellationToken
            </summary>
            <param name="arguments"> Grain method arguments list</param>
            <param name="target"> Target grain reference</param>
        </member>
        <member name="T:Orleans.Runtime.IClientObserverRegistrar">
            <summary>
            Client gateway interface for forwarding client requests to silos.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.GetMyRange">
            <summary>
            Get the responsibility range of the current silo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.SubscribeToRangeChangeEvents(Orleans.Runtime.IAsyncRingRangeListener)">
            <summary>
            Subscribe to receive range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.UnSubscribeFromRangeChangeEvents(Orleans.Runtime.IAsyncRingRangeListener)">
            <summary>
            Unsubscribe from receiving range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="T:Orleans.Runtime.IGrainActivationContext">
            <summary>
            The context associated with the current grain activation.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.GrainType">
            <summary>Gets the .NET type of the grain activation instance.</summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.GrainIdentity">
            <summary>Gets the identity of the grain activation.</summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.ActivationServices">
            <summary>Gets the <see cref="T:System.IServiceProvider"/> that provides access to the grain activation's service container.</summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.GrainInstance">
            <summary>Gets the instance of the grain associated with this activation context. 
            The value will be <see langword="null"/> if the grain is being created.</summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.Items">
            <summary>Gets a key/value collection that can be used to share data within the scope of the grain activation.</summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.ObservableLifecycle">
            <summary>
            Observable Grain life cycle
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainActivationContext.RegistrationStrategy">
            <summary>
            Multi-cluster registration strategy for this grain activation.
            Used by protocols that coordinate multiple instances.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IGrainReferenceConverter.GetGrainFromKeyString(System.String)">
            <summary>
            Creates a grain reference from a storage key string.
            </summary>
            <param name="key">The key string.</param>
            <returns>The newly created grain reference.</returns>
        </member>
        <member name="T:Orleans.Runtime.ILocalSiloDetails">
            <summary>
            Details of the local silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.Name">
            <summary>
            Gets the name of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.ClusterId">
            <summary>
            Gets the cluster identity. This used to be called DeploymentId before Orleans 2.0 name.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.DnsHostName">
            <summary>
            The DNS host name of this silo.
            This is a true host name, no IP address. Equals Dns.GetHostName().
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.SiloAddress">
            <summary>
            Gets the address of this silo's inter-silo endpoint.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ILocalSiloDetails.GatewayAddress">
            <summary>
            Gets the address of this silo's gateway proxy endpoint.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IRuntimeClient">
            <summary>
            The IRuntimeClient interface defines a subset of the runtime API that is exposed to both silo and client.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.InternalGrainFactory">
            <summary>
            Grain Factory to get and cast grain references.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.CurrentActivationIdentity">
            <summary>
            A unique identifier for the current client.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.ClientInvokeCallback">
            <summary>
            Global pre-call interceptor function
            Synchronous callback made just before a message is about to be constructed and sent by a client to a grain.
            This call will be made from the same thread that constructs the message to be sent, so any thread-local settings
            such as <c>Orleans.RequestContext</c> will be picked up.
            The action receives an <see cref="T:Orleans.CodeGeneration.InvokeMethodRequest"/> with details of the method to be invoked, including InterfaceId and MethodId,
            and a <see cref="T:Orleans.IGrain"/> which is the GrainReference this request is being sent through
            </summary>
            <remarks>This callback method should return promptly and do a minimum of work, to avoid blocking calling thread or impacting throughput.</remarks>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.GetResponseTimeout">
            <summary>
            Get the current response timeout setting for this client.
            </summary>
            <returns>Response timeout value</returns>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.SetResponseTimeout(System.TimeSpan)">
            <summary>
            Sets the current response timeout setting for this client.
            </summary>
            <param name="timeout">New response timeout value</param>
        </member>
        <member name="T:Orleans.Runtime.IClusterTypeManager">
            <summary>
            Client gateway interface for obtaining the grain interface/type map.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IClusterTypeManager.GetClusterGrainTypeResolver">
            <summary>
            Acquires grain interface map for all grain types supported across the entire cluster
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ISiloTypeManager.GetSiloTypeCodeMap">
            <summary>
            Acquires grain interface map for all grain types supported by hosted silo.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.OutgoingCallInvoker">
            <summary>
            Invokes a request on a grain reference.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.OutgoingCallInvoker.#ctor(Orleans.Runtime.GrainReference,Orleans.CodeGeneration.InvokeMethodRequest,Orleans.CodeGeneration.InvokeMethodOptions,System.String,System.Func{Orleans.Runtime.GrainReference,Orleans.CodeGeneration.InvokeMethodRequest,System.String,Orleans.CodeGeneration.InvokeMethodOptions,System.Threading.Tasks.Task{System.Object}},Orleans.InterfaceToImplementationMappingCache,Orleans.IOutgoingGrainCallFilter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Runtime.OutgoingCallInvoker"/> class.
            </summary>
            <param name="grain">The grain reference.</param>
            <param name="request">The request.</param>
            <param name="options"></param>
            <param name="debugContext"></param>
            <param name="sendRequest"></param>
            <param name="filters">The invocation interceptors.</param>
            <param name="mapping">The implementation map.</param>
        </member>
        <member name="P:Orleans.Runtime.OutgoingCallInvoker.Grain">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.OutgoingCallInvoker.Method">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.OutgoingCallInvoker.InterfaceMethod">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.OutgoingCallInvoker.Arguments">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Runtime.OutgoingCallInvoker.Result">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.OutgoingCallInvoker.Invoke">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Runtime.IRingRange.InRange(System.UInt32)">
            <summary>
            Check if <paramref name="n"/> is our responsibility to serve
            </summary>
            <returns>true if the reminder is in our responsibility range, false otherwise</returns>
        </member>
        <member name="P:Orleans.Runtime.ISingleRange.Begin">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ISingleRange.End">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.Begin">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.End">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SingleRange.InRange(System.UInt32)">
            <summary>
            checks if n is element of (Begin, End], while remembering that the ranges are on a ring
            </summary>
            <param name="n"></param>
            <returns>true if n is in (Begin, End], false otherwise</returns>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.Current">
            <summary>
            The full version string of the Orleans runtime, eg: '2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.ApiVersion">
            <summary>
            The ApiVersion of the Orleans runtime, eg: '1.0.0.0'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.FileVersion">
            <summary>
            The FileVersion of the Orleans runtime, eg: '2012.5.9.51607'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.ProgramName">
            <summary>
            The program name string for the Orleans runtime, eg: 'OrleansHost'
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RuntimeVersion.ProgamIdent">
            <summary>
            Writes the Orleans program ident info to the Console, eg: 'OrleansHost v2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="M:Orleans.Runtime.RuntimeVersion.IsAssemblyDebugBuild(System.Reflection.Assembly)">
            <summary>
            Returns a value indicating whether the provided <paramref name="assembly"/> was built in debug mode.
            </summary>
            <param name="assembly">
            The assembly to check.
            </param>
            <returns>
            A value indicating whether the provided assembly was built in debug mode.
            </returns>
        </member>
        <member name="T:Orleans.Runtime.SiloStatus">
            <summary>
            Possible statuses of a silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Created">
            <summary>
            This silo was just created, but not started yet.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Joining">
            <summary>
            This silo has just started, but not ready yet. It is attempting to join the cluster.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Active">
            <summary>
            This silo is alive and functional.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.ShuttingDown">
            <summary>
            This silo is shutting itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Stopping">
            <summary>
            This silo is stopping itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Dead">
            <summary>
            This silo is de-activated/considered to be dead.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloStatusExtensions.IsTerminating(Orleans.Runtime.SiloStatus)">
            <summary>
            Return true if this silo is currently terminating: ShuttingDown, Stopping or Dead.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloStatusExtensions.IsUnavailable(Orleans.Runtime.SiloStatus)">
            <summary>
            Return true if silo is terminating or missing.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ThreadPerTaskScheduler">
            <summary>Provides a task scheduler that dedicates a thread per task.</summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadPerTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks currently scheduled to this scheduler.</summary>
            <remarks>This will always return an empty enumerable, as tasks are launched as soon as they're queued.</remarks>
        </member>
        <member name="M:Orleans.Runtime.ThreadPerTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Starts a new thread to process the provided task.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Orleans.Runtime.ThreadPerTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="T:Orleans.Runtime.ICounter">
            <summary>
            A detailed statistic counter. Usually a low level performance statistic used in troubleshooting scenarios.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICounter.Name">
            <summary>
            the name of the statistic counter
            </summary>
        </member>
        <member name="P:Orleans.Runtime.ICounter.IsValueDelta">
            <summary>
            if this the statistic counter value is delta since last value reported or an absolute value
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CounterStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.FloatValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.HistogramValueStatistic">
            <summary>
            Abstract class for histgram value statistics, instantiate either HistogramValueStatistic or LinearHistogramValueStatistic
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ExponentialHistogramValueStatistic">
            <summary>
            Histogram created where buckets grow exponentially
            </summary>
        </member>
        <member name="T:Orleans.Runtime.LinearHistogramValueStatistic">
            <summary>
            Histogram created where buckets are uniform size
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IntValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.SiloRuntimeStatistics">
            <summary>
            Snapshot of current runtime statistics for a silo
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ActivationCount">
            <summary>
            Total number of activations in a silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.RecentlyUsedActivationCount">
            <summary>
            Number of activations in a silo that have been recently used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.SendQueueLength">
            <summary>
            The size of the sending queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ReceiveQueueLength">
            <summary>
            The size of the receiving queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.CpuUsage">
            <summary>
            The CPU utilization.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.AvailableMemory">
            <summary>
            The amount of memory available in the silo [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.MemoryUsage">
            <summary>
            The used memory size.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.TotalPhysicalMemory">
            <summary>
            The total physical memory available [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.IsOverloaded">
            <summary>
            Is this silo overloaded.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ClientCount">
            <summary>
            The number of clients currently connected to that silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.DateTime">
            <summary>
            The DateTime when this statistics was created.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainStatistic">
            <summary>
            Snapshot of current statistics for a given grain type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.GrainType">
            <summary>
            The type of the grain for this GrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.GrainCount">
            <summary>
            Number of grains of a this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.ActivationCount">
            <summary>
            Number of activation of a agrain of this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.SiloCount">
            <summary>
            Number of silos that have activations of this grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainStatistic.ToString">
            <summary>
            Returns the string representatio of this GrainStatistic.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SimpleGrainStatistic">
            <summary>
            Simple snapshot of current statistics for a given grain type on a given silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.GrainType">
            <summary>
            The type of the grain for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.SiloAddress">
            <summary>
            The silo address for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.ActivationCount">
            <summary>
            The number of activations of this grain type on this given silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SimpleGrainStatistic.ToString">
            <summary>
            Returns the string representatio of this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.GrainType">
            <summary>
            The type of the grain for this DetailedGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.SiloAddress">
            <summary>
            The silo address for this DetailedGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.GrainIdentity">
            <summary>
            Unique Id for the grain.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainStatistic.Category">
            <summary>
            The grains Category
            </summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.SiloAddress">
            <summary>silo on which these statistics come from</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.SiloName">
            <summary>silo on which these statistics come from</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalCacheActivationAddresses">
            <summary>activation addresses in the local directory cache</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalDirectoryActivationAddresses">
            <summary>activation addresses in the local directory.</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.PrimaryForGrain">
            <summary>primary silo for this grain</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.GrainClassTypeName">
            <summary>the name of the class that implements this grain.</summary>
        </member>
        <member name="P:Orleans.Runtime.DetailedGrainReport.LocalActivations">
            <summary>activations on this silo</summary>
        </member>
        <member name="T:Orleans.Runtime.StageAnalysis">
            <summary>
            Stage analysis, one instance should exist in each Silo
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetTotalCPU">
            <summary>
            get all cpu used by all types of threads
            </summary>
            <returns> milliseconds of total cpu time </returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetMaxWallClock">
            <summary>
            gets total wallclock which is the wallclock of the stage with maximum wallclock time
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetNumberOfRequests(System.String)">
            <summary>
            get number of requests for a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>number of requests</returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetWallClockPerStagePerRequest(System.String)">
            <summary>
            get wall clock time for a request of a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>average milliseconds of wallclock time per request</returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetCpuPerStagePerRequest(System.String)">
            <summary>
            get cpu time for a request of a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>average milliseconds of cpu time per request</returns>
        </member>
        <member name="M:Orleans.Runtime.StringValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.TimeIntervalThreadCycleCounterBased">
            <summary>
            Stopwatch for CPU time of a thread.
            You must only use Start, Stop, and Restart from thread being measured!
            CANNOT call this class from a different thread that is not the currently executing thread.
            Otherwise, QueryThreadCycleTime returns undefined (garbage) results.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Elapsed">
            <summary>
            Obtain current time of stopwatch since last Stop method. You may call this from any thread.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create thread CPU timing object. You may call this from a thread outside the one you wish to measure.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Start">
            <summary>
            Start measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Restart">
            <summary>
            Restart measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Stop">
            <summary>
            Stop measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Keep track of thread statistics, mainly timing, can be created outside the thread to be tracked.
            </summary>
            <param name="threadName">Name used for logging the collected stastistics</param>
            <param name="loggerFactory">LoggerFactory used to create loggers</param>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStartExecution">
            <summary>
            Call once when the thread is started, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStopExecution">
            <summary>
            Call once when the thread is stopped, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStartProcessing">
            <summary>
            Call once before processing a request, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStopProcessing">
            <summary>
            Call once after processing multiple requests as a batch or a single request, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.IncrementNumberOfProcessed(System.Int32)">
            <summary>
            Call once to just increment the stastistic of processed requests
            </summary>
            <param name="num">Number of processed requests</param>
        </member>
        <member name="T:Orleans.Runtime.ICatalog">
            <summary>
            Remote interface to grain and activation state
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICatalog.DeleteActivations(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress})">
            <summary>
            Delete activations from this silo
            </summary>
            <param name="activationAddresses"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IManagementGrain">
            <summary>
            Interface for system management functions of silos, 
            exposed as a grain for receiving remote requests / commands.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and statuses currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned, 
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetDetailedHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and membership information currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned, 
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceGarbageCollection(Orleans.Runtime.SiloAddress[])">
            <summary>
            Perform a run of the .NET garbage collector in the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceActivationCollection(Orleans.Runtime.SiloAddress[],System.TimeSpan)">
            <summary>Perform a run of the Orleans activation collecter in the specified silos.</summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="ageLimit">Maximum idle time of activations to be collected.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceRuntimeStatisticsCollection(Orleans.Runtime.SiloAddress[])">
            <summary>Perform a run of the silo statistics collector in the specified silos.</summary>
            <param name="siloAddresses">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetRuntimeStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent silo runtime statistics information for the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent grain statistics information, amalgomated across silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics">
            <summary>
            Return the most recent grain statistics information, amalgomated across all silos.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetDetailedGrainStatistics(System.String[],Orleans.Runtime.SiloAddress[])">
            <summary>
            Returns the most recent detailed grain statistics information, amalgomated across silos for the specified types.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="types">Array of grain types to filter the results with</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetTotalActivationCount">
            <summary>
            Return the total count of all current grain activations across all silos.
            </summary>
            <returns>Completion promise for this operation.</returns>
            
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SendControlCommandToProvider(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Execute a control command on the specified providers on all silos in the cluster.
            Commands are sent to all known providers on each silo which match both the <c>providerTypeFullName</c> AND <c>providerName</c> parameters.
            </summary>
            <remarks>
            Providers must implement the <c>Orleans.Providers.IControllable</c> 
            interface in order to receive these control channel commands.
            </remarks>
            <param name="providerTypeFullName">Class full name for the provider type to send this command to.</param>
            <param name="providerName">Provider name to send this command to.</param>
            <param name="command">An id / serial number of this command. 
            This is an opaque value to the Orleans runtime - the control protocol semantics are decided between the sender and provider.</param>
            <param name="arg">An opaque command argument.
            This is an opaque value to the Orleans runtime - the control protocol semantics are decided between the sender and provider.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetActiveGrainTypes(Orleans.Runtime.SiloAddress[])">
            <summary>
            Returns an array of all the active grain types in the system
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetMultiClusterGateways">
            <summary>
            Get the current list of multicluster gateways.
            </summary>
            <returns>A list of the currently known gateways</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetMultiClusterConfiguration">
            <summary>
            Get the current multicluster configuration.
            </summary>
            <returns>The current multicluster configuration, or null if there is none</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.FindLaggingSilos">
            <summary>
            Contact all silos in all clusters and return silos that do not have the latest multi-cluster configuration. 
            If some clusters and/or silos cannot be reached, an exception is thrown.
            </summary>
            <returns>A list of silo addresses of silos that do not have the latest configuration</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.InjectMultiClusterConfiguration(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Configure the active multi-cluster, by injecting a multicluster configuration.
            </summary>
            <param name="clusters">the clusters that should be part of the active configuration</param>
            <param name="comment">a comment to store alongside the configuration</param>
            <param name="checkForLaggingSilosFirst">if true, checks that all clusters are reachable and up-to-date before injecting the new configuration</param>
            <returns> The task completes once information has propagated to the gossip channels</returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.SiloStatusChangeNotification(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus)">
            <summary>
            Receive notifications about silo status events. 
            </summary>
            <param name="updatedSilo">Silo to update about</param>
            <param name="status">Status of the silo</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.Ping(System.Int32)">
            <summary>
            Ping request from another silo that probes the liveness of the recipient silo.
            </summary>
            <param name="pingNumber">A unique sequence number for ping message, to facilitate testijng and debugging.</param>
        </member>
        <member name="M:Orleans.Runtime.IGrainInfo.Merge(Orleans.Runtime.GrainId,Orleans.Runtime.IGrainInfo)">
            <summary>
            Merges two grain directory infos, returning a map of activations which must be deactivated, grouped by silo.
            </summary>
            <param name="grain"></param>
            <param name="other"></param>
            <returns>A map of activations which must be deactivated, grouped by silo.</returns>
        </member>
        <member name="T:Orleans.Runtime.IRemoteGrainDirectory">
            <summary>
            Per-silo system interface for managing the distributed, partitioned grain-silo-activation directory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RegisterMany(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},System.Boolean)">
            <summary>
            Records a bunch of new grain activations.
            This method should be called only remotely during handoff.
            </summary>
            <param name="addresses">The addresses of the grains to register</param>
            <param name="singleActivation">If true, use single-activation registration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.LookUpMany(System.Collections.Generic.List{System.Tuple{Orleans.Runtime.GrainId,System.Int32}})">
            <summary>
            Fetch the updated information on the given list of grains.
            This method should be called only remotely to refresh directory caches.
            </summary>
            <param name="grainAndETagList">list of grains and generation (version) numbers. The latter denote the versions of 
            the lists of activations currently held by the invoker of this method.</param>
            <returns>list of tuples holding a grain, generation number of the list of activations, and the list of activations. 
            If the generation number of the invoker matches the number of the destination, the list is null. If the destination does not
            hold the information on the grain, generation counter -1 is returned (and the list of activations is null)</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.AcceptHandoffPartition(Orleans.Runtime.SiloAddress,System.Collections.Generic.Dictionary{Orleans.Runtime.GrainId,Orleans.Runtime.IGrainInfo},System.Boolean)">
            <summary>
            Handoffs the the directory partition from source silo to the destination silo.
            </summary>
            <param name="source">The address of the owner of the partition.</param>
            <param name="partition">The (full or partial) copy of the directory partition to be Haded off.</param>
            <param name="isFullCopy">Flag specifying whether it is a full copy of the directory partition (and thus any old copy should be just replaced) or the
            a delta copy (and thus the old copy should be updated by delta changes) </param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RemoveHandoffPartition(Orleans.Runtime.SiloAddress)">
            <summary>
            Removes the handed off directory partition from source silo on the destination silo.
            </summary>
            <param name="source">The address of the owner of the partition.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMetricTelemetryConsumer.IncrementMetric(System.String)">
            <summary>
            Increment a metric value.
            </summary>
            <param name="name">Name of the metric.</param>
        </member>
        <member name="M:Orleans.Runtime.IMetricTelemetryConsumer.IncrementMetric(System.String,System.Double)">
            <summary>
            Increment a metric by a given value.
            </summary>
            <param name="name">Name of the metric.</param>
            <param name="value">Value to increment by.</param>
        </member>
        <member name="M:Orleans.Runtime.IMetricTelemetryConsumer.DecrementMetric(System.String)">
            <summary>
            Decrement a metric value.
            </summary>
            <param name="name">Name of the metric.</param>
        </member>
        <member name="M:Orleans.Runtime.IMetricTelemetryConsumer.DecrementMetric(System.String,System.Double)">
            <summary>
            Decrement a metric by a given value.
            </summary>
            <param name="name">Name of the metric.</param>
            <param name="value">Value to decrement by.</param>
        </member>
        <member name="T:Orleans.Runtime.ITelemetryConsumer">
            <summary>
            Marker interface for all Telemetry Consumers
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ITelemetryProducer">
            <summary>Represents an object used for producing telemetry</summary>
        </member>
        <member name="M:Orleans.Runtime.ITelemetryProducer.TrackMetric(System.String,System.Double,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Send a metric value to the registered telemetry consumers.</summary>
            <param name="name">Metric name.</param>
            <param name="value">Metric value.</param>
            <param name="properties">Named string values you can use to classify and filter metrics.</param>
        </member>
        <member name="M:Orleans.Runtime.ITelemetryProducer.TrackMetric(System.String,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Send a metric value to the registered telemetry consumers.</summary>
            <param name="name">Metric name.</param>
            <param name="value">Metric value.</param>
            <param name="properties">Named string values you can use to classify and filter metrics.</param>
        </member>
        <member name="M:Orleans.Runtime.ITelemetryProducer.IncrementMetric(System.String)">
            <summary>Send a metric value of 1 to the registered telemetry consumers, to be displayed in an aggregated view.</summary>
            <param name="name">Metric name.</param>
        </member>
        <member name="M:Orleans.Runtime.ITelemetryProducer.IncrementMetric(System.String,System.Double)">
            <summary>Send a metric value of <paramref name="value"/> to the registered telemetry consumers, to be displayed in an aggregated view.</summary>
            <param name="name">Metric name.</param>
            <param name="value">The amount to increment.</param>
        </member>
        <member name="M:Orleans.Runtime.ITelemetryProducer.DecrementMetric(System.String)">
            <summary>Send a metric value of -1 to the registered telemetry consumers, to be displayed in an aggregated view.</summary>
            <param name="name">Metric name.</param>
        </member>
        <member name="M:Orleans.Runtime.ITelemetryProducer.DecrementMetric(System.String,System.Double)">
            <summary>Send a metric value of -<paramref name="value"/> to the registered telemetry consumers, to be displayed in an aggregated view.</summary>
            <param name="name">Metric name.</param>
            <param name="value">The amount to decrement. The value should typically be positive.</param>
        </member>
        <member name="T:Orleans.Runtime.SafeTimer">
            <summary>
            SafeTimer - A wrapper class around .NET Timer objects, with some additional built-in safeguards against edge-case errors.
            
            SafeTimer is a replacement for .NET Timer objects, and removes some of the more infrequently used method overloads for simplification.
            SafeTimer provides centralization of various "guard code" previously added in various places for handling edge-case fault conditions.
            
            Log levels used: Recovered faults => Warning, Per-Timer operations => Verbose, Per-tick operations => Verbose3
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SafeTimerBase">
            <summary>
            SafeTimerBase - an internal base class for implementing sync and async timers in Orleans.
            
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SafeTimerBase.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="newDueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns><c>true</c> if the timer was successfully updated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddTransientKeyedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Func{System.IServiceProvider,``0,``1})">
            <summary>
            Register a transient keyed service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddTransientKeyedService``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)">
            <summary>
            Register a transient keyed service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddSingletonKeyedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Func{System.IServiceProvider,``0,``1})">
            <summary>
            Register a singleton keyed service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddSingletonKeyedService``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)">
            <summary>
            Register a singleton keyed service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddTransientNamedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Func{System.IServiceProvider,System.String,``0})">
            <summary>
            Register a transient named service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddTransientNamedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Register a transient named service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddSingletonNamedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Func{System.IServiceProvider,System.String,``0})">
            <summary>
            Register a singleton named service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.KeyedServiceExtensions.AddSingletonNamedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Register a singleton named service
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LRU`2.#ctor(System.Int32,System.TimeSpan,Orleans.Runtime.LRU{`0,`1}.FetchValueDelegate)">
            <summary>
            Creates a new LRU cache.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
            <param name="f"></param>
        </member>
        <member name="T:Orleans.Runtime.SafeRandom">
            <summary>
            Thread-safe random number generator.
            Has same API as System.Random but is thread safe, similar to the implementation by Steven Toub: http://blogs.msdn.com/b/pfxteam/archive/2014/10/20/9434171.aspx
            </summary>
        </member>
        <member name="T:Orleans.Runtime.StandardExtensions">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Utils">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Utils.EnumerableToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.Boolean)">
            <summary>
            Returns a human-readable text string that describes an IEnumerable collection of objects.
            </summary>
            <typeparam name="T">The type of the list elements.</typeparam>
            <param name="collection">The IEnumerable to describe.</param>
            <param name="toString">Converts the element to a string. If none specified, <see cref="M:System.Object.ToString"/> will be used.</param>
            <param name="separator">The separator to use.</param>
            <param name="putInBrackets">Puts elements within brackets</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            elements with square brackets and separating them with commas.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.DictionaryToString``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``1,System.String},System.String)">
            <summary>
            Returns a human-readable text string that describes a dictionary that maps objects to objects.
            </summary>
            <typeparam name="T1">The type of the dictionary keys.</typeparam>
            <typeparam name="T2">The type of the dictionary elements.</typeparam>
            <param name="dict">The dictionary to describe.</param>
            <param name="toString">Converts the element to a string. If none specified, <see cref="M:System.Object.ToString"/> will be used.</param>
            <param name="separator">The separator to use. If none specified, the elements should appear separated by a new line.</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            pairs with square brackets and separating them with commas.
            Each key-value pair is represented as the string description of the key followed by
            the string description of the value,
            separated by " -> ", and enclosed in curly brackets.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToIPEndPoint(System.Uri)">
            <summary>
            Parse a Uri as an IPEndpoint.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToSiloAddress(System.Uri)">
            <summary>
            Parse a Uri as a Silo address, including the IPEndpoint and generation identifier.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(System.Net.IPEndPoint)">
            <summary>
            Represent an IP end point in the gateway URI format..
            </summary>
            <param name="ep">The input IP end point</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(Orleans.Runtime.SiloAddress)">
            <summary>
            Represent a silo address in the gateway URI format.
            </summary>
            <param name="address">The input silo address</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.CalculateIdHash(System.String)">
            <summary>
            Calculates an integer hash value based on the consistent identity hash of a string.
            </summary>
            <param name="text">The string to hash.</param>
            <returns>An integer hash for the string.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.CalculateGuidHash(System.String)">
            <summary>
            Calculates a Guid hash value based on the consistent identity a string.
            </summary>
            <param name="text">The string to hash.</param>
            <returns>An integer hash for the string.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.BatchIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Orleans.AsyncExecutorWithRetries">
            <summary>
            This class a convinent utiliity class to execute a certain asyncronous function with retires,
            allowing to specify custom retry filters and policies.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Int32,System.Func{``0,System.Int32,System.Boolean},System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
            <param name="function">Function to execute</param>
            <param name="maxNumSuccessTries">Maximal number of successful execution attempts.
            ExecuteWithRetries will try to re-execute the given function again if directed so by retryValueFilter.
            Set to -1 for unlimited number of success retries, until retryValueFilter is satisfied.
            Set to 0 for only one success attempt, which will cause retryValueFilter to be ignored and the given function executed only once until first success.</param>
            <param name="maxNumErrorTries">Maximal number of execution attempts due to errors.
            Set to -1 for unlimited number of error retries, until retryExceptionFilter is satisfied.</param>
            <param name="retryValueFilter">Filter function to indicate if successful execution should be retied.
            Set to null to disable successful retries.</param>
            <param name="retryExceptionFilter">Filter function to indicate if error execution should be retied.
            Set to null to disable error retries.</param>
            <param name="maxExecutionTime">The maximal execution time of the ExecuteWithRetries function.</param>
            <param name="onSuccessBackOff">The backoff provider object, which determines how much to wait between success retries.</param>
            <param name="onErrorBackOff">The backoff provider object, which determines how much to wait between error retries</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.AsyncLock">
             <summary>
             An async mutual exclusion mechanism that supports scoping via ‘using’.
             </summary>
             <remarks>
             (Adapted from http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx)
            
             When programming with <b>async</b>, the <b>lock</b> keyword is problematic:
             <list type="bullet">
                 <item><b>lock</b> will cause the thread to block while it waits for exclusive access to the critical section of code.</item>
                 <item>The <b>await</b> keyword cannot be used within the scope of a <b>lock</b> construct.</item>
             </list>
            
             It is still useful, at times, to provide exclusive access to a critical section of code. AsyncLock provides semantics
             that correspond to that of a (non-recursive) mutex, while maintining compatibility with the tenets of async programming.
             </remarks>
             <example>
             The following example implements some work that needs to be done under lock:
             <code>
             class Test
             {
                 private AsyncLock _initLock = new AsyncLock();
                 public async Task&lt;int> WorkUnderLock()
                 {
                         using (await _initLock.LockAsync()) // analogous to lock(_initLock)
                         {
                              return await DoSomeWork();
                         }
                 }
             }
             </code>
             </example>
            
             We decided to keep the implemention simple and mimic the semantics of a regular mutex as much as possible.
             1) AsyncLock is NOT IDisposable, since we don't want to give the developer an option to erraneously manualy dispose the lock
             while there may be some unreleased LockReleasers.
             2) AsyncLock does NOT have to implement the Finalizer function. The underlying resource of SemaphoreSlim will be eventually released by the .NET,
             when SemaphoreSlim is finalized. Having finalizer for AsyncLock will not speed it up.
             3) LockReleaser is IDisposable to implement the "using" pattern.
             4) LockReleaser does NOT have to implement the Finalizer function. If users forget to Dispose the LockReleaser (analagous to forgetting to release a mutex)
             the AsyncLock wil remain locked, which may potentialy cause deadlock. This is OK, since these are the exact regular mutex semantics - if one forgets to unlock the mutex, it stays locked.
        </member>
        <member name="T:Orleans.AsyncSerialExecutor`1">
            <summary>
            A utility class that provides serial execution of async functions.
            In can be used inside reentrant grain code to execute some methods in a non-reentrant (serial) way.
            </summary>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor`1.AddNext(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Submit the next function for execution. It will execute after all previously submitted functions have finished, without interleaving their executions.
            Returns a promise that represents the execution of this given function. 
            The returned promise will be resolved when the given function is done executing.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.BatchWorker">
            <summary>
            General pattern for an asynchronous worker that performs a work task, when notified,
            to service queued work. Each work cycle handles ALL the queued work. 
            If new work arrives during a work cycle, another cycle is scheduled. 
            The worker never executes more than one instance of the work cycle at a time, 
            and consumes no resources when idle. It uses TaskScheduler.Current 
            to schedule the work cycles.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.Work">
            <summary>Implement this member in derived classes to define what constitutes a work cycle</summary>
        </member>
        <member name="M:Orleans.BatchWorker.Notify">
            <summary>
            Notify the worker that there is more work.
            </summary>
        </member>
        <member name="M:Orleans.BatchWorker.IsIdle">
            <summary>
            Check if this worker is busy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.BatchWorker.WaitForCurrentWorkToBeServiced">
            <summary>
            Wait for the current work cycle, and also the next work cycle if there is currently unserviced work.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.BatchWorker.NotifyAndWaitForWorkToBeServiced">
            <summary>
            Notify the worker that there is more work, and wait for the current work cycle, and also the next work cycle if there is currently unserviced work.
            </summary>
        </member>
        <member name="T:Orleans.BatchWorkerFromDelegate">
            A convenient variant of a batch worker 
            that allows the work function to be passed as a constructor argument
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.ToUntypedTask(System.Threading.Tasks.Task)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.ToUntypedTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="T">The underlying type of <paramref name="task"/>.</typeparam>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.ToTypedTask``1(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="T">The underlying type of <paramref name="task"/>.</typeparam>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.ToUntypedTask(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> for the provided <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan,System.String)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeout">Amount of time to wait before timing out</param>
            <param name="exceptionMessage">Text to put into the timeout exception message</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The completed task</returns>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.String)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeSpan">Amount of time to wait before timing out</param>
            <param name="exceptionMessage">Text to put into the timeout exception message</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The value of the completed task</returns>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            For making an uncancellable task cancellable, by ignoring its result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="taskToComplete">The task to wait for unless cancelled</param>
            <param name="cancellationToken">A cancellation token for cancelling the wait</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.TaskDone">
            <summary>
            A special void 'Done' Task that is already in the RunToCompletion state.
            Equivalent to Task.FromResult(1).
            </summary>
        </member>
        <member name="P:Orleans.TaskDone.Done">
            <summary>
            A special 'Done' Task that is already in the RunToCompletion state
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GenericMethodInvoker">
            <summary>
            Functionality for invoking calls on a generic instance method.
            </summary>
            <remarks>
            Each instance of this class can invoke calls on one generic method.
            </remarks>
        </member>
        <member name="T:Orleans.CodeGeneration.GenericMethodInvoker.GenericMethodInvokerDelegate">
            <summary>
             Invoke the generic method described by this instance on the provided <paramref name="grain"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="arguments">The arguments, including the method's type parameters.</param>
            <returns>The method result.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.CodeGeneration.GenericMethodInvoker"/> class.
            </summary>
            <param name="grainInterfaceType">The grain interface type which the method exists on.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameterCount">The number of type parameters which the method has.</param>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.Invoke(Orleans.Runtime.IAddressable,System.Object[])">
            <summary>
            Invoke the defined method on the provided <paramref name="grain"/> instance with the given <paramref name="arguments"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="arguments">The arguments to the method with the type parameters first, followed by the method parameters.</param>
            <returns>The invocation result.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.CreateInvoker(System.Object[])">
            <summary>
            Creates an invoker delegate for the type arguments specified in <paramref name="arguments"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>A new invoker delegate.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.GetTaskConversionMethod(System.Type)">
            <summary>
            Returns a suitable <see cref="T:System.Reflection.MethodInfo"/> for a method which will convert an argument of type <paramref name="taskType"/>
            into <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="taskType">The type to convert.</param>
            <returns>A suitable conversion method.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.System#Collections#Generic#IEqualityComparer{System#Object[]}#Equals(System.Object[],System.Object[])">
            <summary>
            Performs equality comparison for the purpose of comparing type parameters only.
            </summary>
            <param name="x">One argument list.</param>
            <param name="y">The other argument list.</param>
            <returns><see langword="true"/> if the type parameters in the respective arguments are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.System#Collections#Generic#IEqualityComparer{System#Object[]}#GetHashCode(System.Object[])">
            <summary>
            Returns a hash code for the type parameters in the provided argument list.
            </summary>
            <param name="obj">The argument list.</param>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GenericMethodInvoker.GetMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the method on <paramref name="declaringType"/> with the provided name
            and number of generic type parameters.
            </summary>
            <param name="declaringType">The type which the method is declared on.</param>
            <param name="methodName">The method name.</param>
            <param name="typeParameterCount">The number of generic type parameters.</param>
            <returns>The identified method.</returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.IsReadOnly(System.Reflection.MethodInfo)">
            <summary>
            Whether method is read-only, i.e. does not modify grain state, 
            a method marked with [ReadOnly].
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.IsPureObserverInterface(System.Type)">
            <summary>
            decide whether the class is derived from Grain
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceUtils.GetMethodsImpl(System.Type,System.Type,System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>
            Recurses through interface graph accumulating methods
            </summary>
            <param name="grainType">Grain type</param>
            <param name="serviceType">Service interface type</param>
            <param name="methodInfos">Accumulated </param>
        </member>
        <member name="T:Orleans.IGrainState">
            <summary>Defines the state of a grain</summary>
        </member>
        <member name="P:Orleans.IGrainState.State">
            <summary>The application level payload that is the actual state.</summary>
        </member>
        <member name="P:Orleans.IGrainState.ETag">
            <summary>An e-tag that allows optimistic concurrency checks at the storage provider level.</summary>
        </member>
        <member name="T:Orleans.GrainState`1">
            <summary>
            Typed default implementation of <see cref="T:Orleans.IGrainState"/>.
            </summary>
            <typeparam name="T">The type of application level payload.</typeparam>
        </member>
        <member name="P:Orleans.GrainState`1.ETag">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainState`1.#ctor">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState`1"/>.</summary>
        </member>
        <member name="M:Orleans.GrainState`1.#ctor(`0)">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState`1"/>.</summary>
            <param name="state"> The initial value of the state.</param>
        </member>
        <member name="M:Orleans.GrainState`1.#ctor(`0,System.String)">
            <summary>Initializes a new instance of <see cref="T:Orleans.GrainState`1"/>.</summary>
            <param name="state">The initial value of the state.</param>
            <param name="eTag">The initial e-tag value that allows optimistic concurrency checks at the storage provider level.</param>
        </member>
        <member name="T:Orleans.IOptionFormatter">
            <summary>
            format the option and give it a category and a name
            </summary>
        </member>
        <member name="T:Orleans.IOptionFormatter`1">
            <summary>
            Option formatter for a certain option type <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Orleans.IOptionFormatterResolver`1">
            <summary>
            IOptionFormatterResolver resolve specific OptionFormatter for certain named option
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Orleans.OptionFormattingUtilities">
            <summary>
            Utility class for option formatting
            </summary>
        </member>
        <member name="M:Orleans.OptionFormattingUtilities.Format(System.Object,System.Object,System.String)">
            <summary>
            Format key value pair usin default format
            </summary>
        </member>
        <member name="T:Orleans.OptionsLogger">
            <summary>
            Base class for client and silo default options loggers.
            </summary>
        </member>
        <member name="M:Orleans.OptionsLogger.LogOptions">
            <summary>
            Log all options with registered formatters
            </summary>
        </member>
        <member name="M:Orleans.OptionsLogger.LogOptions(System.Collections.Generic.IEnumerable{Orleans.IOptionFormatter})">
            <summary>
            Log options using a set of formatters
            </summary>
            <param name="formatters"></param>
        </member>
        <member name="M:Orleans.OptionsLogger.LogOption(Orleans.IOptionFormatter)">
            <summary>
            Log an options using a formatter
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="T:Orleans.Configuration.OptionConfigureExtensionMethods">
            <summary>
            Extension methods on IServiceCollection, to provider better usability to IOptionFormatter
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureFormatter``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            configure option formatter for TOptions/>
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureFormatter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            configure option formatter for <typeparam name="TOptions"/>
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.TryConfigureFormatter``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure a option formatter for option TOptions if none is configured
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TOptionFormatter"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureFormatterResolver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure option formatter resolver for named option TOptions
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.TryConfigureFormatterResolver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure option formatter resolver for named option TOptions, if none is configured
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionConfigureExtensionMethods.ConfigureNamedOptionForLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Configure a named option to be logged
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.GetProviderClusterOptions(System.IServiceProvider,System.String)">
            <summary>
            Gets <see cref="T:Orleans.Configuration.ClusterOptions"/> which may have been overridden on a per-provider basis.
            Note: This is intended for migration purposes as a means to handle previously inconsistent behaviors in how providers used ServiceId and ClusterId.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.AddProviderClusterOptions(Orleans.IClientBuilder,System.String,System.Action{Orleans.Configuration.OptionsBuilder{Orleans.Configuration.ClusterOptions}})">
            <summary>
            Add an override <see cref="T:Orleans.Configuration.ClusterOptions"/> on a per-provider basis.
            Note: This is intended for migration purposes as a means to handle previously inconsistent behaviors in how providers used ServiceId and ClusterId.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.AddProviderClusterOptions(Orleans.IClientBuilder,System.String,System.Action{Orleans.Configuration.ClusterOptions})">
            <summary>
            Add an override <see cref="T:Orleans.Configuration.ClusterOptions"/> on a per-provider basis.
            Note: This is intended for migration purposes as a means to handle previously inconsistent behaviors in how providers used ServiceId and ClusterId.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.GetOverridableOption``1(System.IServiceProvider,System.String)">
            <summary>
            Gets option that can be overriden by named service.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Overrides.OptionsOverrides.AddOptionsOverride``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Orleans.Configuration.OptionsBuilder{``0}})">
            <summary>
            Add an override for an option via a named service.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClientMessagingOptions">
            <summary>
            Specifies global messaging options that are client related.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.ClientSenderBuckets">
            <summary>
             The ClientSenderBuckets attribute specifies the total number of grain buckets used by the client in client-to-gateway communication
             protocol. In this protocol, grains are mapped to buckets and buckets are mapped to gateway connections, in order to enable stickiness
             of grain to gateway (messages to the same grain go to the same gateway, while evenly spreading grains across gateways).
             This number should be about 10 to 100 times larger than the expected number of gateway connections.
             If this attribute is not specified, then Math.Pow(2, 13) is used.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.PreferredFamily">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClientMessagingOptions.NetworkInterfaceName">
            <summary>
            The Interface attribute specifies the name of the network interface to use to work out an IP address for this machine.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClientStatisticsOptions">
            <summary>
            Statistics output related options for cluster client.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClusterMembershipOptions">
            <summary>
            Settings for cluster membership.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumMissedTableIAmAliveLimit">
            <summary>
            The number of missed "I am alive" updates  in the table from a silo that causes warning to be logged. Does not impact the liveness protocol.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.LivenessEnabled">
            <summary>
            Global switch to disable silo liveness protocol (should be used only for testing).
            The LivenessEnabled attribute, if provided and set to "false", suppresses liveness enforcement.
            If a silo is suspected to be dead, but this attribute is set to "false", the suspicions will not propagated to the system and enforced,
            This parameter is intended for use only for testing and troubleshooting.
            In production, liveness should always be enabled.
            Default is true (eanabled)
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.ProbeTimeout">
            <summary>
            The number of seconds to periodically probe other silos for their liveness or for the silo to send "I am alive" heartbeat  messages about itself.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.TableRefreshTimeout">
            <summary>
            The number of seconds to periodically fetch updates from the membership table.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.DeathVoteExpirationTimeout">
            <summary>
            Expiration time in seconds for death vote in the membership table.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.IAmAliveTablePublishTimeout">
            <summary>
            The number of seconds to periodically write in the membership table that this silo is alive. Used ony for diagnostics.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.MaxJoinAttemptTime">
            <summary>
            The number of seconds to attempt to join a cluster of silos before giving up.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.ExpectedClusterSize">
            <summary>
            The expected size of a cluster. Need not be very accurate, can be an overestimate.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.ValidateInitialConnectivity">
            <summary>
            Whether new silo that joins the cluster has to validate the initial connectivity with all other Active silos.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.UseLivenessGossip">
            <summary>
            Whether to use the gossip optimization to speed up spreading liveness information.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumProbedSilos">
            <summary>
            The number of silos each silo probes for liveness.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumMissedProbesLimit">
            <summary>
            The number of missed "I am alive" heartbeat messages from a silo or number of un-replied probes that lead to suspecting this silo as dead.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.NumVotesForDeathDeclaration">
            <summary>
            The number of non-expired votes that are needed to declare some silo as dead (should be at most NumMissedProbesLimit)
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterMembershipOptions.IsRunningAsUnitTest">
            <summary>
            TEST ONLY - Do not modify in production environments
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClusterOptions">
            <summary>
            Configures the Orleans cluster.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClusterOptions.DevelopmentClusterId">
            <summary>
            Default cluster id for development clusters.
            </summary>
        </member>
        <member name="F:Orleans.Configuration.ClusterOptions.DevelopmentServiceId">
            <summary>
            Default service id for development clusters.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterOptions.ClusterId">
            <summary>
            Gets or sets the cluster identity. This used to be called DeploymentId before Orleans 2.0 name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ClusterOptions.ServiceId">
            <summary>
            Gets or sets a unique identifier for this service, which should survive deployment and redeployment, where as <see cref="P:Orleans.Configuration.ClusterOptions.ClusterId"/> might not.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ClusterOptionsValidator">
            <summary>
            Validator for <see cref="T:Orleans.Configuration.ClusterOptions"/>
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GatewayOptions.DEFAULT_GATEWAY_LIST_REFRESH_PERIOD">
            <summary>
            Default gateway list refresh period
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GatewayOptions.GatewayListRefreshPeriod">
            <summary>
            Gateway list refresh period
            </summary>
        </member>
        <member name="F:Orleans.Configuration.GatewayOptions.DEFAULT_PREFERED_GATEWAY_INDEX">
            <summary>
            Default preferred gateway index,. Value -1 means perfer no gateway
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GatewayOptions.PreferedGatewayIndex">
            <summary>
            Prefered gateway index
            </summary>
        </member>
        <member name="T:Orleans.Configuration.GrainVersioningOptions">
            <summary>
            Versioning options govern grain implementation selection in heterogeneous deployments.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainVersioningOptions.DefaultCompatibilityStrategy">
            <summary>
            Strategy used to determine grain compatibility in heterogeneous deployments.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.GrainVersioningOptions.DefaultVersionSelectorStrategy">
            <summary>
            Strategy for selecting grain versions in heterogeneous deployments.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.LoadSheddingOptions.LoadSheddingEnabled">
            <summary>
            Specifies whether or not load shedding in the client gateway and stream providers is enabled.
            The default value is false, meaning that load shedding is disabled.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.LoadSheddingOptions.LoadSheddingLimit">
            <summary>
            Specifies the system load, in CPU%, at which load begins to be shed.
            Note that this value is in %, so valid values range from 1 to 100, and a reasonable value is
            typically between 80 and 95.
            This value is ignored if load shedding is disabled, which is the default.
            If load shedding is enabled and this attribute does not appear, then the default limit is 95%.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.MessagingOptions">
            <summary>
            Specifies global messaging options that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.ResponseTimeout">
             <summary>
             The ResponseTimeout attribute specifies the default timeout before a request is assumed to have failed.
            <seealso cref="P:Orleans.Configuration.MessagingOptions.ResponseTimeoutWithDebugger"/>
             </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.ResponseTimeoutWithDebugger">
            <summary>
            If a debugger is attached the value from <see cref="P:Orleans.Configuration.MessagingOptions.ResponseTimeout"/> will be ignored 
            and the value from this field will be used.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.MaxResendCount">
            <summary>
            The MaxResendCount attribute specifies the maximal number of resends of the same message.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.ResendOnTimeout">
            <summary>
            The ResendOnTimeout attribute specifies whether the message should be automaticaly resend by the runtime when it times out on the sender.
            Default is false.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.DropExpiredMessages">
            <summary>
            The DropExpiredMessages attribute specifies whether the message should be dropped if it has expired, that is if it was not delivered 
            to the destination before it has timed out on the sender.
            Default is true.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.BufferPoolBufferSize">
            <summary>
            The size of a buffer in the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.BufferPoolMaxSize">
            <summary>
            The maximum size of the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.BufferPoolPreallocationSize">
            <summary>
            The initial size of the messaging buffer pool that is pre-allocated.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MessagingOptions.PropagateActivityId">
            <summary>
             Whether Trace.CorrelationManager.ActivityId settings should be propagated into grain calls.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.MultiClusterOptions">
            <summary>
            Options for configuring multi-cluster support
            </summary>
        </member>
        <member name="F:Orleans.Configuration.MultiClusterOptions.BuiltIn.NotSpecified">
            <summary>Default value to allow discrimination of override values.</summary>
        </member>
        <member name="F:Orleans.Configuration.MultiClusterOptions.BuiltIn.AzureTable">
            <summary>An Azure Table serving as a channel. </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.HasMultiClusterNetwork">
            <summary>
            Whether this cluster is configured to be part of a multi-cluster network
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.DefaultMultiCluster">
             <summary>
            A list of cluster ids, to be used if no multi-cluster configuration is found in gossip channels.
             </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.MaxMultiClusterGateways">
            <summary>
            The maximum number of silos per cluster should be designated to serve as gateways.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.BackgroundGossipInterval">
            <summary>
            The time between background gossips.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.UseGlobalSingleInstanceByDefault">
            <summary>
            Whether to use the global single instance protocol as the default
            multi-cluster registration strategy.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.GlobalSingleInstanceNumberRetries">
            <summary>
            The number of quick retries before going into DOUBTFUL state.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.GlobalSingleInstanceRetryInterval">
            <summary>
            The time between the slow retries for DOUBTFUL activations.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.MultiClusterOptions.GossipChannels">
            <summary>
            Inter-cluster gossip channels.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.NetworkingOptions">
            <summary>
            Configures networking options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.NetworkingOptions.OpenConnectionTimeout">
            <summary>
            The OpenConnectionTimeout attribute specifies the timeout before a connection open is assumed to have failed
            </summary>
        </member>
        <member name="P:Orleans.Configuration.NetworkingOptions.MaxSocketAge">
            <summary>
            The MaxSocketAge attribute specifies how long to keep an open socket before it is closed.
            Default is TimeSpan.MaxValue (never close sockets automatically, unles they were broken).
            </summary>
        </member>
        <member name="T:Orleans.Configuration.PerformanceTuningOptions">
            <summary>
            Performance tuning options. 
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PerformanceTuningOptions.DefaultConnectionLimit">
            <summary>
            ServicePointManager related settings
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PerformanceTuningOptions.MinDotNetThreadPoolSize">
            <summary>
            Minimum number of DotNet threads.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SerializationProviderOptions">
            <summary>
            Specifies serialization provider and fallback serializer options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SerializationProviderOptions.SerializationProviders">
            <summary>
            Externally registered serializers
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SerializationProviderOptions.FallbackSerializationProvider">
            <summary>
            Serializer used if no serializer is found for a type.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.StaticGatewayListProviderOptions">
            <summary>
            Options for Configure StaticGatewayListProvider
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StaticGatewayListProviderOptions.Gateways">
            <summary>
            Static gateways to use
            </summary>
        </member>
        <member name="T:Orleans.Configuration.StatisticsOptions">
            <summary>
            The StatisticsOptions type contains various statistics output related options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StatisticsOptions.PerfCountersWriteInterval">
            <summary>
            The PerfCounterWriteInterval property specifies the frequency of updating the windows performance counters.
            The default is 30 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StatisticsOptions.LogWriteInterval">
            <summary>
            The LogWriteInterval property specifies the frequency of updating the statistics in the log file.
            The default is 5 minutes.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.StatisticsOptions.CollectionLevel">
            <summary>
            The CollectionLevel property specifies the verbosity level of statistics to collect. The default is Info.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.TelemetryOptions">
            <summary>
            Telemetry consumer settings
            </summary>
        </member>
        <member name="P:Orleans.Configuration.TelemetryOptions.Consumers">
            <summary>
            Configured telemetry consumers
            </summary>
        </member>
        <member name="T:Orleans.Configuration.TypeManagementOptions">
            <summary>
            Type management settings for in place upgrade.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.TypeManagementOptions.TypeMapRefreshInterval">
            <summary>
            The number of seconds to refresh the cluster grain interface map
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring dependency injection.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.ServiceCollectionExtensions.AddFromExisting``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an existing registration of <typeparamref name="TImplementation"/> as a provider of service type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The service type being provided.</typeparam>
            <typeparam name="TImplementation">The implementation of <typeparamref name="TService"/>.</typeparam>
            <param name="services">The service collection.</param>
        </member>
        <member name="M:Orleans.Configuration.ServiceCollectionExtensions.TryAddFromExisting``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an existing registration of <typeparamref name="TImplementation"/> as a provider of <typeparamref name="TService"/> if there are no existing <typeparamref name="TService"/> implementations.
            </summary>
            <typeparam name="TService">The service type being provided.</typeparam>
            <typeparam name="TImplementation">The implementation of <typeparamref name="TService"/>.</typeparam>
            <param name="services">The service collection.</param>
        </member>
        <member name="T:Orleans.Configuration.Validators.ApplicationPartValidator">
            <summary>
            Validates that application libraries (grains, serializers, etc) have been configured.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.Validators.ApplicationPartValidator.ValidateConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Configuration.ConfigureNamedOptions`2">
            <summary>
            Implementation of IConfigureNamedOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.ConfigureNamedOptions`2.#ctor(System.String,`1,System.Action{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency">A dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`2.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`2.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ConfigureNamedOptions`3">
            <summary>
            Implementation of IConfigureNamedOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.ConfigureNamedOptions`3.#ctor(System.String,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`3.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`3.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ConfigureNamedOptions`4">
            <summary>
            Implementation of IConfigureNamedOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
            <typeparam name="TDep3"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.ConfigureNamedOptions`4.#ctor(System.String,`1,`2,`3,System.Action{`0,`1,`2,`3})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="dependency3">A third dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`4.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`4.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ConfigureNamedOptions`5">
            <summary>
            Implementation of IConfigureNamedOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
            <typeparam name="TDep3"></typeparam>
            <typeparam name="TDep4"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.ConfigureNamedOptions`5.#ctor(System.String,`1,`2,`3,`4,System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency1">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="dependency3">A third dependency.</param>
            <param name="dependency4">A fourth dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`5.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`5.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ConfigureNamedOptions`6">
            <summary>
            Implementation of IConfigureNamedOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
            <typeparam name="TDep3"></typeparam>
            <typeparam name="TDep4"></typeparam>
            <typeparam name="TDep5"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.ConfigureNamedOptions`6.#ctor(System.String,`1,`2,`3,`4,`5,System.Action{`0,`1,`2,`3,`4,`5})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency1">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="dependency3">A third dependency.</param>
            <param name="dependency4">A fourth dependency.</param>
            <param name="dependency5">A fifth dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`6.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ConfigureNamedOptions`6.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.OptionsBuilder`1">
            <summary>
            Used to configure TOptions instances. This will be deprecated and superseded Mirosoft.Extensions.Options v2.1.0.0 once it ships.
            </summary>
            <typeparam name="TOptions">The type of options being requested.</typeparam>
        </member>
        <member name="P:Orleans.Configuration.OptionsBuilder`1.Name">
            <summary>
            The default name of the TOptions instance.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.OptionsBuilder`1.Services">
            <summary>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> for the options being configured.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionsBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> for the options being configured.</param>
            <param name="name">The default name of the TOptions instance, if null Options.DefaultName is used.</param>
        </member>
        <member name="M:Orleans.Configuration.OptionsBuilder`1.Configure(System.Action{`0})">
            <summary>
            Registers an action used to configure a particular type of options.
            Note: These are run before all <seealso cref="M:Orleans.Configuration.OptionsBuilder`1.PostConfigure(System.Action{`0})"/>.
            </summary>
            <param name="configureOptions">The action used to configure the options.</param>
        </member>
        <member name="M:Orleans.Configuration.OptionsBuilder`1.PostConfigure(System.Action{`0})">
            <summary>
            Registers an action used to configure a particular type of options.
            Note: These are run after all <seealso cref="M:Orleans.Configuration.OptionsBuilder`1.Configure(System.Action{`0})"/>.
            </summary>
            <param name="configureOptions">The action used to configure the options.</param>
        </member>
        <member name="T:Orleans.Configuration.OptionsBuilderConfigurationExtensions">
            <summary>
            Extension methods for adding configuration related options services to the DI container via <see cref="T:Orleans.Configuration.OptionsBuilder`1"/>. This will be deprecated and superseded Mirosoft.Extensions.Options v2.1.0.0 once it ships.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionsBuilderConfigurationExtensions.Bind``1(Orleans.Configuration.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which TOptions will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="optionsBuilder">The options builder to add the services to.</param>
            <param name="config">The configuration being bound.</param>
            <returns>The <see cref="T:Orleans.Configuration.OptionsBuilder`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="T:Orleans.Configuration.OptionsServiceCollectionExtensions">
            <summary>
            Extension methods for adding options services to the DI container. This will be deprecated and superseded Mirosoft.Extensions.Options v2.1.0.0 once it ships.
            </summary>
        </member>
        <member name="M:Orleans.Configuration.OptionsServiceCollectionExtensions.AddOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Gets an options builder that forwards Configure calls for the same <typeparamref name="TOptions"/> to the underlying service collection. This will be deprecated and superseded Mirosoft.Extensions.Options v2.1.0.0 once it ships.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the services to.</param>
            <returns>The <see cref="T:Orleans.Configuration.OptionsBuilder`1"/> so that configure calls can be chained in it.</returns>
        </member>
        <member name="M:Orleans.Configuration.OptionsServiceCollectionExtensions.AddOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Gets an options builder that forwards Configure calls for the same named <typeparamref name="TOptions"/> to the underlying service collection. This will be deprecated and superseded Mirosoft.Extensions.Options v2.1.0.0 once it ships.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the services to.</param>
            <param name="name">The name of the options instance.</param>
            <returns>The <see cref="T:Orleans.Configuration.OptionsBuilder`1"/> so that configure calls can be chained in it.</returns>
        </member>
        <member name="T:Orleans.Configuration.PostConfigureOptions`2">
            <summary>
            Implementation of IPostConfigureOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.PostConfigureOptions`2.#ctor(System.String,`1,System.Action{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency">A dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`2.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`2.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.PostConfigureOptions`3">
            <summary>
            Implementation of IPostConfigureOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.PostConfigureOptions`3.#ctor(System.String,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`3.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`3.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.PostConfigureOptions`4">
            <summary>
            Implementation of IPostConfigureOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
            <typeparam name="TDep3"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.PostConfigureOptions`4.#ctor(System.String,`1,`2,`3,System.Action{`0,`1,`2,`3})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="dependency3">A third dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`4.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`4.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.PostConfigureOptions`5">
            <summary>
            Implementation of IPostConfigureOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
            <typeparam name="TDep3"></typeparam>
            <typeparam name="TDep4"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.PostConfigureOptions`5.#ctor(System.String,`1,`2,`3,`4,System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency1">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="dependency3">A third dependency.</param>
            <param name="dependency4">A fourth dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`5.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`5.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.Configuration.PostConfigureOptions`6">
            <summary>
            Implementation of IPostConfigureOptions.
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TDep1"></typeparam>
            <typeparam name="TDep2"></typeparam>
            <typeparam name="TDep3"></typeparam>
            <typeparam name="TDep4"></typeparam>
            <typeparam name="TDep5"></typeparam>
        </member>
        <member name="M:Orleans.Configuration.PostConfigureOptions`6.#ctor(System.String,`1,`2,`3,`4,`5,System.Action{`0,`1,`2,`3,`4,`5})">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the options.</param>
            <param name="dependency1">A dependency.</param>
            <param name="dependency2">A second dependency.</param>
            <param name="dependency3">A third dependency.</param>
            <param name="dependency4">A fourth dependency.</param>
            <param name="dependency5">A fifth dependency.</param>
            <param name="action">The action to register.</param>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`6.Name">
            <summary>
            The options name.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.PostConfigureOptions`6.Action">
            <summary>
            The configuration action.
            </summary>
        </member>
        <member name="T:Orleans.ClientBuilder">
            <summary>
            Builder used for creating <see cref="T:Orleans.IClusterClient"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.ClientBuilder.Properties">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.ConfigureAppConfiguration(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.ConfigureServices(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClientBuilder.ConfigureContainer``1(System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.ClientBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Orleans.IClientBuilder"/>.
            </summary>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.ConfigureDefaults(Orleans.IClientBuilder)">
            <summary>
            Configures default client services.
            </summary>
            <param name="builder">The host builder.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseEnvironment(Orleans.IClientBuilder,System.String)">
            <summary>
            Specify the environment to be used by the host.
            </summary>
            <param name="hostBuilder">The host builder to configure.</param>
            <param name="environment">The environment to host the application in.</param>
            <returns>The host builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.ConfigureServices(Orleans.IClientBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="hostBuilder">The <see cref="T:Orleans.IClientBuilder" /> to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the <see cref="T:Orleans.IClientBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.ConfigureAppConfiguration(Orleans.IClientBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Orleans.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations./>.
            </summary>
            <param name="hostBuilder">The host builder to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.Configure``1(Orleans.IClientBuilder,System.Action{``0})">
            <summary>
            Registers an action used to configure a particular type of options.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configureOptions">The action used to configure the options.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.Configure``1(Orleans.IClientBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which <typeparamref name="TOptions"/> will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configuration">The configuration.</param>
            <returns>The client builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.AddClientInvokeCallback(Orleans.IClientBuilder,Orleans.ClientInvokeCallback)">
            <summary>
            Adds a client invocation callback.
            </summary>
            <param name="builder">The builder.</param>
            <param name="callback">The callback.</param>
            <remarks>
            A <see cref="T:Orleans.ClientInvokeCallback"/> ia a global pre-call interceptor.
            Synchronous callback made just before a message is about to be constructed and sent by a client to a grain.
            This call will be made from the same thread that constructs the message to be sent, so any thread-local settings
            such as <c>Orleans.RequestContext</c> will be picked up.
            The action receives an <see cref="T:Orleans.CodeGeneration.InvokeMethodRequest"/> with details of the method to be invoked, including InterfaceId and MethodId,
            and a <see cref="T:Orleans.IGrain"/> which is the GrainReference this request is being sent through
            This callback method should return promptly and do a minimum of work, to avoid blocking calling thread or impacting throughput.
            </remarks>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.AddClusterConnectionLostHandler(Orleans.IClientBuilder,Orleans.ConnectionToClusterLostHandler)">
            <summary>
            Registers a <see cref="T:Orleans.ConnectionToClusterLostHandler"/> event handler.
            </summary>
            <param name="builder">The builder.</param>
            <param name="handler">The handler.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseServiceProviderFactory(Orleans.IClientBuilder,System.Func{Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> for this client is configured. 
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">The service provider factory.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.ConfigureLogging(Orleans.IClientBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.IClientBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.IClientBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseLocalhostClustering(Orleans.IClientBuilder,System.Int32,System.String,System.String)">
            <summary>
            Configures the client to connect to a silo on the localhost.
            </summary>
            <param name="builder"></param>
            <param name="gatewayPort">The local silo's gateway port.</param>
            <param name="serviceId">The service id.</param>
            <param name="clusterId">The cluster id.</param>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseLocalhostClustering(Orleans.IClientBuilder,System.Int32[],System.String,System.String)">
            <summary>
            Configures the client to connect to a silo on the localhost.
            </summary>
            <param name="builder"></param>
            <param name="gatewayPorts">The local silo gateway ports.</param>
            <param name="serviceId">The service id.</param>
            <param name="clusterId">The cluster id.</param>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseStaticClustering(Orleans.IClientBuilder,System.Net.IPEndPoint[])">
            <summary>
            Configures the client to use static clustering.
            </summary>
            <param name="builder"></param>
            <param name="endpoints">The gateway endpoints.</param>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseStaticClustering(Orleans.IClientBuilder,System.Action{Orleans.Configuration.StaticGatewayListProviderOptions})">
            <summary>
            Configures the client to use static clustering.
            </summary>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.UseStaticClustering(Orleans.IClientBuilder,System.Action{Orleans.Configuration.OptionsBuilder{Orleans.Configuration.StaticGatewayListProviderOptions}})">
            <summary>
            Configures the client to use static clustering.
            </summary>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.GetApplicationPartManager(Orleans.IClientBuilder)">
            <summary>
            Returns the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderExtensions.ConfigureApplicationParts(Orleans.IClientBuilder,System.Action{Orleans.ApplicationParts.IApplicationPartManager})">
            <summary>
            Configures the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.ClientBuilderGrainCallFilterExtensions">
            <summary>
            Extensions for configuring grain call filters.
            </summary>
        </member>
        <member name="M:Orleans.ClientBuilderGrainCallFilterExtensions.AddOutgoingGrainCallFilter(Orleans.IClientBuilder,Orleans.IOutgoingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderGrainCallFilterExtensions.AddOutgoingGrainCallFilter``1(Orleans.IClientBuilder)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.ClientBuilderGrainCallFilterExtensions.AddOutgoingGrainCallFilter(Orleans.IClientBuilder,Orleans.OutgoingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filter">The filter.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.ConnectionToClusterLostHandler">
            <summary>
            Handler for client disconnection from a cluster.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orleans.ClientInvokeCallback">
            <summary>
            The delegate called before every request to a grain.
            </summary>
            <param name="request">The request.</param>
            <param name="grain">The grain.</param>
        </member>
        <member name="T:Orleans.ClusterClient">
            <summary>
            Client for communicating with clusters of Orleans silos.
            </summary>
        </member>
        <member name="M:Orleans.ClusterClient.#ctor(Orleans.OutsideRuntimeClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Orleans.Configuration.ClientMessagingOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.ClusterClient"/> class.
            </summary>
            <param name="runtimeClient">The runtime client.</param>
            <param name="loggerFactory">Logger factory used to create loggers</param>
            <param name="clientMessagingOptions">Messaging parameters</param>
        </member>
        <member name="P:Orleans.ClusterClient.IsInitialized">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.GrainFactory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.Orleans#IInternalClusterClient#StreamProviderRuntime">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.InternalGrainFactory">
            <inheritdoc />
        </member>
        <member name="P:Orleans.ClusterClient.IsDisposing">
            <summary>
            Gets a value indicating whether or not this instance is being disposed.
            </summary>
        </member>
        <member name="M:Orleans.ClusterClient.GetStreamProvider(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Connect(System.Func{System.Exception,System.Threading.Tasks.Task{System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Close">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Abort">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.BindGrainReference(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetSystemTarget``1(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#Cast``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#Cast(Orleans.Runtime.IAddressable,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.ClusterClient.Orleans#IInternalGrainFactory#GetGrain(Orleans.Runtime.GrainId,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IIncomingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.GrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddIncomingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IIncomingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddIncomingGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddIncomingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IncomingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IIncomingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddOutgoingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.IOutgoingGrainCallFilter)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddOutgoingGrainCallFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline.
            </summary>
            <typeparam name="TImplementation">The filter implementation type.</typeparam>
            <param name="services">The service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.GrainCallFilterExtensions.AddOutgoingGrainCallFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Orleans.OutgoingGrainCallFilterDelegate)">
            <summary>
            Adds an <see cref="T:Orleans.IOutgoingGrainCallFilter"/> to the filter pipeline via a delegate.
            </summary>
            <param name="services">The service collection.</param>
            <param name="filter">The filter.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Orleans.Hosting.DelegateServiceProviderFactory.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.DelegateServiceProviderFactory.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Hosting.EnvironmentName">
            <summary>
            Commonly used environment names.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.HostBuilderContext">
            <summary>
            Context containing the common services on the host. Some properties may be null until set by the host.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.HostBuilderContext.HostingEnvironment">
            <summary>
            The <see cref="T:Orleans.Hosting.IHostingEnvironment" /> initialized by the host.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.HostBuilderContext.Configuration">
            <summary>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> containing the merged configuration of the application and the host.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.HostBuilderContext.Properties">
            <summary>
            A central location for sharing state between components during the host building process.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.HostDefaults">
            <summary>
            Constants for HostBuilder configuration keys.
            </summary>
        </member>
        <member name="F:Orleans.Hosting.HostDefaults.ApplicationKey">
            <summary>
            The configuration key used to set <see cref="P:Orleans.Hosting.IHostingEnvironment.ApplicationName"/>.
            </summary>
        </member>
        <member name="F:Orleans.Hosting.HostDefaults.EnvironmentKey">
            <summary>
            The configuration key used to set <see cref="P:Orleans.Hosting.IHostingEnvironment.EnvironmentName"/>.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.IHostingEnvironment">
            <summary>
            Provides information about the hosting environment an application is running in.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.IHostingEnvironment.EnvironmentName">
            <summary>
            Gets or sets the name of the environment. The host automatically sets this property to the value of the
            of the "environment" key as specified in configuration.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.IHostingEnvironment.ApplicationName">
            <summary>
            Gets or sets the name of the application. This property is automatically set by the host to the assembly containing
            the application entry point.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.IServiceProviderFactoryAdapter">
            <summary>
            Common interface for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1"/> implementations.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.IServiceProviderFactoryAdapter.BuildServiceProvider(Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a <see cref="T:System.IServiceProvider"/> from an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="context">The host builder context.</param>
            <param name="services">The collection of services.</param>
            <returns>A <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="M:Orleans.Hosting.IServiceProviderFactoryAdapter.ConfigureContainer``1(System.Action{Orleans.Hosting.HostBuilderContext,``0})">
            <summary>
            Adds a container configuration delegate.
            </summary>
            <typeparam name="TContainerBuilder">The container builder type.</typeparam>
            <param name="configureContainer">The container builder configuration delegate.</param>
        </member>
        <member name="T:Orleans.Hosting.ServiceProviderBuilder">
            <summary>
            Functionality for building <see cref="T:System.IServiceProvider"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ServiceProviderBuilder.BuildServiceProvider(Orleans.Hosting.HostBuilderContext)">
            <summary>
            Builds the service provider.
            </summary>
            <returns>The service provider.</returns>
        </member>
        <member name="M:Orleans.Hosting.ServiceProviderBuilder.ConfigureServices(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds a service configuration delegate to the configuration pipeline.
            </summary>
            <param name="configureServices">The service configuration delegate.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ServiceProviderBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> is configured. 
            </summary>
            <param name="factory">The service provider factory.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.ServiceProviderBuilder.ConfigureContainer``1(System.Action{Orleans.Hosting.HostBuilderContext,``0})">
            <summary>
            Adds a container configuration delegate.
            </summary>
            <typeparam name="TContainerBuilder">The container builder type.</typeparam>
            <param name="configureContainer">The container builder configuration delegate.</param>
        </member>
        <member name="T:Orleans.Hosting.ServiceProviderFactoryAdapter`1">
            <summary>
            Adapts an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1"/> into an <see cref="T:Orleans.Hosting.IServiceProviderFactoryAdapter"/>.
            </summary>
            <typeparam name="TContainerBuilder">The container builder type.</typeparam>
        </member>
        <member name="M:Orleans.Hosting.ServiceProviderFactoryAdapter`1.BuildServiceProvider(Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.ServiceProviderFactoryAdapter`1.ConfigureContainer``1(System.Action{Orleans.Hosting.HostBuilderContext,``0})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Hosting.ClientStreamExtensions">
            <summary>
            Configure silo to use persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientStreamExtensions.AddSimpleMessageStreamProvider(Orleans.IClientBuilder,System.String,System.Action{Orleans.Configuration.SimpleMessageStreamProviderOptions})">
            <summary>
            Configure client to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientStreamExtensions.AddSimpleMessageStreamProvider(Orleans.IClientBuilder,System.String,System.Action{Orleans.Configuration.OptionsBuilder{Orleans.Configuration.SimpleMessageStreamProviderOptions}})">
            <summary>
            Configure client to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientStreamExtensions.AddClusterClientSimpleMessageStreamProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Orleans.Configuration.SimpleMessageStreamProviderOptions})">
            <summary>
            Configure client to use simple message stream provider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ClientStreamExtensions.AddClusterClientSimpleMessageStreamProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Orleans.Configuration.OptionsBuilder{Orleans.Configuration.SimpleMessageStreamProviderOptions}})">
            <summary>
            Configure client to use simple message provider
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.GrainReferenceCastHelperMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:Orleans.GrainExtensions.AsWeaklyTypedReference(Orleans.Runtime.IAddressable)"/>.
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.IsAssignableFromMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for checking if one type is assignable from another.
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.GetTypeMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:System.Object.GetType"/>.
            </summary>
        </member>
        <member name="F:Orleans.GrainCasterFactory.GetTypeFromHandleMethodInfo">
            <summary>
            The cached <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/>.
            </summary>
        </member>
        <member name="M:Orleans.GrainCasterFactory.CreateGrainReferenceCaster(System.Type,System.Type)">
            <summary>
            Creates a grain reference caster delegate for the provided grain interface type and concrete grain reference type.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="grainReferenceType">The grain reference implementation type.</param>
            <returns>A grain reference caster delegate.</returns>
        </member>
        <member name="M:Orleans.GrainCasterFactory.EmitCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Emits a call to the specified method.
            </summary>
            <param name="il">The il generator.</param>
            <param name="method">The method to call.</param>
        </member>
        <member name="T:Orleans.GrainFactory">
            <summary>
            Factory for accessing grains.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.casters">
            <summary>
            The mapping between concrete grain interface types and delegate
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.invokers">
            <summary>
            The collection of <see cref="T:Orleans.CodeGeneration.IGrainMethodInvoker"/>s for their corresponding grain interface type.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.typedSystemTargetReferenceCache">
            <summary>
            The cache of typed system target references.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.typeCache">
            <summary>
            The cache of type metadata.
            </summary>
        </member>
        <member name="T:Orleans.GrainFactory.GrainReferenceCaster">
            <summary>
            Casts an <see cref="T:Orleans.Runtime.IAddressable"/> to a concrete <see cref="T:Orleans.Runtime.GrainReference"/> implementation.
            </summary>
            <param name="existingReference">The existing <see cref="T:Orleans.Runtime.IAddressable"/> reference.</param>
            <returns>The concrete <see cref="T:Orleans.Runtime.GrainReference"/> implementation.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.BindGrainReference(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrainFromKeyString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <typeparam name="TGrainInterface">The target grain interface type.</typeparam>
            <param name="grain">The grain reference being cast.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <typeparamref name="TGrainInterface"/>.
            </returns>
        </member>
        <member name="M:Orleans.GrainFactory.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Casts the provided <paramref name="grain"/> to the provided <paramref name="interfaceType"/>.
            </summary>
            <param name="grain">The grain.</param>
            <param name="interfaceType">The resulting interface type.</param>
            <returns>A reference to <paramref name="grain"/> which implements <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.MakeCaster(System.Type)">
            <summary>
            Creates and returns a new grain reference caster.
            </summary>
            <param name="interfaceType">The interface which the result will cast to.</param>
            <returns>A new grain reference caster.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a reference to the specified system target.
            </summary>
            <typeparam name="TGrainInterface">The system target interface.</typeparam>
            <param name="grainId">The id of the target.</param>
            <param name="destination">The destination silo.</param>
            <returns>A reference to the specified system target.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(Orleans.Runtime.GrainId)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain(Orleans.Runtime.GrainId,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.IClientBuilder">
            <summary>
            Functionality for building <see cref="T:Orleans.IClusterClient"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.IClientBuilder.Properties">
            <summary>
            A central location for sharing state between components during the client building process.
            </summary>
        </member>
        <member name="M:Orleans.IClientBuilder.Build">
            <summary>
            Builds the client.
            </summary>
            <remarks>This method may only be called once per builder instance.</remarks>
            <returns>The newly created client.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Set up the configuration for the builder itself. This will be used to initialize the <see cref="T:Orleans.Hosting.IHostingEnvironment"/>
            for use later in the build process. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.ConfigureAppConfiguration(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Orleans.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations./>.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the application.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.ConfigureServices(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that will be used
            to construct the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> for this client is configured. 
            </summary>
            <param name="factory">The service provider factory.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Orleans.IClientBuilder.ConfigureContainer``1(System.Action{``0})">
            <summary>
            Adds a container configuration delegate.
            </summary>
            <typeparam name="TContainerBuilder">The container builder type.</typeparam>
            <param name="configureContainer">The container builder configuration delegate.</param>
        </member>
        <member name="T:Orleans.IClusterClient">
            <summary>
            Client interface for interacting with an Orleans cluster.
            </summary>
        </member>
        <member name="P:Orleans.IClusterClient.IsInitialized">
            <summary>
            Gets a value indicating whether or not this client is initialized.
            </summary>
        </member>
        <member name="P:Orleans.IClusterClient.ServiceProvider">
            <summary>
            Gets the service provider used by this client.
            </summary>
        </member>
        <member name="M:Orleans.IClusterClient.GetStreamProvider(System.String)">
            <summary>
            Returns the <see cref="T:Orleans.Streams.IStreamProvider"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the stream provider.</param>
            <returns>The <see cref="T:Orleans.Streams.IStreamProvider"/> with the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.Connect(System.Func{System.Exception,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Starts the client and connects to the configured cluster.
            </summary>
            <remarks>This method may be called at-most-once per instance.</remarks>
            <param name="retryFilter">
            An optional delegate which determines whether or not the initial connection attempt should be retried.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.Close">
            <summary>
            Stops the client gracefully, disconnecting from the cluster.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.IClusterClient.Abort">
            <summary>
            Aborts the client ungracefully.
            </summary>
        </member>
        <member name="T:Orleans.IClusterConnectionStatusListener">
            <summary>
            Interface for notifying observers that connection to the cluster has been lost.
            </summary>
        </member>
        <member name="M:Orleans.IClusterConnectionStatusListener.NotifyClusterConnectionLost">
            <summary>
            Notifies this client that the connection to the cluster has been lost.
            </summary>
        </member>
        <member name="T:Orleans.IConfigurationValidator">
            <summary>
            Describes a configuration validator which is called during client and silo initialization.
            </summary>
        </member>
        <member name="M:Orleans.IConfigurationValidator.ValidateConfiguration">
            <summary>
            Validates system configuration and throws an exception if configuration is not valid.
            </summary>
        </member>
        <member name="T:Orleans.IInternalClusterClient">
            <summary>
            The internal-facing client interface.
            </summary>
        </member>
        <member name="P:Orleans.IInternalClusterClient.StreamProviderRuntime">
            <summary>
            Gets the client's <see cref="T:Orleans.Streams.IStreamProviderRuntime"/>.
            </summary>
        </member>
        <member name="T:Orleans.IInternalGrainFactory">
            <summary>
            The internal grain factory interface.
            </summary>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.CreateObjectReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Creates a reference to the provided object.
            </summary>
            <typeparam name="TGrainObserverInterface">The interface which interface.</typeparam>
            <param name="obj">The object.</param>
            <returns>A reference to the provided object.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetSystemTarget``1(Orleans.Runtime.GrainId,Orleans.Runtime.SiloAddress)">
            <summary>
            Gets a reference to the specified system target.
            </summary>
            <typeparam name="TGrainInterface">The system target interface.</typeparam>
            <param name="grainId">The id of the target.</param>
            <param name="destination">The destination silo.</param>
            <returns>A reference to the specified system target.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <typeparam name="TGrainInterface">The target grain interface type.</typeparam>
            <param name="grain">The grain reference being cast.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <typeparamref name="TGrainInterface"/>.
            </returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.Cast(Orleans.Runtime.IAddressable,System.Type)">
            <summary>
            Casts the provided <paramref name="grain"/> to the specified interface
            </summary>
            <param name="grain">The grain reference being cast.</param>
            <param name="interfaceType">The target grain interface type.</param>
            <returns>
            A reference to <paramref name="grain"/> which implements <paramref name="interfaceType"/>.
            </returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetGrain``1(Orleans.Runtime.GrainId)">
            <summary>
            Gets a reference to the grain with the provided id.
            </summary>
            <typeparam name="TGrainInterface">The grain reference interface type.</typeparam>
            <param name="grainId">The grain id.</param>
            <returns>A reference to the grain with the provided id.</returns>
        </member>
        <member name="M:Orleans.IInternalGrainFactory.GetGrain(Orleans.Runtime.GrainId,System.String)">
            <summary>
            Gets a reference to the grain with the provided id.
            </summary>
            <param name="grainId">The grain id.</param>
            <param name="genericArguments">The generic type arguments.</param>
            <returns>A reference to the grain with the provided id.</returns>
        </member>
        <member name="T:Orleans.InterfaceToImplementationMappingCache">
            <summary>
            Maintains a map between grain classes and corresponding interface-implementation mappings.
            </summary>
        </member>
        <member name="F:Orleans.InterfaceToImplementationMappingCache.mappings">
            <summary>
            The map from implementation types to interface ids to map of method ids to method infos.
            </summary>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.GetOrCreate(System.Type,System.Int32)">
            <summary>
            Returns a mapping from method id to method info for the provided implementation and interface id.
            </summary>
            <param name="implementationType">The grain type.</param>
            <param name="interfaceId">The interface id.</param>
            <returns>
            A mapping from method id to method info.
            </returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateInterfaceToImplementationMap(System.Type)">
            <summary>
            Maps the interfaces of the provided <paramref name="implementationType"/>.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>The mapped interface.</returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateMapForNonGeneric(System.Type)">
            <summary>
            Creates and returns a map from interface id to map of method id to method info for the provided non-generic type.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>A map from interface id to map of method id to method info for the provided type.</returns>
        </member>
        <member name="M:Orleans.InterfaceToImplementationMappingCache.CreateMapForConstructedGeneric(System.Type)">
            <summary>
            Creates and returns a map from interface id to map of method id to method info for the provided constructed generic type.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>A map from interface id to map of method id to method info for the provided type.</returns>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainDirectory">
            <summary>
            Recursive distributed operations on grain directories.
            Each operation may forward the request to a remote owner, increasing the hopCount.
            
            The methods here can be called remotely (where extended by IRemoteGrainDirectory) or
            locally (where extended by ILocalGrainDirectory)
            </summary>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.RegisterAsync(Orleans.Runtime.ActivationAddress,System.Boolean,System.Int32)">
            <summary>
            Record a new grain activation by adding it to the directory.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the new activation.</param>
            <param name="singleActivation">If true, use single-activation mode: 
            If there is already an activation registered for this grain, then the new activation will
            not be registered and the address of the existing activation will be returned.
            Otherwise, the passed-in address will be returned.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>The registered address and the version associated with this directory mapping.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.UnregisterAsync(Orleans.Runtime.ActivationAddress,Orleans.GrainDirectory.UnregistrationCause,System.Int32)">
            <summary>
            Removes the record for an existing activation from the directory service.
            This is used when an activation is being deleted.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to remove.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <param name="cause">The reason for unregistration</param>
            <returns>An acknowledgement that the unregistration has completed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.UnregisterManyAsync(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},Orleans.GrainDirectory.UnregistrationCause,System.Int32)">
            <summary>
            Unregister a batch of addresses at once
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="addresses"></param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <param name="cause">The reason for unregistration</param>
            <returns>An acknowledgement that the unregistration has completed.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.DeleteGrainAsync(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Removes all directory information about a grain.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="grainId">The ID of the grain.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>An acknowledgement that the deletion has completed.
            It is safe to ignore this result.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainDirectory.LookupAsync(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Fetches complete directory information for a grain.
            If there is no local information, then this method will query the appropriate remote directory node.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="grainId">The ID of the grain to look up.</param>
            <param name="hopCount">Counts recursion depth across silos</param>
            <returns>A list of all known activations of the grain, and the e-tag.</returns>
        </member>
        <member name="T:Orleans.GrainDirectory.UnregistrationCause">
            <summary>
            Indicates the reason for removing activations from the directory.
            This influences the conditions that are applied when determining whether or not to remove an entry.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.Force">
            <summary>
            Remove the directory entry forcefully, without any conditions
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.CacheInvalidation">
            <summary>
            Remove the directory entry only if it points to an activation in a different cluster
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.UnregistrationCause.NonexistentActivation">
            <summary>
            Remove the directory entry only if it is not too fresh (to avoid races on new registrations)
            </summary>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainRegistrar">
            <summary>
            A grain registrar takes responsibility of coordinating the registration of a grains,
            possibly involving multiple clusters. 
            The grain registrar is called only on the silo that is the owner for that grain.
            </summary>
        </member>
        <member name="P:Orleans.GrainDirectory.IGrainRegistrar.IsSynchronous">
            <summary>
            Indicates whether this registrar can be called synchronously
            </summary>
            <returns>true if synchronous methods should be used, false if asynchronous methods should be used</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.Register(Orleans.Runtime.ActivationAddress,System.Boolean)">
            <summary>
            Registers a new activation with the directory service, synchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to register.</param>
            <param name="singleActivation">If true, use single-activation registration</param>
            <returns>The address registered for the grain's single activation.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.RegisterAsync(Orleans.Runtime.ActivationAddress,System.Boolean)">
            <summary>
            Registers a new activation with the directory service, asynchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">The address of the activation to register.</param>
            <param name="singleActivation">If true, use single-activation registration</param>
            <returns>The address registered for the grain's single activation.</returns>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.Unregister(Orleans.Runtime.ActivationAddress,Orleans.GrainDirectory.UnregistrationCause)">
            <summary>
            Removes the given activation registration, synchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="address">the activation to unregister</param>
            <param name="cause">The reason for unregistration</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.InvalidateCache(Orleans.Runtime.ActivationAddress)">
            <summary>
            Invalidates registrations that are caches, i.e. point to activations in other clusters
            </summary>
            <param name="address">the remote activation to remove from the cache</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.UnregisterAsync(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},Orleans.GrainDirectory.UnregistrationCause)">
            <summary>
            Removes the given activation registrations, asynchronously.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="addresses">the activations to unregister</param>
            <param name="cause">The reason for unregistration</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.Delete(Orleans.Runtime.GrainId)">
            <summary>
            Deletes all registrations for a grain, synchronously
            </summary>
            <param name="gid">The id of the grain</param>
        </member>
        <member name="M:Orleans.GrainDirectory.IGrainRegistrar.DeleteAsync(Orleans.Runtime.GrainId)">
            <summary>
            Deletes all registrations for a grain, asynchronously
            </summary>
            <param name="gid">The id of the grain</param>
        </member>
        <member name="T:Orleans.GrainDirectory.IGrainRegistrar`1">
            <summary>
            Interface for <see cref="T:Orleans.GrainDirectory.IGrainRegistrar"/> implementations which implement a given registration strategy.
            </summary>
            <typeparam name="TStrategy">The registration strategy.</typeparam>
        </member>
        <member name="T:Orleans.GrainDirectory.GrainDirectoryEntryStatus">
            <summary>
            Status of a directory entry with respect to multi-cluster registration
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Invalid">
            <summary>
            Used as a return value, indicating no registration present in directory.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.ClusterLocal">
            <summary>
            Used for normal grains that have no multi-cluster semantics.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Owned">
            <summary>
            Registration that is owned by this cluster.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Doubtful">
            <summary>
            Failed to contact one or more clusters while registering, so may be a duplicate.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.Cached">
            <summary>
            Cached reference to a registration owned by a remote cluster.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.RequestedOwnership">
            <summary>
            The cluster is in the process of checking remote clusters for existing registrations.
            </summary>
        </member>
        <member name="F:Orleans.GrainDirectory.GrainDirectoryEntryStatus.RaceLoser">
            <summary>
            The cluster lost a race condition.
            </summary>
        </member>
        <member name="T:Orleans.Interner`2">
            <summary>
            Provide a weakly-referenced cache of interned objects.
            Interner is used to optimise garbage collection.
            We use it to store objects that are allocated frequently and may have long timelife. 
            This means those object may quickly fill gen 2 and cause frequent costly full heap collections.
            Specificaly, a message that arrives to a silo and all the headers and ids inside it may stay alive long enough to reach gen 2.
            Therefore, we store all ids in interner to re-use their memory accros different messages.
            </summary>
            <typeparam name="K">Type of objects to be used for intern keys</typeparam>
            <typeparam name="T">Type of objects to be interned / cached</typeparam>
        </member>
        <member name="M:Orleans.Interner`2.FindOrCreate(`0,System.Func{`0,`1})">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Interner`2.TryFind(`0,`1@)">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The existing value if the key is found</param>
        </member>
        <member name="M:Orleans.Interner`2.Intern(`0,`1)">
            <summary>
            Find cached copy of object with specified key, otherwise store the supplied one. 
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The new object to store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or justed passed in</returns>
        </member>
        <member name="T:Orleans.Streams.QueueId">
            <summary>
            Identifier of a durable queue.
            Used by Orlens streaming extensions.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamId">
            <summary>
            Identifier of an Orleans virtual stream.
            </summary>
        </member>
        <member name="T:Orleans.Streams.ImplicitConsumerGrainExtensions">
            <summary>
            Extension methods for grains implicitly subscribed to streams.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitConsumerGrainExtensions.GetImplicitStreamIdentity(Orleans.IGrainWithGuidCompoundKey)">
            <summary>
            Constructs <see cref="T:Orleans.Streams.StreamIdentity"/> of the stream that the grain is implicitly subscribed to.
            </summary>
            <param name="grain">The implicitly subscribed grain.</param>
            <returns>The stream identity (key + namespace).</returns>
        </member>
        <member name="T:Orleans.Streams.StreamIdentity">
            <summary>
            Stream identity contains the public stream information use to uniquely identify a stream.
            Stream identities are only unique per stream provider.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamIdentity.Guid">
            <summary>
            Stream primary key guid.
            </summary>
        </member>
        <member name="P:Orleans.Streams.StreamIdentity.Namespace">
            <summary>
            Stream namespace.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamControl">
            <summary>
            Stream control interface to allow stream runtime to perform management operations on streams 
            without needing to worry about concrete generic types used by this stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamControl.Cleanup(System.Boolean,System.Boolean)">
            <summary>
            Perform cleanup functions for this stream.
            </summary>
            <returns>Completion promise for the cleanup operstions for this stream.</returns>
        </member>
        <member name="T:Orleans.Streams.StreamConsumerExtension">
            <summary>
            The extesion multiplexes all stream related messages to this grain between different streams and their stream observers.
            
            On the silo, we have one extension object per activation and this extesion multiplexes all streams on this activation 
                (streams of all types and ids: different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extesion for every StreamConsumer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamDirectory">
            <summary>
            Stores all streams associated with a specific silo
            </summary>
        </member>
        <member name="T:Orleans.Streams.IDeploymentConfiguration">
            <summary>
            Interface for accessing the deployment configuration.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IDeploymentConfiguration.GetAllSiloNames">
            <summary>
            Get the silo instance names for all configured silos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called once all measures to deliver an event to a consumer have been exhausted.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnSubscriptionFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when establishing a subsription failed.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalancer">
            <summary>
            The stream queue balancer is responsible for load balancing queues across all other related queue balancers.  It
            notifies any listeners (<code>IStreamQueueBalanceListener</code>) of changes to the distribution of queues.
            Method GetMyQueues, SubscribeToQueueDistributionChangeEvents, and UnSubscribeFromQueueDistributionChangeEvents will 
            likely be called in the IStreamQueueBalanceListener's thread so they need to be thread safe
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.Initialize(Orleans.Streams.IStreamQueueMapper)">
            <summary>
            Initialize this instance
            </summary>
            <param name="queueMapper"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.GetMyQueues">
            <summary>
            Retrieves the latest queue distribution for this balancer.
            </summary>
            <returns>Queue allocated to this balancer.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.SubscribeToQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Subscribe to receive queue distribution change notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>Bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.UnSubscribeFromQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Unsubscribe from receiving queue distribution notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>Bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalanceListener">
            <summary>
            The stream queue balancer listener receives notifications from a stream queue balancer (<code>IStreamQueueBalancer</code>)
            indicating that the balance of queues has changed.
            It should be implemented by components interested in stream queue load balancing.
            When change notification is received, listener should request updated list of queues from the queue balancer.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalanceListener.QueueDistributionChangeNotification">
            <summary>
            Receive notifications about adapter queue responsibility changes. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when an event could not be delivered to a consumer, after exhausting retry attempts.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamEventDeliveryFailureException">
            <summary>
            This exception indicates that a stream event was not successfully delivered to the consumer.
            </summary>
        </member>
        <member name="T:Orleans.Streams.FilterPredicateWrapperData">
            <summary>
            This class is a [Serializable] function pointer to a static predicate method, used for stream filtering.
            The predicate function / lamda is not directly serialized, only the class / method info details required to reconstruct the function reference on the other side.
            Predicate filter functions must be staic (non-abstract) methods, so full class name and method name are sufficient info to rehydrate.
            </summary>
        </member>
        <member name="M:Orleans.Streams.FilterPredicateWrapperData.CheckFilterPredicateFunc(Orleans.Streams.StreamFilterPredicate)">
            <summary>
            Check that the user-supplied stream predicate function is valid.
            Stream predicate functions must be static and not abstract.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamFilterPredicateWrapper">
            <summary>
            Filter predicate for streams. 
            Classes implementing this interface MUST be [Serializable]
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamFilterPredicateWrapper.ShouldReceive(Orleans.Streams.IStreamIdentity,System.Object,System.Object)">
            <summary>
            Should this item be delivered to the intended receiver?
            </summary>
            <param name="stream"></param>
            <param name="filterData"></param>
            <param name="item">Item sent through the stream.</param>
            <returns>Return <c>true</c> if this item should be delivered to the intended recipient.</returns>
        </member>
        <member name="T:Orleans.Streams.OrFilter">
            <summary>
            This class is a [Serializable] holder for a logical-or composite predicate function.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.ExecutingEntityIdentity">
            <summary>
            Retrieves the opaque identity of currently executing grain or client object. 
            </summary>
            <remarks>Exposed for logging purposes.</remarks>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.GetStreamDirectory">
            <summary>
            Returns the stream directory.
            </summary>
            <returns>The stream directory.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.PubSub(Orleans.Streams.StreamPubSubType)">
            <summary>
            A Pub Sub runtime interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.GetConsistentRingProvider(System.Int32,System.Int32)">
            <summary>A consistent ring interface.</summary>
            <param name="mySubRangeIndex">Index of the silo in the ring.</param>
            <param name="numSubRanges">Total number of sub ranges within this silo range.</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.ISiloSideStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.ISiloSideStreamProviderRuntime.InitializePullingAgents(System.String,Orleans.Streams.IQueueAdapterFactory,Orleans.Streams.IQueueAdapter)">
            <summary>Start the pulling agents for a given persistent stream provider.</summary>
        </member>
        <member name="T:Orleans.Streams.ProviderStartException">
            <summary>
            Exception thrown whenever a provider has failed to be started.
            </summary>
        </member>
        <member name="T:Orleans.Streams.FaultedSubscriptionException">
            <summary>
            This exception indicates that an error has occured on a stream subscription that has placed the subscription into
             a faulted state.  Work on faulted subscriptions should be abandoned.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.InitImplicitStreamSubscribers(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Initializes any implicit stream subscriptions specified for a grain class type. If the grain class specified does not have any associated namespaces, then nothing is done.</summary>
            <param name="grainClasses">A grain class type.</param>
            <exception cref="T:System.ArgumentException">
            Duplicate specification of namespace "...".
            </exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetImplicitSubscribers(Orleans.Streams.StreamId,Orleans.IInternalGrainFactory)">
            <summary>
            Retrieve a map of implicit subscriptionsIds to implicit subscribers, given a stream ID. This method throws an exception if there's no namespace associated with the stream ID.
            </summary>
            <param name="streamId">A stream ID.</param>
            <param name="grainFactory">The grain factory used to get consumer references.</param>
            <returns>A set of references to implicitly subscribed grains. They are expected to support the streaming consumer extension.</returns>
            <exception cref="T:System.ArgumentException">The stream ID doesn't have an associated namespace.</exception>
            <exception cref="T:System.InvalidOperationException">Internal invariant violation.</exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.IsImplicitSubscriber(Orleans.Runtime.GrainId,Orleans.Streams.StreamId)">
            <summary>
            Determines whether the specified grain is an implicit subscriber of a given stream.
            </summary>
            <param name="grainId">The grain identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <returns>true if the grain id describes an implicit subscriber of the stream described by the stream id.</returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.TryGetImplicitSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Streams.StreamId,System.Guid@)">
            <summary>
            Try to get the implicit subscriptionId.
            If an implicit subscription exists, return a subscription Id that is unique per grain type, grainId, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <param name="subscriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Streams.StreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(System.Int32,Orleans.Streams.StreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
            <param name="grainIdTypeCode"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.FindImplicitSubscriberTypeCodes(System.String)">
            <summary>
            Finds all implicit subscribed for the given stream namespace.
            </summary>
            <param name="streamNamespace">The stream namespace to find subscribers too.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeConsumerReference(Orleans.IInternalGrainFactory,Orleans.Streams.StreamId,System.Int32)">
            <summary>
            Create a reference to a grain that we expect to support the stream consumer extension.
            </summary>
            <param name="grainFactory">The grain factory used to get consumer references.</param>
            <param name="streamId">The stream ID to use for the grain ID construction.</param>
            <param name="implTypeCode">The type code of the grain interface.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetPredicatesFromAttributes(System.Type)">
            <summary>
            Collects the namespace predicates associated with a grain class type through the use of
            <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>.
            </summary>
            <param name="grainClass">A grain class type that might have
            attributes of type <see cref="T:Orleans.ImplicitStreamSubscriptionAttribute"/>  associated with it.</param>
            <returns>The list of stream namespace predicates.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="grainClass"/> does not describe a grain class.</exception>
        </member>
        <member name="T:Orleans.Streams.SubscriptionMarker">
            <summary>
            Mark a subscriptionId as either an implicit subscription Id, or a explicit subscription Id.
            high bit of last byte in guild is the subscription type flag.
            1: implicit subscription
            0: explicit subscription
            </summary>
        </member>
        <member name="T:Orleans.Streams.DataNotAvailableException">
            <summary>
            Exception indicates that the requested data is not available.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IBatchContainer">
            <summary>
            Each queue message is allowed to be a heterogeneous  ordered set of events.  IBatchContainer contains these events and allows users to query the batch for a specific type of event.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamGuid">
            <summary>
            Stream identifier for the stream this batch is part of.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamNamespace">
            <summary>
            Stream namespace for the stream this batch is part of.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.GetEvents``1">
            <summary>
            Gets events of a specific type from the batch.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.SequenceToken">
            <summary>
            Stream Sequence Token for the start of this batch.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.ImportRequestContext">
            <summary>
            Gives an opportunity to IBatchContainer to set any data in the RequestContext before this IBatchContainer is sent to consumers.
            It can be the data that was set at the time event was generated and enqueued into the persistent provider or any other data.
            </summary>
            <returns>True if the RequestContext was indeed modified, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.ShouldDeliver(Orleans.Streams.IStreamIdentity,System.Object,Orleans.Streams.StreamFilterPredicate)">
            <summary>
            Decide whether this batch should be sent to the specified target.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IConsistentRingStreamQueueMapper">
            <summary>
            The stream queue mapper is responsible for mapping ring ranges from the load balancing ring provider to stream queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapter">
            <summary>
            Stream queue storage adapter.  This is an abstraction layer that hides the implementation details of the underlying queuing system.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Name">
            <summary>
            Name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.QueueMessageBatchAsync``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="streamGuid"></param>
            <param name="streamNamespace"></param>
            <param name="events"></param>
            <param name="token"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a quere receiver for the specificed queueId
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Direction">
            <summary>
            Direction of this queue adapter: Read, Write or ReadWrite.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="M:Orleans.Streams.QueueAdapterExtensions.QueueMessageAsync``1(Orleans.Streams.IQueueAdapter,System.Guid,System.String,``0,Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Writes a set of events to the queue as a single batch associated with the provided streamId.</summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterCache.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="queueId"></param>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterFactory">
            <summary>
            Adapter factory.  This should create an adapter from the stream provider configuration
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.CreateAdapter">
            <summary>
            Create queue adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetQueueAdapterCache">
            <summary>
            Create queue message cache adapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetStreamQueueMapper">
            <summary>
            Create queue mapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterFactory.GetDeliveryFailureHandler(Orleans.Streams.QueueId)">
            <summary>
            Aquire delivery failure handler for a queue
            </summary>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterReceiver">
            <summary>
            Receives batches of messages from a single partition of a message queue.  
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Initialize(System.TimeSpan)">
            <summary>
            Initialize this receiver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.GetQueueMessagesAsync(System.Int32)">
            <summary>
            Retrieves batches from a message queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.MessagesDeliveredAsync(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Notifies the adapter receiver that the mesages were delivered to all consumers,
            so the receiver can take an appropriate action (e.g., delete the messages from a message queue).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Shutdown(System.TimeSpan)">
            <summary>
            Receiver is no longer used.  Shutdown and clean up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Add messages to the cache
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.TryPurgeFromCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer}@)">
            <summary>
            Ask the cache if it has items that can be purged from the cache 
            (so that they can be subsequently released them the underlying queue).
            </summary>
            <param name="purgedItems"></param>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.GetCacheCursor(Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retreave messages from the
              cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamIdentity"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.IsUnderPressure">
            <summary>
            Returns true if this cache is under pressure.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IQueueCacheCursor">
            <summary>
            Enumerates the messages in a stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.GetCurrent(System.Exception@)">
            <summary>
            Get the current value.
            </summary>
            <param name="exception"></param>
            <returns>
            Returns the current batch container.
            If null then the stream has completed or there was a stream error.  
            If there was a stream error, an error exception will be provided in the output.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.MoveNext">
            <summary>
            Move to next message in the stream.
            If it returns false, there are no more messages.  The enumerator is still
             valid howerver and can be called again when more data has come in on this
             stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.Refresh(Orleans.Streams.StreamSequenceToken)">
            <summary>
            Refresh that cache cursor. Called when new data is added into a cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.RecordDeliveryFailure">
            <summary>
            Record that delivery of the current event has failed
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueFlowController.GetMaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueMapper">
            <summary>
            The stream queue mapper returns a list of all queues and is also responsible for mapping streams to queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="T:Orleans.Streams.QueueCacheMissException">
            <summary>
            Exception indicates that the requested message is not in the queue cache.
            </summary>
        </member>
        <member name="T:Orleans.LifecycleSubject">
            <summary>
            Observable lifecycle
            Notes:
            - Single use, does not support multiple start/stop cycles.
            - Once started, no other observers can be subscribed.
            - OnStart starts stages in order until first failure or cancelation.
            - OnStop stops states in reverse order starting from highest started stage.
            - OnStop stops all stages regardless of errors even if canceled canceled.
            </summary>
        </member>
        <member name="T:Orleans.ServiceLifecycleStage">
            <summary>
            Lifecycle stages of an orlean service.  Cluster Client, or Silo
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.First">
            <summary>
            First stage in service's lifecycle
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeInitialize">
            <summary>
            Initialize runtime
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeServices">
            <summary>
            Start runtime services
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeStorageServices">
            <summary>
            Initialize runtime storage
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.RuntimeGrainServices">
            <summary>
            Start runtime services
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.ApplicationServices">
            <summary>
            Start application layer services
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.BecomeActive">
            <summary>
            Service will be active after this step.
            It should only be used by the memebrship oracle 
            and the gateway, no other component should run
            at this stage
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.Active">
            <summary>
            Service is active.
            </summary>
        </member>
        <member name="F:Orleans.ServiceLifecycleStage.Last">
            <summary>
            Last stage in service's lifecycle
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.IConnectionIssueListener">
            <summary>
            An interface that is implemented by log-consistent grains using virtual protected methods
            that can be overridden by users, in order to monitor the connection issues.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.IConnectionIssueListener.OnConnectionIssue(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            Called when running into some sort of connection trouble.
            The called code can modify the retry delay if desired, to change the default.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.IConnectionIssueListener.OnConnectionIssueResolved(Orleans.LogConsistency.ConnectionIssue)">
            <summary>
            Called when a previously reported connection issue has been resolved.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogConsistencyDiagnostics">
            <summary>
            Interface for diagnostics.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyDiagnostics.UnresolvedConnectionIssues">
            <summary>Gets a list of all currently unresolved connection issues.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.EnableStatsCollection">
            <summary>Turns on the statistics collection for this log-consistent grain.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.DisableStatsCollection">
            <summary>Turns off the statistics collection for this log-consistent grain.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyDiagnostics.GetStats">
            <summary>Gets the collected statistics for this log-consistent grain.</summary>
        </member>
        <member name="T:Orleans.LogConsistency.LogConsistencyStatistics">
            <summary>
            A collection of statistics for grains using log-consistency. See <see cref="T:Orleans.LogConsistency.LogConsistentGrain`1"/>
            </summary>
        </member>
        <member name="F:Orleans.LogConsistency.LogConsistencyStatistics.EventCounters">
            <summary>
            A map from event names to event counts
            </summary>
        </member>
        <member name="F:Orleans.LogConsistency.LogConsistencyStatistics.StabilizationLatenciesInMsecs">
            <summary>
            A list of all measured stabilization latencies
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogConsistencyProtocolServices">
            <summary>
            Functionality for use by log view adaptors that use custom consistency or replication protocols.
            Abstracts communication between replicas of the log-consistent grain in different clusters.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.SendMessage(Orleans.MultiCluster.ILogConsistencyProtocolMessage,System.String)">
            <summary>
            Send a message to a remote cluster.
            </summary>
            <param name="payload">the message</param>
            <param name="clusterId">the destination cluster id</param>
            <returns></returns>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.GrainReference">
            <summary>
            The untyped reference for this grain.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.RegistrationStrategy">
            <summary>
            The multicluster registration strategy for this grain.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.MultiClusterEnabled">
            <summary>
            Whether this cluster is running in a multi-cluster network.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.MyClusterId">
            <summary>
            The id of this cluster. Returns "I" if no multi-cluster network is present.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.MultiClusterConfiguration">
            <summary>
            The current multicluster configuration of this silo 
            (as injected by the administrator) or null if none.
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogConsistencyProtocolServices.ActiveClusters">
            <summary>
            List of all clusters that currently appear to have at least one active
            gateway reporting to the multi-cluster network. 
            There are no guarantees that this membership view is complete or consistent.
            If there is no multi-cluster network, returns a list containing the single element "I".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.ProtocolError(System.String,System.Boolean)">
            <summary>
            Log an error that occurred in a log-consistency protocol.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.CaughtException(System.String,System.Exception)">
            <summary>
            Log an exception that was caught in the log-consistency protocol.
            </summary> 
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.CaughtUserCodeException(System.String,System.String,System.Exception)">
            <summary>
            Log an exception that occurred in user code, for some callback
            </summary>
            <param name="callback">The name of the callback</param>
            <param name="where">The context from which the callback was called</param>
            <param name="e">The caught exception</param>
        </member>
        <member name="M:Orleans.LogConsistency.ILogConsistencyProtocolServices.Log(Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[])">
            <summary> Output the specified message at the specified log level. </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ProtocolTransportException">
            <summary>
            Exception thrown by protocol messaging layer.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewAdaptor`2">
             <summary>
             A log view adaptor is the storage interface for <see cref="T:Orleans.LogConsistency.LogConsistentGrain`1"/>, whose state is defined as a log view. 
            <para>
             There is one adaptor per grain, which is installed by <see cref="T:Orleans.LogConsistency.ILogViewAdaptorFactory"/> when the grain is activated.
            </para>
             </summary>
             <typeparam name="TLogView"> Type for the log view </typeparam>
             <typeparam name="TLogEntry"> Type for the log entry </typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.PreOnActivate">
            <summary>Called during activation, right before the user-defined <see cref="M:Orleans.Grain.OnActivateAsync"/>.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.PostOnActivate">
            <summary>Called during activation, right after the user-defined <see cref="M:Orleans.Grain.OnActivateAsync"/>..</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.PostOnDeactivate">
            <summary>Called during deactivation, right after the user-defined <see cref="M:Orleans.Grain.OnDeactivateAsync"/>.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.OnProtocolMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>Called when a grain receives a message from a remote instance.</summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptor`2.OnMultiClusterConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>Called after the silo receives a new multi-cluster configuration.</summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewRead`2">
            <summary>
            Interface for reading the log view.
            </summary>
            <typeparam name="TView">The type of the view (state of the grain).</typeparam>
            <typeparam name="TLogEntry">The type of log entries.</typeparam>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.TentativeView">
            <summary>
            Local, tentative view of the log (reflecting both confirmed and unconfirmed entries)
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.ConfirmedView">
            <summary>
            Confirmed view of the log (reflecting only confirmed entries)
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.ConfirmedVersion">
            <summary>
            The length of the confirmed prefix of the log
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewRead`2.UnconfirmedSuffix">
            <summary>
            A list of the submitted entries that do not yet appear in the confirmed prefix.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewRead`2.RetrieveLogSegment(System.Int32,System.Int32)">
            <summary>
            Attempt to retrieve a segment of the log, possibly from storage. Throws <see cref="T:System.NotSupportedException"/> if
            the log cannot be read, which depends on the providers used and how they are configured.
            </summary>
            <param name="fromVersion">the start position </param>
            <param name="toVersion">the end position</param>
            <returns>a </returns>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewUpdate`1">
            <summary>
            Interface for updating the log.
            </summary>
            <typeparam name="TLogEntry">The type of log entries.</typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.Submit(`0)">
            <summary>
            Submit a single log entry to be appended to the global log,
            either at the current or at any later position.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.SubmitRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Submit a range of log entries to be appended atomically to the global log,
            either at the current or at any later position.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.TryAppend(`0)">
            <summary>
            Try to append a single log entry at the current position of the log.
            </summary>
            <returns>true if the entry was appended successfully, or false 
            if there was a concurrency conflict (i.e. some other entries were previously appended).
            </returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.TryAppendRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Try to append a range of log entries atomically at the current position of the log.
            </summary>
            <returns>true if the entries were appended successfully, or false 
            if there was a concurrency conflict (i.e. some other entries were previously appended).
            </returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.ConfirmSubmittedEntries">
             <summary>
             Confirm all submitted entries.
            <para>Waits until all previously submitted entries appear in the confirmed prefix of the log.</para>
             </summary>
             <returns>A task that completes after all entries are confirmed.</returns>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewUpdate`1.Synchronize">
             <summary>
             Get the latest log view and confirm all submitted entries.
            <para>Waits until all previously submitted entries appear in the confirmed prefix of the log, and forces a refresh of the confirmed prefix.</para>
             </summary>
             <returns>A task that completes after getting the latest version and confirming all entries.</returns>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewAdaptorFactory">
            <summary>
            Interface to be implemented for a log-view adaptor factory
            </summary>
        </member>
        <member name="P:Orleans.LogConsistency.ILogViewAdaptorFactory.UsesStorageProvider">
            <summary> Returns true if a storage provider is required for constructing adaptors. </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptorFactory.MakeLogViewAdaptor``2(Orleans.LogConsistency.ILogViewAdaptorHost{``0,``1},``0,System.String,Orleans.Storage.IGrainStorage,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            Construct a <see cref="T:Orleans.LogConsistency.ILogViewAdaptor`2"/> to be installed in the given host grain.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.ILogViewAdaptorHost`2">
            <summary>
            Interface implemented by all grains which use log-view consistency
            It gives the log view adaptor access to grain-specific information and callbacks.
            </summary>
            <typeparam name="TLogView">type of the log view</typeparam>
            <typeparam name="TLogEntry">type of log entries</typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptorHost`2.UpdateView(`0,`1)">
            <summary>
            Implementation of view transitions. 
            Any exceptions thrown will be caught and logged as a warning./>.
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.ILogViewAdaptorHost`2.OnViewChanged(System.Boolean,System.Boolean)">
            <summary>
            Notifies the host grain about state changes. 
            Called by <see cref="T:Orleans.LogConsistency.ILogViewAdaptor`2"/> whenever the tentative or confirmed state changes.
            Implementations may vary as to whether and how much they batch change notifications.
            Any exceptions thrown will be caught and logged as a warning./>.
            </summary>
        </member>
        <member name="T:Orleans.LogConsistency.LogConsistentGrain`1">
            <summary>
            Base class for all grains that use log-consistency for managing  the state.
            It is the equivalent of <see cref="T:Orleans.Grain`1"/> for grains using log-consistency.
            (SiloAssemblyLoader uses it to extract type)
            </summary>
            <typeparam name="TView">The type of the view</typeparam>
        </member>
        <member name="M:Orleans.LogConsistency.LogConsistentGrain`1.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime)">
            <summary>
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity, IGrainRuntime and State with test doubles (mocks/stubs).
            </summary>
        </member>
        <member name="M:Orleans.LogConsistency.LogConsistentGrain`1.InstallAdaptor(Orleans.LogConsistency.ILogViewAdaptorFactory,System.Object,System.String,Orleans.Storage.IGrainStorage,Orleans.LogConsistency.ILogConsistencyProtocolServices)">
            <summary>
            called right after grain construction to install the log view adaptor 
            </summary>
            <param name="factory"> The adaptor factory to use </param>
            <param name="state"> The initial state of the view </param>
            <param name="grainTypeName"> The type name of the grain </param>
            <param name="grainStorage"> The grain storage, if needed </param>
            <param name="services"> Protocol services </param>
        </member>
        <member name="P:Orleans.LogConsistency.LogConsistentGrain`1.DefaultAdaptorFactory">
            <summary>
            Gets the default adaptor factory to use, or null if there is no default 
            (in which case user MUST configure a consistency provider)
            </summary>
        </member>
        <member name="T:Orleans.ErrorCode">
            <summary>
            The set of error types used by the Orleans runtime libraries for logging errors.
            </summary>
        </member>
        <member name="T:Orleans.Logging.FileLoggingOutput">
            <summary>
            The log output which all <see cref="T:Orleans.Logging.FileLogger"/> share to log messages to 
            </summary>
        </member>
        <member name="M:Orleans.Logging.FileLoggingOutput.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Orleans.Logging.FileLoggingOutput.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String},System.String)">
            <summary>
            Log message for <see cref="T:Orleans.Logging.FileLogger"/> instance whose category is <paramref name="category"/>
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
            <param name="category"></param>
        </member>
        <member name="M:Orleans.Logging.FileLoggingOutput.Close">
            <summary>
            Close the output
            </summary>
        </member>
        <member name="T:Orleans.Logging.FileLogger">
            <summary>
            File logger, which logs messages to a file.
            </summary>
        </member>
        <member name="M:Orleans.Logging.FileLogger.#ctor(Orleans.Logging.FileLoggingOutput,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orleans.Logging.FileLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Logging.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Logging.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Logging.FileLoggerProvider">
            <summary>
            FileLoggerProvider implemets ILoggerProvider, creates <see cref="T:Orleans.Logging.FileLogger"/>
            </summary>
        </member>
        <member name="T:Orleans.Logging.FileLoggerProviderExtensions">
            <summary>
            Exentions methods to configure ILoggingBuilder with FileLoggerProvider
            </summary>
        </member>
        <member name="M:Orleans.Logging.FileLoggerProviderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)">
            <summary>
            Add <see cref="T:Orleans.Logging.FileLoggerProvider"/> to <paramref name="builder"/>
            </summary>
            <param name="builder">logging builder</param>
            <param name="filePathName">log file path</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Messaging.ClientMessageCenter.Disconnect">
            <summary>
            For testing use only
            </summary>
        </member>
        <member name="M:Orleans.Messaging.ClientMessageCenter.Reconnect">
            <summary>
            For testing use only.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayClientReceiver">
            <summary>
            The Receiver class is used by the GatewayConnection to receive messages. It runs its own thread, but it performs all i/o operations synchronously.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayConnection">
            <summary>
            The GatewayConnection class does double duty as both the manager of the connection itself (the socket) and the sender of messages
            to the gateway. It uses a single instance of the Receiver class to handle messages from the gateway.
            
            Note that both sends and receives are synchronous.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayManager">
             <summary>
             The GatewayManager class holds the list of known gateways, as well as maintaining the list of "dead" gateways.
            
             The known list can come from one of two places: the full list may appear in the client configuration object, or
             the config object may contain an IGatewayListProvider delegate. If both appear, then the delegate takes priority.
             </summary>
        </member>
        <member name="M:Orleans.Messaging.GatewayManager.GetLiveGateway">
             <summary>
             Selects a gateway to use for a new bucket.
            
             Note that if a list provider delegate was given, the delegate is invoked every time this method is called.
             This method performs caching to avoid hammering the ultimate data source.
            
             This implementation does a simple round robin selection. It assumes that the gateway list from the provider
             is in the same order every time.
             </summary>
             <returns></returns>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListProvider">
            <summary>
            Interface that provides Orleans gateways information.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.InitializeGatewayListProvider">
            <summary>
            Initializes the provider, will be called before all other methods
            </summary>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.GetGateways">
            <summary>
            Returns the list of gateways (silos) that can be used by a client to connect to Orleans cluster.
            The Uri is in the form of: "gwy.tcp://IP:port/Generation". See Utils.ToGatewayUri and Utils.ToSiloAddress for more details about Uri format.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.MaxStaleness">
            <summary>
            Specifies how often this IGatewayListProvider is refreshed, to have a bound on max staleness of its returned information.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.IsUpdatable">
            <summary>
            Specifies whether this IGatewayListProvider ever refreshes its returned information, or always returns the same gw list.
            (currently only the static config based StaticGatewayListProvider is not updatable. All others are.)
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListListener">
            <summary>
            A listener interface for optional GatewayList notifications provided by the IGatewayListObservable interface.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListObservable">
            <summary>
            An optional interface that GatewayListProvider may implement if it support out of band gw update notifications.
            By default GatewayListProvider should suppport pull based queries (GetGateways).
            Optionally, some GatewayListProviders may be able to notify a listener if an updated gw information is available.
            This is optional and not required.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.ILegacyGatewayListProviderConfigurator">
            <summary>
            LegacyGatewayProviderConfigurator configure GatewayListProvider in the legacy way, which is from ClientConfiguration
            </summary>
        </member>
        <member name="T:Orleans.Messaging.ClientConfigurationReader">
            <summary>
            Wrapper for legacy client config.  Should not be used for any new developent, only adapting legacy systems.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.SocketExtensions.EnableFastpath(System.Net.Sockets.Socket)">
            <summary>
            Enables TCP Loopback Fast Path on a socket.
            See https://blogs.technet.microsoft.com/wincat/2012/12/05/fast-tcp-loopback-performance-and-low-latency-with-windows-server-2012-tcp-loopback-fast-path/
            for more information.
            </summary>
            <param name="socket">The socket for which FastPath should be enabled.</param>
        </member>
        <member name="T:Orleans.MultiCluster.GatewayStatus">
            <summary>
            Multicluster Gateways are either active (silo is a gateway), 
            or Inactive (silo is not a gateway)
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.IMultiClusterGatewayInfo">
            <summary>
            Information about multicluster gateways
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.ILogConsistencyProtocolParticipant">
            <summary>
            Grain interface for grains that participate in multi-cluster log-consistency protocols.
            </summary>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.OnProtocolMessageReceived(Orleans.MultiCluster.ILogConsistencyProtocolMessage)">
            <summary>
            Called when a message is received from another cluster.
            This MUST interleave with other calls to avoid deadlocks.
            </summary>
            <param name="payload">the protocol message to be delivered</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.OnMultiClusterConfigurationChange(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Called when a configuration change notification is received.
            </summary>
            <param name="next">the next multi-cluster configuration</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.PreActivateProtocolParticipant">
            <summary>
            Called immediately before the user-level OnActivateAsync, on same scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.PostActivateProtocolParticipant">
            <summary>
            Called immediately after the user-level OnActivateAsync, on same scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.MultiCluster.ILogConsistencyProtocolParticipant.DeactivateProtocolParticipant">
            <summary>
            Called immediately after the user-level OnDeactivateAsync, on same scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.MultiCluster.ILogConsistencyProtocolMessage">
            <summary>
            interface to mark classes that represent protocol messages.
            All such classes must be serializable.
            </summary>
        </member>
        <member name="T:Orleans.MultiCluster.MultiClusterConfiguration">
            <summary>
            Multicluster configuration, as injected by user, and stored/transmitted in the multicluster network.
            </summary>
        </member>
        <member name="P:Orleans.MultiCluster.MultiClusterConfiguration.AdminTimestamp">
            <summary>
            The UTC timestamp of this configuration. 
            New configurations are injected by administrator.
            Newer configurations automatically replace older ones in the multicluster network.
            </summary>
        </member>
        <member name="P:Orleans.MultiCluster.MultiClusterConfiguration.Clusters">
            <summary>
            List of clusters that are joined to the multicluster.
            </summary>
        </member>
        <member name="P:Orleans.MultiCluster.MultiClusterConfiguration.Comment">
            <summary>
            A comment included by the administrator.
            </summary>
        </member>
        <member name="T:Orleans.Providers.IControllable">
            <summary>
            A general interface for controllable components inside Orleans runtime.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IControllable.ExecuteCommand(System.Int32,System.Object)">
            <summary>
            A function to execute a control command.
            </summary>
            <param name="command">A serial number of the command.</param>
            <param name="arg">An opaque command argument</param>
        </member>
        <member name="T:Orleans.Providers.IProvider">
            <summary>
            Base interface for all type-specific provider interfaces in Orleans
            </summary>
            <seealso cref="T:Orleans.Storage.IStorageProvider"/>
            <seealso cref="!:Orleans.LogConsistency.ILogConsistencyProvider"/>
        </member>
        <member name="P:Orleans.Providers.IProvider.Name">
            <summary>The name of this provider instance, as given to it in the config.</summary>
        </member>
        <member name="M:Orleans.Providers.IProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Initialization function called by Orleans Provider Manager when a new provider class instance  is created
            </summary>
            <param name="name">Name assigned for this provider</param>
            <param name="providerRuntime">Callback for accessing system functions in the Provider Runtime</param>
            <param name="config">Configuration metadata to be used for this provider instance</param>
            <returns>Completion promise Task for the inttialization work for this provider</returns>
        </member>
        <member name="M:Orleans.Providers.IProvider.Close">
            <summary>Close function for this provider instance.</summary>
            <returns>Completion promise for the Close operation on this provider.</returns>
        </member>
        <member name="T:Orleans.Providers.IProviderConfiguration">
            <summary>
            Configuration information that a provider receives
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Type">
            <summary>
            Full type name of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Name">
            <summary>
            Name of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Properties">
            <summary>
            Configuration properties for this provider instance, as name-value pairs.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderConfiguration.SetProperty(System.String,System.String)">
            <summary>
            Set a property in this provider configuration.
            If the property with this key already exists, it is been overwritten with the new value, otherwise it is just added.
            </summary>
            <param name="key">The key of the property</param>
            <param name="val">The value of the property</param>
            <returns>Provider instance with the given name</returns>
        </member>
        <member name="M:Orleans.Providers.IProviderConfiguration.RemoveProperty(System.String)">
            <summary>
            Removes a property in this provider configuration.
            </summary>
            <param name="key">The key of the property.</param>
            <returns>True if the property was found and removed, false otherwise.</returns>
        </member>
        <member name="T:Orleans.Providers.ProviderInitializationException">
            <summary>
            Exception thrown whenever a provider has failed to be initialized.
            </summary>
        </member>
        <member name="T:Orleans.Providers.IProviderRuntime">
            <summary>
            Interface to allow callbacks from providers into their assigned provider-manager.
            This allows access to runtime functionality, such as logging.
            </summary>
            <remarks>
            Passed to the provider during IProvider.Init call to that provider instance.
            </remarks>
            <seealso cref="T:Orleans.Providers.IProvider"/>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.ServiceId">
            <summary>
            Specifies this cluster's ServiceId, which is intended to be a long lived identifier which remains constant
            across deployments.
            </summary>
            <returns>The ServiceId for this service.</returns>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.SiloIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.GrainFactory">
            <summary>
            Factory for getting references to grains.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.ServiceProvider">
            <summary>
            Service provider for dependency injection
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderRuntime.BindExtension``2(System.Func{``0})">
            <summary>
            Binds an extension to an addressable object, if not already done.
            </summary>
            <typeparam name="TExtension">The type of the extension (e.g. StreamConsumerExtension).</typeparam>
            <typeparam name="TExtensionInterface">The public interface type of the implementation.</typeparam>
            <param name="newExtensionFunc">A factory function that constructs a new extension object.</param>
            <returns>A tuple, containing first the extension and second an addressable reference to the extension's interface.</returns>
        </member>
        <member name="T:Orleans.Providers.ILogConsistencyProviderRuntime">
            <summary>
            Provider-facing interface for log consistency
            </summary>
        </member>
        <member name="M:Orleans.Providers.LegacyProviderConfigurator`1.ConfigureServices(System.Collections.Generic.IDictionary{System.String,Orleans.Runtime.Configuration.ProviderCategoryConfiguration},Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Legacy way to configure providers. Will need to move to a legacy package in the future
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PersistentStreamProvider">
            <summary>
            Persistent stream provider that uses an adapter for persistence
            </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.SimpleMessageStream.SimpleMessageStreamProducerExtension">
            <summary>
            Multiplexes messages to mutiple different producers in the same grain over one grain-extension interface.
            
            On the silo, we have one extension per activation and this extesion multiplexes all streams on this activation 
                (different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extesion for every StreamProducer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="M:Orleans.Storage.GrainStorageExtensions.GetGrainStorage(Orleans.Grain,System.IServiceProvider)">
            <summary>
            Aquire the storage provider associated with the grain type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Storage.IGrainStorage">
            <summary>
            Interface to be implemented for a storage able to read and write Orleans grain state data.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IGrainStorage.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Read data function for this storage instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be populated for this grain.</param>
            <returns>Completion promise for the Read operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IGrainStorage.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Write data function for this storage instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be written for this grain.</param>
            <returns>Completion promise for the Write operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IGrainStorage.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Delete / Clear data function for this storage instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">Copy of last-known state data object for this grain.</param>
            <returns>Completion promise for the Delete operation on the specified grain.</returns>
        </member>
        <member name="T:Orleans.Storage.IRestExceptionDecoder">
            <summary>
            Interface to be optionally implemented by storage to return richer exception details.
            TODO: Remove this interface.  Move to decorator pattern for monitoring purposes. - jbragg
            </summary>
        </member>
        <member name="M:Orleans.Storage.IRestExceptionDecoder.DecodeException(System.Exception,System.Net.HttpStatusCode@,System.String@,System.Boolean)">
            <summary>
            Decode details of the exceprion
            </summary>
            <param name="e">Excption to decode</param>
            <param name="httpStatusCode">HTTP status code for the error</param>
            <param name="restStatus">REST status for the error</param>
            <param name="getExtendedErrors">Whether or not to extract REST error code</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Storage.BadGrainStorageConfigException">
            <summary>
            Exception thrown whenever a grain call is attempted with a bad / missing storage configuration settings for that grain.
            </summary>
        </member>
        <member name="T:Orleans.Storage.InconsistentStateException">
            <summary>
            Exception thrown when a storage detects an Etag inconsistency when attempting to perform a WriteStateAsync operation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.IsSourceActivation">
            <summary>
            Whether or not this exception occurred on the current activation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.StoredEtag">
            <summary>The Etag value currently held in persistent storage.</summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.CurrentEtag">
            <summary>The Etag value currently help in memory, and attempting to be updated.</summary>
        </member>
        <member name="T:Orleans.Storage.IMemoryStorageGrain">
            <summary>
            Grain interface for internal memory storage grain used by Orleans in-memory storage provider.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.ReadStateAsync(System.String,System.String)">
            <summary>Async method to cause retrieval of the specified grain state data from memory store.</summary>
            <param name="stateStore">The name of the store that is used to store this grain state.</param>
            <param name="grainStoreKey">Store key for this grain.</param>
            <returns>Value promise for the currently stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.WriteStateAsync(System.String,System.String,Orleans.IGrainState)">
            <summary>Async method to cause update of the specified grain state data into memory store.</summary>
            <param name="grainType">Type of the grain</param>
            <param name="grainId">Grain ID.</param>
            <param name="grainState">New state data to be stored for this grain.</param>
            <returns>Completion promise with new eTag for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.DeleteStateAsync(System.String,System.String,System.String)">
            <param name="stateStore">The name of the store that is used to store this grain state.</param>
            <param name="grainStoreKey">Store key for this grain.</param>
            <param name="eTag">The previous etag that was read.</param>
            <returns>Completion promise for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="T:Orleans.Storage.IStorageProvider">
            <summary>
            Interface to be implemented for a storage provider able to read and write Orleans grain state data.
            </summary>
        </member>
        <member name="T:Orleans.Storage.BadProviderConfigException">
            <summary>
            Exception thrown whenever a grain call is attempted with a bad / missing storage provider configuration settings for that grain.
            </summary>
        </member>
        <member name="T:Orleans.LeaseProviders.AcquiredLease">
            <summary>
            Acquired lease
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.ResourceKey">
            <summary>
            The resource key which the lease is attached to 
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.Duration">
            <summary>
            Duration of the aquired lease
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.Token">
            <summary>
            Lease token, whcih will be null if acquiring or renewing the lease failed
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquiredLease.StartTimeUtc">
            <summary>
            Caller side start time for this lease, which is when the lease is acquired or renewed
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.AcquiredLease.#ctor(System.String,System.TimeSpan,System.String,System.DateTime)">
            <summary>
            Consructor
            </summary>
            <param name="resourceKey"></param>
            <param name="duration"></param>
            <param name="token"></param>
            <param name="startTimeUtc"></param>
        </member>
        <member name="M:Orleans.LeaseProviders.AcquiredLease.#ctor(System.String)">
            <summary>
            Consructor
            </summary>
            <param name="resourceKey"></param>
        </member>
        <member name="T:Orleans.LeaseProviders.AcquireLeaseResult">
            <summary>
            AcquireLeaseResult class, which demonstrates result of acquiring or renewing lease operation
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquireLeaseResult.AcquiredLease">
            <summary>
            Acquired lease, which will be null if acquire or renew operation failed.
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquireLeaseResult.StatusCode">
            <summary>
            Response status
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.AcquireLeaseResult.FailureException">
            <summary>
            If acquiring or renewing the lease failed, this is the exception which caused it. This field would be null if operation succeed.
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.OK">
            <summary>
            Operation succeed
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.LeaseNotAvailable">
            <summary>
            Lease is owned by other entity
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.InvalidToken">
            <summary>
            The token in the AcquiredLease is invalid, which means the lease expired
            </summary>
        </member>
        <member name="F:Orleans.LeaseProviders.ResponseCode.TransientFailure">
            <summary>
            TransientFailure, which should be retriable. 
            </summary>
        </member>
        <member name="T:Orleans.LeaseProviders.LeaseRequest">
            <summary>
            Lease request where you can specify ResourceKey and duration of your lease. 
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.LeaseRequest.ResourceKey">
            <summary>
            The key of the resource where you want to apply the lease on
            </summary>
        </member>
        <member name="P:Orleans.LeaseProviders.LeaseRequest.Duration">
            <summary>
            Duration of the lease
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.LeaseRequest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.LeaseRequest.#ctor(System.String,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="resourceKey"></param>
            <param name="duration"></param>
        </member>
        <member name="T:Orleans.LeaseProviders.ILeaseProvider">
            <summary>
            Lease provider interface 
            </summary>
        </member>
        <member name="M:Orleans.LeaseProviders.ILeaseProvider.Acquire(System.String,Orleans.LeaseProviders.LeaseRequest[])">
            <summary>
            Batch acquire leases operation
            </summary>
            <param name="category">resource category</param>
            <param name="leaseRequests"></param>
            <returns>Lease acquiring results array, whose order is the same with leaseRequstes</returns>
        </member>
        <member name="M:Orleans.LeaseProviders.ILeaseProvider.Renew(System.String,Orleans.LeaseProviders.AcquiredLease[])">
            <summary>
            Batch renew lease operation
            </summary>
            <param name="category">resource category</param>
            <param name="aquiredLeases"></param>
            <returns>Lease renew results array, whose order is the same with acquiredLeases</returns>
        </member>
        <member name="M:Orleans.LeaseProviders.ILeaseProvider.Release(System.String,Orleans.LeaseProviders.AcquiredLease[])">
            <summary>
            Batch release lease operation
            </summary>
            <param name="category">resource category</param>
            <param name="aquiredLeases"></param>
            <returns></returns>
        </member>
        <member name="F:Orleans.OutsideRuntimeClient.responseTimeout">
            <summary>
            Response timeout.
            </summary>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.Disconnect">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.Reconnect">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="P:Orleans.OutsideRuntimeClient.ClientInvokeCallback">
            <inheritdoc />
        </member>
        <member name="E:Orleans.OutsideRuntimeClient.ClusterConnectionLost">
            <inheritdoc />
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.NotifyClusterConnectionLost">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.BinaryFormatterISerializableSerializer">
            <summary>
            A wrapper around <see cref="T:Orleans.Serialization.BinaryFormatterSerializer"/> which only serializes ISerializable types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryFormatterISerializableSerializer.IsSupportedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.BinaryFormatterISerializableSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.BinaryFormatterISerializableSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.BinaryFormatterISerializableSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Serialization.BinaryFormatterISerializableSerializer.SerializerId">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.BinaryFormatterSerializer.DynamicBinder">
            <summary>
            This appears necessary because the BinaryFormatter by default will not see types
            that are defined by the InvokerGenerator.
            Needs to be public since it used by generated client code.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.ReadGrainId(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary> Read an <c>GrainId</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.ReadActivationId(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary> Read an <c>ActivationId</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.ReadActivationAddress(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary> Read an <c>ActivationAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.PeekToken(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary>
            Peek at the next token in this input stream.
            </summary>
            <returns>Next token thatr will be read from the stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.ReadToken(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary> Read a <c>SerializationTokenType</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.ReadSpecifiedTypeHeader(Orleans.Serialization.IBinaryTokenStreamReader,Orleans.Serialization.SerializationManager)">
            <summary> Read a <c>Type</c> value from the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReaderExtensinons.ReadFullTypeHeader(Orleans.Serialization.IBinaryTokenStreamReader,Orleans.Serialization.SerializationManager,System.Type)">
            <summary> Read a <c>Type</c> value from the stream. </summary>
            <param name="this">The IBinaryTokenStreamReader to read from</param>
            <param name="serializationManager">The serialization manager used to resolve type names.</param>
            <param name="expected">Expected Type, if known.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="T:Orleans.Serialization.BinaryTokenStreamReader">
            <summary>
            Reader for Orleans binary token streams
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.Byte[])">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input byte array.
            </summary>
            <param name="input">Input binary data to be tokenized.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input buffers.
            </summary>
            <param name="buffs">The list of ArraySegments to use for the data.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.Reset(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Resets this instance with the provided data.
            </summary>
            <param name="buffs">The underlying buffers.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input buffer.
            </summary>
            <param name="buff">ArraySegment to use for the data.</param>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamReader.CurrentPosition">
            <summary> Current read position in the stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamReader.Length">
            <summary>
            Gets the total length.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.Copy">
            <summary>
            Creates a copy of the current stream reader.
            </summary>
            <returns>The new copy</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBoolean">
            <summary> Read a <c>bool</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadInt">
            <summary> Read an <c>Int32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadUInt">
            <summary> Read an <c>UInt32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadShort">
            <summary> Read an <c>Int16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadUShort">
            <summary> Read an <c>UInt16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadLong">
            <summary> Read an <c>Int64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadULong">
            <summary> Read an <c>UInt64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadFloat">
            <summary> Read an <c>float</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadDouble">
            <summary> Read an <c>double</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadDecimal">
            <summary> Read an <c>decimal</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadString">
            <summary> Read an <c>string</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBytes(System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="destination">Output array to store the returned data in.</param>
            <param name="offset">Offset into the destination array to write to.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadChar">
            <summary> Read an <c>char</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadByte">
            <summary> Read an <c>byte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSByte">
            <summary> Read an <c>sbyte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadIPAddress">
            <summary> Read an <c>IPAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadIPEndPoint">
            <summary> Read an <c>IPEndPoint</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSiloAddress">
            <summary> Read an <c>SiloAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBlockInto(System.Array,System.Int32)">
            <summary>
            Read a block of data into the specified output <c>Array</c>.
            </summary>
            <param name="array">Array to output the data to.</param>
            <param name="n">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.PeekToken">
            <summary>
            Peek at the next token in this input stream.
            </summary>
            <returns>Next token thatr will be read from the stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadToken">
            <summary> Read a <c>SerializationTokenType</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriterExtensions.Write(Orleans.Serialization.IBinaryTokenStreamWriter,Orleans.Runtime.CorrelationId)">
            <summary> Write a <c>CorrelationId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriterExtensions.Write(Orleans.Serialization.IBinaryTokenStreamWriter,Orleans.Runtime.ActivationAddress)">
            <summary> Write a <c>ActivationAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriterExtensions.Write(Orleans.Serialization.IBinaryTokenStreamWriter,Orleans.Runtime.ActivationId)">
            <summary> Write a <c>ActivationId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriterExtensions.Write(Orleans.Serialization.IBinaryTokenStreamWriter,Orleans.Runtime.GrainId)">
            <summary> Write a <c>GrainId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriterExtensions.WriteArrayHeader(Orleans.Serialization.IBinaryTokenStreamWriter,System.Array,System.Type)">
            <summary>
            Write header for an <c>Array</c> to the output stream.
            </summary>
            <param name="this">The IBinaryTokenStreamReader to read from</param>
            <param name="a">Data object for which header should be written.</param>
            <param name="expected">The most recent Expected Type currently active for this stream.</param>
        </member>
        <member name="T:Orleans.Serialization.BinaryTokenStreamWriter">
            <summary>
            Writer for Orleans binary token streams
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ToBytes">
            <summary> Return the output stream as a set of <c>ArraySegment</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ToByteArray">
            <summary> Return the output stream as a <c>byte[]</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ReleaseBuffers">
            <summary> Release any serialization buffers being used by this stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamWriter.CurrentOffset">
            <summary> Current write position in the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int32)">
            <summary> Write an <c>Int32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int16)">
            <summary> Write an <c>Int16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int64)">
            <summary> Write an <c>Int64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.SByte)">
            <summary> Write a <c>sbyte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt32)">
            <summary> Write a <c>UInt32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt16)">
            <summary> Write a <c>UInt16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt64)">
            <summary> Write a <c>UInt64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte)">
            <summary> Write a <c>byte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Single)">
            <summary> Write a <c>float</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Double)">
            <summary> Write a <c>double</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Decimal)">
            <summary> Write a <c>decimal</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.String)">
            <summary> Write a <c>string</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Char)">
            <summary> Write a <c>char</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Boolean)">
            <summary> Write a <c>bool</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteNull">
            <summary> Write a <c>null</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteTypeHeader(System.Type,System.Type)">
            <summary> Write a type header for the specified Type to the stream. </summary>
            <param name="t">Type to write header for.</param>
            <param name="expected">Currently expected Type for this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte[])">
            <summary> Write a <c>byte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary> Write a list of byte array segments to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Write the specified number of bytes to the stream, starting at the specified offset in the input <c>byte[]</c>. </summary>
            <param name="b">The input data to be written.</param>
            <param name="offset">The offset into the inout byte[] to start writing bytes from.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int16[])">
            <summary> Write a <c>Int16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int32[])">
            <summary> Write a <c>Int32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int64[])">
            <summary> Write a <c>Int64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt16[])">
            <summary> Write a <c>UInt16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt32[])">
            <summary> Write a <c>UInt32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt64[])">
            <summary> Write a <c>UInt64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.SByte[])">
            <summary> Write a <c>sbyte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Char[])">
            <summary> Write a <c>char[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Boolean[])">
            <summary> Write a <c>bool[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Double[])">
            <summary> Write a <c>double[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Single[])">
            <summary> Write a <c>float[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Net.IPEndPoint)">
            <summary> Write a <c>IPEndPoint</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Net.IPAddress)">
            <summary> Write a <c>IPAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)">
            <summary> Write a <c>SiloAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.TimeSpan)">
            <summary> Write a <c>TimeSpan</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.DateTime)">
            <summary> Write a <c>DataTime</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Guid)">
            <summary> Write a <c>Guid</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)">
            <summary>
            Try to write a simple type (non-array) value to the stream.
            </summary>
            <param name="obj">Input object to be written to the output stream.</param>
            <returns>Returns <c>true</c> if the value was successfully written to the output stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BuiltInTypes.SerializeGenericLinkedList(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            
            </summary>
            <param name="original"></param>
            <param name="context"></param>
            <param name="expected"></param>
        </member>
        <member name="T:Orleans.Serialization.BuiltInTypesSerializationFeaturePopulator">
            <summary>
            Populates a <see cref="T:Orleans.Serialization.SerializerFeature"/> instance with the built-in serializers and known types.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BuiltInTypesSerializationFeaturePopulator.PopulateFeature(System.Collections.Generic.IEnumerable{Orleans.ApplicationParts.IApplicationPart},Orleans.Serialization.SerializerFeature)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContextExtensions.CreateNestedContext(Orleans.Serialization.IDeserializationContext,System.Int32,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Returns a new nested context which begins at the specified position.
            </summary>
            <param name="context"></param>
            <param name="position"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Serialization.DeserializationContext.StreamReader">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="P:Orleans.Serialization.DeserializationContext.CurrentObjectOffset">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.RecordObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.RecordObject(System.Object,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.FetchReferencedObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.DeserializationContext.NestedDeserializationContext.#ctor(Orleans.Serialization.IDeserializationContext,System.Int32,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Initializes a new <see cref="T:Orleans.Serialization.DeserializationContext.NestedDeserializationContext"/> instance.
            </summary>
            <param name="parent"></param>
            <param name="position">The position, relative to the outer-most context, at which this context begins.</param>
            <param name="reader"></param>
        </member>
        <member name="M:Orleans.Serialization.FieldUtils.GetGetter(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.FieldUtils.GetGetDelegate(System.Reflection.FieldInfo,System.Type,System.Type[])">
            <summary>
            Returns a delegate to get the value of a specified field.
            </summary>
            <param name="field">
            The field.
            </param>
            <param name="delegateType">The delegate type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>A delegate to get the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.FieldUtils.GetReferenceSetter(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.FieldUtils.GetValueSetter(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.FieldUtils.GetSetDelegate(System.Reflection.FieldInfo,System.Type,System.Type[])">
            <summary>
            Returns a delegate to set the value of a specified field.
            </summary>
            <param name="field">
            The field.
            </param>
            <param name="delegateType">The delegate type.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>A delegate to set the value of a specified field.</returns>
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceSerializer.SerializeGrainReference(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary> Serializer function for grain reference.</summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceSerializer.DeserializeGrainReference(System.Type,Orleans.Serialization.IDeserializationContext)">
            <summary> Deserializer function for grain reference.</summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Serialization.GrainReferenceSerializer.CopyGrainReference(System.Object,Orleans.Serialization.ICopyContext)">
            <summary> Copier function for grain reference. </summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="T:Orleans.Serialization.IExternalSerializer">
            <summary>
            Interface that allows third-party serializers to perform serialization, even when
            the types being serialized are not known (generics) at initialization time.
            
            Types that inherit this interface are discovered through dependency injection and 
            automatically incorporated in the Serialization Manager.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.IsSupportedType(System.Type)">
            <summary>
            Informs the serialization manager whether this serializer supports the type for serialization.
            </summary>
            <param name="itemType">The type of the item to be serialized</param>
            <returns>A value indicating whether the item can be serialized.</returns>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <summary>
            Tries to create a copy of source.
            </summary>
            <param name="source">The item to create a copy of</param>
            <param name="context">The context in which the object is being copied.</param>
            <returns>The copy</returns>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            Tries to serialize an item.
            </summary>
            <param name="item">The instance of the object being serialized</param>
            <param name="context">The context in which the object is being serialized.</param>
            <param name="expectedType">The type that the deserializer will expect</param>
        </member>
        <member name="M:Orleans.Serialization.IExternalSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <summary>
            Tries to deserialize an item.
            </summary>
            <param name="context">The context in which the object is being deserialized.</param>
            <param name="expectedType">The type that should be deserialized</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:Orleans.Serialization.IKeyedSerializer">
            <summary>
            Interface for serializers which are responsible for serializing type information in addition to object data and can be identified by a numeric id.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.IKeyedSerializer.SerializerId">
            <summary>
            Gets the identifier for this serializer.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ILBasedExceptionSerializer">
            <summary>
            Methods for serializing instances of <see cref="T:System.Exception"/> and its subclasses.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.serializers">
            <summary>
            The collection of serializers.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.exceptionFieldFilter">
            <summary>
            The field filter used for generating serializers for subclasses of <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.fallbackBaseExceptionSerializer">
            <summary>
            The serializer used as a fallback when the concrete exception type is unavailable.
            </summary>
            <remarks>
            This serializer operates on <see cref="T:Orleans.Serialization.RemoteNonDeserializableException"/> instances, however it 
            includes only fields from <see cref="T:System.Exception"/> and no sub-class fields.
            </remarks>
        </member>
        <member name="F:Orleans.Serialization.ILBasedExceptionSerializer.generator">
            <summary>
            The serializer generator.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILBasedExceptionSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <summary>
            Returns a copy of the provided instance.
            </summary>
            <param name="original">The object to copy.</param>
            <param name="context">The copy context.</param>
            <returns>A copy of the provided instance.</returns>
        </member>
        <member name="T:Orleans.Serialization.ILBasedExceptionSerializer.ExceptionFieldInfoComparer">
            <summary>
            Field comparer which sorts fields on the Exception class higher than fields on sub classes.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ILBasedExceptionSerializer.ExceptionFieldInfoComparer.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.ILBasedSerializer">
            <summary>
            Fallback serializer to be used when other serializers are unavailable.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.generator">
            <summary>
            The serializer generator.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.serializers">
            <summary>
            The collection of generated serializers.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.thisSerializer">
            <summary>
            The serializer used when a concrete type is not known.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ILBasedSerializer.namedTypeSerializer">
            <summary>
            The serializer used for implementations of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.IsSupportedType(System.Type)">
            <summary>
            Informs the serialization manager whether this serializer supports the type for serialization.
            </summary>
            <param name="t">The type of the item to be serialized</param>
            <returns>A value indicating whether the item can be serialized.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ILBasedSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.ILBasedSerializer.SerializerBundle">
            <summary>
            This class primarily exists as a means to hold a reference to a <see cref="T:Orleans.Serialization.SerializerMethods"/> structure.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ILBasedSerializer.Orleans#Serialization#IKeyedSerializer#SerializerId">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.#ctor(Orleans.Serialization.ILFieldBuilder,System.String,System.Reflection.MethodInfo)">
            <summary>Creates a new instance of the <see cref="T:Orleans.Serialization.ILDelegateBuilder`1"/> class.</summary>
            <param name="fields">The field builder.</param>
            <param name="name">The name of the new delegate.</param>
            <param name="methodInfo">
            The method info for <typeparamref name="TDelegate"/> delegates, used for determining parameter types.
            </param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable with the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The newly declared local.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadArgument(System.UInt16)">
            <summary>
            Loads the argument at the given index onto the stack.
            </summary>
            <param name="index">
            The index of the argument to load.
            </param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadReferenceElement">
            <summary>
            Loads the element from the array on the stack at the given index onto the stack.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadConstant(System.Int32)">
            <summary>
            Loads the provided constant integer value onto the stack.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.StoreLocal(Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pops the stack and stores it in the specified local.
            </summary>
            <param name="local">The local variable to store into.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadLocal(Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pushes the specified local onto the stack.
            </summary>
            <param name="local">The local variable to load from.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads the specified field onto the stack from the referenced popped from the stack.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Box(System.Type)">
            <summary>
            Boxes the value on the top of the stack.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadType(System.Type)">
            <summary>
            Loads the specified type and pushes it onto the stack.
            </summary>
            <param name="type">The type to load.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Call(System.Reflection.MethodInfo)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method to call.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Call(System.Reflection.ConstructorInfo)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method to call.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.Return">
            <summary>
            Returns from the current method.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.StoreField(System.Reflection.FieldInfo)">
            <summary>
            Pops the value on the top of the stack and stores it in the specified field on the object popped from the top of the stack.
            </summary>
            <param name="field">The field to store into.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadLocalAddress(Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pushes the address of the specified local onto the stack.
            </summary>
            <param name="local">The local variable.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.UnboxAny(System.Type)">
            <summary>
            Unboxes the value on the top of the stack.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CastClass(System.Type)">
            <summary>
            Casts the object on the top of the stack to the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.InitObject(System.Type)">
            <summary>
            Initializes the value type on the stack, setting all fields to their default value.
            </summary>
            <param name="type">The value type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.NewObject(System.Reflection.ConstructorInfo)">
            <summary>
            Constructs a new instance of the object with the specified constructor.
            </summary>
            <param name="constructor">The constructor to call.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CreateDelegate">
            <summary>
            Builds a delegate from the previously emitted instructions.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.LoadLocalAsReference(System.Type,Orleans.Serialization.ILDelegateBuilder{`0}.Local)">
            <summary>
            Pushes the specified local variable as a reference onto the stack.
            </summary>
            <param name="type">The type.</param>
            <param name="local">The local.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.BoxIfValueType(System.Type)">
            <summary>
            Boxes the value on the top of the stack if it's a value type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CastOrUnbox(System.Type)">
            <summary>
            Casts or unboxes the value at the top of the stack into the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.ILDelegateBuilder`1.CreateInstance(System.Type,Orleans.Serialization.ILDelegateBuilder{`0}.Local,System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance of the specified type and stores it in the specified local.
            </summary>
            <param name="type">The type.</param>
            <param name="local">The local.</param>
            <param name="getUninitializedObject">The method used to get an uninitialized instance of a type.</param>
        </member>
        <member name="T:Orleans.Serialization.ILDelegateBuilder`1.Local">
            <summary>
            Represents a local variable created via a call to <see cref="M:Orleans.Serialization.ILDelegateBuilder`1.DeclareLocal(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.ILFieldBuilder.GetOrCreateStaticField``1(``0)">
            <summary>
            Gets or creates a <see langword="static"/>, <see langword="readonly"/> field which holds the specified
            <paramref name="value"/>.
            </summary>
            <typeparam name="T">The underlying type of the provided value.</typeparam>
            <param name="value">The value.</param>
            <returns>The field which holds the provided <paramref name="value"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILFieldBuilder.GetOrCreateStaticField(System.Object,System.Type)">
            <summary>
            Gets or creates a <see langword="static"/>, <see langword="readonly"/> field which holds the specified
            <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="fieldType">The type of the resulting field.</param>
            <returns>The field which holds the provided <paramref name="value"/>.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILFieldBuilder.CreateField(System.Object,System.Type)">
            <summary>
            Creates a static field in a new class and initializes it with the provided <paramref name="value"/>.
            </summary>
            <param name="value">The value to initialize the field with.</param>
            <param name="fieldType">The type of the resulting field.</param>
            <returns>The newly created static field.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.IsSupportedType(System.Type)">
            <summary>
            Returns a value indicating whether the provided <paramref name="type"/> is supported.
            </summary>
            <param name="type">The type.</param>
            <returns>A value indicating whether the provided <paramref name="type"/> is supported.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.GenerateSerializer(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean},System.Func{System.Reflection.FieldInfo,System.Boolean},System.Collections.Generic.IComparer{System.Reflection.FieldInfo})">
            <summary>
            Generates a serializer for the specified type.
            </summary>
            <param name="type">The type to generate the serializer for.</param>
            <param name="serializationFieldsFilter">
            The predicate used in addition to the default logic to select which fields are included in serialization and deserialization.
            </param>
            <param name="copyFieldsFilter">
            The predicate used in addition to the default logic to select which fields are included in copying.
            </param>
            <param name="fieldComparer">The comparer used to sort fields, or <see langword="null"/> to use the default.</param>
            <returns>The generated serializer.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.GetFields(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean},System.Collections.Generic.IComparer{System.Reflection.FieldInfo})">
            <summary>
            Returns a sorted list of the fields of the provided type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldFilter">The predicate used in addition to the default logic to select which fields are included.</param>
            <param name="fieldInfoComparer">The comparer used to sort fields, or <see langword="null"/> to use the default.</param>
            <returns>A sorted list of the fields of the provided type.</returns>
        </member>
        <member name="M:Orleans.Serialization.ILSerializerGenerator.IsSupportedFieldType(System.Type)">
            <summary>
            Returns a value indicating whether the provided type is supported as a field by this class.
            </summary>
            <param name="type">The type.</param>
            <returns>A value indicating whether the provided type is supported as a field by this class.</returns>
        </member>
        <member name="T:Orleans.Serialization.ILSerializerGenerator.FieldInfoComparer">
            <summary>
            A comparer for <see cref="T:System.Reflection.FieldInfo"/> which compares by name.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.ILSerializerGenerator.FieldInfoComparer.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.KeyedSerializerId">
            <summary>
            Values for identifying <see cref="T:Orleans.Serialization.IKeyedSerializer"/> serializers.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.KeyedSerializerId.ILBasedSerializer">
            <summary>
            <see cref="T:Orleans.Serialization.ILBasedSerializer"/>
            </summary>
        </member>
        <member name="F:Orleans.Serialization.KeyedSerializerId.BinaryFormatterISerializable">
            <summary>
            <see cref="T:Orleans.Serialization.BinaryFormatterISerializableSerializer"/>
            </summary>
        </member>
        <member name="F:Orleans.Serialization.KeyedSerializerId.MaxReservedValue">
            <summary>
            The maximum reserved value.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.OrleansJsonSerializationBinder">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializationBinder.#ctor(Orleans.Runtime.ITypeResolver)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.GetDefaultSerializerSettings(Orleans.Runtime.ITypeResolver,Orleans.IGrainFactory)">
            <summary>
            Returns the default serializer settings.
            </summary>
            <returns>The default serializer settings.</returns>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.UpdateSerializerSettings(Newtonsoft.Json.JsonSerializerSettings,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Customises the given serializer settings using provider configuration.
            Can be used by any provider, allowing the users to use a standard set of configuration attributes.
            </summary>
            <param name="settings">The settings to update.</param>
            <param name="config">The provider config.</param>
            <returns>The updated <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.IsSupportedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.DeepCopy(System.Object,Orleans.Serialization.ICopyContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Deserialize(System.Type,Orleans.Serialization.IDeserializationContext)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Serialization.OrleansJsonSerializer.Serialize(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            Serializes an object to a binary stream
            </summary>
            <param name="item">The object to serialize</param>
            <param name="context">The serialization context.</param>
            <param name="expectedType">The type the deserializer should expect</param>
        </member>
        <member name="M:Orleans.Serialization.OrleansSerializer.IsTypeShallowCopyable(System.Type)">
            <summary>        
            Returns <see langword="true"/> if instances of the provided type can be safely shallow-copied;
            otherwise <see langword="false"/>, indicating that instances must instead be deep-copied.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if instances of the provided type can be safely shallow-copied; otherwise
            <see langword="false"/>, indicating that instances must instead be deep-copied.
            </returns>
        </member>
        <member name="T:Orleans.Serialization.ReflectedSerializationMethodInfo">
            <summary>
            Holds references to methods which are used during serialization.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetStreamFromSerializationContext">
            <summary>
            A reference to the <see cref="P:Orleans.Serialization.ISerializationContext.StreamWriter"/> getter.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetStreamFromDeserializationContext">
            <summary>
            A reference to the getter for <see cref="P:Orleans.Serialization.IDeserializationContext.StreamReader"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.RecordObjectWhileCopying">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.ICopyContext.RecordCopy(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeepCopyInner">
            <summary>
            A reference to <see cref="M:Orleans.Serialization.SerializationManager.DeepCopyInner(System.Object,Orleans.Serialization.ICopyContext)"/>
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.SerializeInner">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.SerializationManager.SerializeInner(System.Object,Orleans.Serialization.ISerializationContext,System.Type)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeserializeInner">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.SerializationManager.DeserializeInner(System.Type,Orleans.Serialization.IDeserializationContext)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.RecordObjectWhileDeserializing">
            <summary>
            A reference to the <see cref="M:Orleans.Serialization.IDeserializationContext.RecordObject(System.Object)"/> method.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetUninitializedObject">
            <summary>
            A reference to a method which returns an uninitialized object of the provided type.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.GetTypeFromHandle">
            <summary>
            A reference to <see cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)"/>.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.SerializerDelegate">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="T:Orleans.Serialization.Serializer"/> delegate.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeserializerDelegate">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="T:Orleans.Serialization.Deserializer"/> delegate.
            </summary>
        </member>
        <member name="F:Orleans.Serialization.ReflectedSerializationMethodInfo.DeepCopierDelegate">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> for the <see cref="T:Orleans.Serialization.DeepCopier"/> delegate.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.RemoteNonDeserializableException">
            <summary>
            Represents an exception which cannot be fully deserialized.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.RemoteNonDeserializableException.OriginalTypeName">
            <summary>
            Gets the type name of the original <see cref="T:System.Exception"/> represented by this instance.
            </summary>
        </member>
        <member name="P:Orleans.Serialization.RemoteNonDeserializableException.AdditionalData">
            <summary>
            Gets or sets the additional data deserialized alongside this instance, for example, exception subclass fields.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.RemoteNonDeserializableException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this instance.</returns>
        </member>
        <member name="M:Orleans.Serialization.RemoteNonDeserializableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Serialization.SerializationContext">
            <summary>
            Maintains context information for current thread during serialization operations.
            </summary>
            <remarks>
            DeepCopier functions in Orleans generated code use the RecordObject method to 
            record the mapping of original object to the copied instance of that object
            so that object identity can be preserved when serializing .NET object graphs.
            </remarks>
        </member>
        <member name="P:Orleans.Serialization.SerializationContext.StreamWriter">
            <summary>
            Gets the serialization manager.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Record an object-to-copy mapping into the current serialization context.
            Used for maintaining the .NET object graph during serialization operations.
            Used in generated code.
            </summary>
            <param name="original">Original object.</param>
            <param name="copy">Copy object that will be the serialized form of the original.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationContext.NestedSerializationContext.#ctor(Orleans.Serialization.ISerializationContext,System.Int32,Orleans.Serialization.BinaryTokenStreamWriter)">
            <summary>
            Creates a new instance of the <see cref="T:Orleans.Serialization.SerializationContext.NestedSerializationContext"/> class.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="offset">The absolute offset at which this stream begins.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager">
            <summary>
            SerializationManager to oversee the Orleans serializer system.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,Orleans.Serialization.DeepCopier,Orleans.Serialization.Serializer,Orleans.Serialization.Deserializer)">
            <summary>
            Register a Type with the serialization system to use the specified DeepCopier, Serializer and Deserializer functions.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="cop">DeepCopier function for this type.</param>
            <param name="ser">Serializer function for this type.</param>
            <param name="deser">Deserializer function for this type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,Orleans.Serialization.DeepCopier,Orleans.Serialization.Serializer,Orleans.Serialization.Deserializer,System.Boolean)">
            <summary>
            Register a Type with the serialization system to use the specified DeepCopier, Serializer and Deserializer functions.
            If <c>forcOverride == true</c> then this definition will replace any any previous functions registered for this Type.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="cop">DeepCopier function for this type.</param>
            <param name="ser">Serializer function for this type.</param>
            <param name="deser">Deserializer function for this type.</param>
            <param name="forceOverride">Whether these functions should replace any previously registered functions for this Type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,System.String)">
            <summary>
            This method registers a type that has no specific serializer or deserializer.
            For instance, abstract base types and interfaces need to be registered this way.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="typeKey">Type key to associate with the type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,System.Type)">
            <summary>
            Registers <paramref name="serializerType"/> as the serializer for <paramref name="type"/>.
            </summary>
            <param name="type">The type serialized by the provided serializer type.</param>
            <param name="serializerType">The type containing serialization methods for <paramref name="type"/>.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RegisterGrainReferenceSerializers(System.Type)">
            <summary>
            Registers <see cref="T:Orleans.Runtime.GrainReference"/> serializers for the provided <paramref name="type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeepCopy(System.Object)">
            <summary>
            Deep copy the specified object, using DeepCopier functions previously registered for this type.
            </summary>
            <param name="original">The input data to be deep copied.</param>
            <returns>Deep copied clone of the original input object.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeepCopyInner(System.Object,Orleans.Serialization.ICopyContext)">
            <summary>
            <para>
            This method makes a deep copy of the object passed to it.
            </para>
            </summary>
            <param name="original">The input data to be deep copied.</param>
            <param name="context">The context.</param>
            <returns>Deep copied clone of the original input object.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.HasSerializer(System.Type)">
            <summary>
            Returns true if <paramref name="t"/> is serializable, false otherwise.
            </summary>
            <param name="t">The type.</param>
            <returns>true if <paramref name="t"/> is serializable, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Serialize(System.Object,Orleans.Serialization.IBinaryTokenStreamWriter)">
            <summary>
            Serialize the specified object, using Serializer functions previously registered for this type.
            </summary>
            <param name="raw">The input data to be serialized.</param>
            <param name="stream">The output stream to write to.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeInner``1(``0,Orleans.Serialization.ISerializationContext)">
            <summary>
            Encodes the object to the provided binary token stream.
            </summary>
            <param name="obj">The input data to be serialized.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeInner(System.Object,Orleans.Serialization.ISerializationContext,System.Type)">
            <summary>
            Encodes the object to the provided binary token stream.
            </summary>
            <param name="obj">The input data to be serialized.</param>
            <param name="context">The serialization context.</param>
            <param name="expected">Current expected Type on this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeToByteArray(System.Object)">
            <summary>
            Serialize data into byte[].
            </summary>
            <param name="raw">Input data.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize``1(Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <typeparam name="T">Type to return.</typeparam>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize(System.Type,Orleans.Serialization.IBinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="t">Type to return.</param>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeInner``1(Orleans.Serialization.IDeserializationContext)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <typeparam name="T">Type to return.</typeparam>
            <param name="context">Deserialization context.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeInner(System.Type,Orleans.Serialization.IDeserializationContext)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="expected">Type to return.</param>
            <param name="context">The deserialization context.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeFromByteArray``1(System.Byte[])">
            <summary>
            Deserialize data from the specified byte[] and rehydrate backi into objects.
            </summary>
            <typeparam name="T">Type of data to be returned.</typeparam>
            <param name="data">Input data.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RoundTripSerializationForTesting``1(``0)">
            <summary>
            Internal test method to do a round-trip Serialize+Deserialize loop
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RegisterSerializationProviders(System.Collections.Generic.List{System.Reflection.TypeInfo})">
            <summary>
            Loads the external srializers and places them into a hash set
            </summary>
            <param name="providerTypes">The list of types that implement <see cref="T:Orleans.Serialization.IExternalSerializer"/></param>
        </member>
        <member name="M:Orleans.Serialization.SerializerFeatureExtensions.AddKnownType(Orleans.Serialization.SerializerFeature,System.Type)">
            <summary>
            Adds <paramref name="type"/> as a known type.
            </summary>
            <param name="serializerFeature">The serializer feature.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializerFeatureExtensions.AddSerializerDelegates(Orleans.Serialization.SerializerFeature,System.Type,Orleans.Serialization.DeepCopier,Orleans.Serialization.Serializer,Orleans.Serialization.Deserializer)">
            <summary>
            Adds serialization delegates for <paramref name="type"/>.
            </summary>
            <param name="serializerFeature">The serializer feature.</param>
            <param name="type">The type.</param>
            <param name="copier">The copy delegate.</param>
            <param name="serializer">The serializer delegate.</param>
            <param name="deserializer">The deserializer delegate.</param>
        </member>
        <member name="M:Orleans.Serialization.TypeSerializer.GetTypeFromName(System.String,System.Boolean)">
            <summary>
            The method used by this instance to retrieve a type from an assembly-qualified name.
            </summary>
            <param name="assemblyQualifiedTypeName">The type name.</param>
            <param name="throwOnError">Whether or not to throw if the type could not be loaded.</param>
            <returns>The type, or <see langword="null"/> if the type could not be loaded.</returns>
        </member>
        <member name="M:Orleans.Serialization.TypeSerializer.GetNameFromType(System.Type)">
            <summary>
            The method used by this instance to retrieve an assembly-qualified name from a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The assembly-qualified name of <paramref name="type"/>.</returns>
        </member>
        <member name="T:Orleans.Serialization.TypeSerializer.TypeKey">
            <summary>
            Represents a named type for the purposes of serialization.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.TypeUtilities.IsAccessibleFromAssembly(System.Type,System.Reflection.Assembly)">
            <summary>
            Returns <see langword="true"/> if a type is accessible from C# code from the specified assembly, and <see langword="false"/> otherwise.
            </summary>
            <param name="type"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Serialization.TypeUtilities.AreInternalsVisibleTo(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>
            Returns true if <paramref name="fromAssembly"/> has exposed its internals to <paramref name="toAssembly"/>, false otherwise.
            </summary>
            <param name="fromAssembly">The assembly containing internal types.</param>
            <param name="toAssembly">The assembly requiring access to internal types.</param>
            <returns>
            true if <paramref name="fromAssembly"/> has exposed its internals to <paramref name="toAssembly"/>, false otherwise
            </returns>
        </member>
        <member name="T:Orleans.SystemTargetInterfaces.RemoteClusterActivationResponse">
            <summary>
            Reponse message used by Global Single Instance Protocol
            </summary>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessActivationRequest(Orleans.Runtime.GrainId,System.String,System.Int32)">
            <summary>
            Called on remote clusters to process a global-single-instance round
            </summary>
            <param name="grain">the grain to process</param>
            <param name="requestClusterId">the id of the origin cluster</param>
            <param name="hopCount">how many times this request has been forwarded within the cluster</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessActivationRequestBatch(Orleans.Runtime.GrainId[],System.String)">
            <summary>
            Called on remote clusters to process a global-single-instance round
            </summary>
            <param name="grains">the grains to process</param>
            <param name="sendingClusterId">the id of the origin cluster</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessDeactivations(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress})">
            <summary>
            Called on remote clusters after deactivating a owned or doubtful grain activation,
            to give them the opportunity to remove the cached registration
            </summary>
            <param name="addresses">the list of activations</param>
        </member>
        <member name="M:Orleans.SystemTargetInterfaces.IClusterGrainDirectory.ProcessDeletion(Orleans.Runtime.GrainId)">
            <summary>
            Called on remote clusters when deletion of all grain registrations is asked for.
            </summary>
            <param name="grainId"></param>
        </member>
        <member name="T:Orleans.SystemTargetInterfaces.ILogConsistencyProtocolGateway">
            <summary>
            The  protocol gateway is a relay that forwards incoming protocol messages from other clusters
            to the appropriate grain in this cluster.
            </summary>
        </member>
        <member name="T:Orleans.IMembershipTable">
            <summary>
            Interface for Membership Table.
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.InitializeMembershipTable(System.Boolean)">
            <summary>
            Initializes the membership table, will be called before all other methods
            </summary>
            <param name="tryInitTableVersion">whether an attempt will be made to init the underlying table</param>
        </member>
        <member name="M:Orleans.IMembershipTable.DeleteMembershipTableEntries(System.String)">
            <summary>
            Deletes all table entries of the given clusterId
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadRow(Orleans.Runtime.SiloAddress)">
            <summary>
            Atomically reads the Membership Table information about a given silo.
            The returned MembershipTableData includes one MembershipEntry entry for a given silo and the 
            TableVersion for this table. The MembershipEntry and the TableVersion have to be read atomically.
            </summary>
            <param name="key">The address of the silo whose membership information needs to be read.</param>
            <returns>The membership information for a given silo: MembershipTableData consisting one MembershipEntry entry and
            TableVersion, read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadAll">
            <summary>
            Atomically reads the full content of the Membership Table.
            The returned MembershipTableData includes all MembershipEntry entry for all silos in the table and the 
            TableVersion for this table. The MembershipEntries and the TableVersion have to be read atomically.
            </summary>
            <returns>The membership information for a given table: MembershipTableData consisting multiple MembershipEntry entries and
            TableVersion, all read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.InsertRow(Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Atomically tries to insert (add) a new MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) New MembershipEntry will be added to the table.
            2) The newly added MembershipEntry will also be added with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, insert of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo already exist in the table
            2) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be inserted.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the insert operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateRow(Orleans.MembershipEntry,System.String,Orleans.TableVersion)">
            <summary>
            Atomically tries to update the MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) The MembershipEntry for this silo will be updated to the new MembershipEntry (the old entry will be fully substitued by the new entry) 
            2) The eTag for the updated MembershipEntry will also be eTag with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, update of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo does not exist in the table
            2) A MembershipEntry for a given silo exist in the table but its etag in the table does not match the provided etag.
            3) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be updated.</param>
            <param name="etag">The etag  for the given MembershipEntry.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the update operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateIAmAlive(Orleans.MembershipEntry)">
            <summary>
            Updates the IAmAlive part (column) of the MembershipEntry for this silo.
            This operation should only update the IAmAlive collumn and not change other columns.
            This operation is a "dirty write" or "in place update" and is performed without etag validation. 
            With regards to eTags update:
            This operation may automatically update the eTag associated with the given silo row, but it does not have to. It can also leave the etag not changed ("dirty write").
            With regards to TableVersion:
            this operation should not change the TableVersion of the table. It should leave it untouched.
            There is no scenario where this operation could fail due to table semantical reasons. It can only fail due to network problems or table unavailability.
            </summary>
            <param name="entry"></param>
            <returns>Task representing the successful execution of this operation. </returns>
        </member>
        <member name="T:Orleans.IMembershipTableGrain">
            <summary>
            Membership table interface for grain based implementation.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.Version">
            <summary>
            The version part of this TableVersion. Monotonically increasing number.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.VersionEtag">
            <summary>
            The etag of this TableVersion, used for validation of table update operations.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SiloAddress">
            <summary>
            The silo unique identity (ip:port:epoch). Used mainly by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.Status">
            <summary>
            The silo status. Managed by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SuspectTimes">
            <summary>
            The list of silos that suspect this silo. Managed by the Membership Protocol.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.ProxyPort">
            <summary>
            Silo to clients TCP port. Set on silo startup.
            </summary>    
        </member>
        <member name="P:Orleans.MembershipEntry.HostName">
            <summary>
            The DNS host name of the silo. Equals to Dns.GetHostName(). Set on silo startup.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.SiloName">
            <summary>
            the name of the specific silo instance within a cluster. 
            If running in Azure - the name of this role instance. Set on silo startup.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.StartTime">
            <summary>
            Time this silo was started. For diagnostics and troubleshooting only.
            </summary>
        </member>
        <member name="P:Orleans.MembershipEntry.IAmAliveTime">
            <summary>
            the last time this silo reported that it is alive. For diagnostics and troubleshooting only.
            </summary>
        </member>
        <member name="T:Orleans.IReminderTable">
            <summary>
            Interface for multiple implementations of the underlying storage for reminder data:
            Azure Table, SQL, development emulator grain, and a mock implementation.
            Defined as a grain interface for the development emulator grain case.
            </summary>  
        </member>
        <member name="M:Orleans.IReminderTable.ReadRows(System.UInt32,System.UInt32)">
            <summary>
            Return all rows that have their GrainReference's.GetUniformHashCode() in the range (start, end]
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IReminderTable.RemoveRow(Orleans.Runtime.GrainReference,System.String,System.String)">
            <summary>
            Remove a row from the table.
            </summary>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            /// <param name="eTag"></param>
            <returns>true if a row with <paramref name="grainRef"/> and <paramref name="reminderName"/> existed and was removed successfully, false otherwise</returns>
        </member>
        <member name="T:Orleans.IReminderTableGrain">
            <summary>
            Reminder table interface for grain based implementation.
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.GrainRef">
            <summary>
            The grain reference of the grain that created the reminder. Forms the reminder
            primary key together with <see cref="P:Orleans.ReminderEntry.ReminderName"/>.
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.ReminderName">
            <summary>
            The name of the reminder. Forms the reminder primary key together with 
            <see cref="P:Orleans.ReminderEntry.GrainRef"/>.
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.StartAt">
            <summary>
            the time when the reminder was supposed to tick in the first time
            </summary>
        </member>
        <member name="P:Orleans.ReminderEntry.Period">
            <summary>
            the time period for the reminder
            </summary>
        </member>
        <member name="T:Orleans.Transactions.ITransactionAgent">
            <summary>
            The Transaction Agent it is used by the silo and activations to
            interact with the transactions system.
            </summary>
            <remarks>
            There is one Transaction Agent per silo.
            TODO: does this belong in Runtime instead?
            </remarks>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.Start">
            <summary>
            Starts the Transaction Agent
            </summary>
            <remarks>
            This must be called before any other method is called on the Transaction Agent.
            </remarks>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.StartTransaction(System.Boolean,System.TimeSpan)">
            <summary>
            Starts a new transaction
            </summary>
            <param name="readOnly">Whether it is a read-only transaction</param>
            <param name="timeout">Transaction is automatically aborted if it does not complete within this time</param>
            <returns>Info of the new transaction</returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.Commit(Orleans.Transactions.ITransactionInfo)">
            <summary>
            Attempt to Commit a transaction. If this returns with no exceptions
            then the transaction is successfully committed.
            </summary>
            <param name="transactionInfo">transaction info</param>
            <returns>None.</returns>
            <remarks>
            The method throws OrleansTransactionInDoubtException if the outcome of the Commit cannot be determined.
            If any other exception is thrown then the transaction is aborted.
            </remarks>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.Abort(Orleans.Transactions.ITransactionInfo,Orleans.Transactions.OrleansTransactionAbortedException)">
            <summary>
            Abort a transaction.
            </summary>
            <param name="transactionInfo"></param>
            <param name="reason"></param>
            <returns>None.</returns>
            <remarks>This method is exception-free</remarks>
        </member>
        <member name="M:Orleans.Transactions.ITransactionAgent.IsAborted(System.Int64)">
            <summary>
            Check if a transaction is known to have aborted.
            </summary>
            <param name="transactionId">the id of the transaction</param>
            <returns>true if the transaction is known to have aborted, false otherwise</returns>
            <remarks>
            Note that the transaction could have aborted but this still returns false, if the agent
            did not learn about the outcome yet.
            This method is exception-free.
            </remarks>
        </member>
        <member name="T:Orleans.Transactions.ITransactionalResource">
            <summary>
            Interface that allows a component to take part in transaction orchestration.
            </summary>
        </member>
        <member name="M:Orleans.Transactions.ITransactionalResource.Prepare(System.Int64,System.Nullable{Orleans.Transactions.TransactionalResourceVersion},System.Nullable{Orleans.Transactions.TransactionalResourceVersion})">
            <summary>
            Perform the prepare phase of the commit protocol. To succeed the resource
            must have all the writes that were part of the transaction and is able
            to persist these writes to persistent storage.
            <param name="transactionId">Id of the transaction to prepare</param>
            <param name="writeVersion">version of state to prepare for write</param>
            <param name="readVersion">version of state to prepare for read</param>
            </summary>
            <returns>Whether prepare was performed successfully</returns>
            <remarks>
            The resource cannot abort the transaction after it has returned true from
            Prepare.  However, if it can infer that the transaction will definitely
            be aborted (e.g., because it learns that the transaction depends on another
            transaction which has aborted) then it can proceed to rollback the aborted
            transaction.
            </remarks>
        </member>
        <member name="M:Orleans.Transactions.ITransactionalResource.Abort(System.Int64)">
            <summary>
            Notification of a transaction abort.
            </summary>
            <param name="transactionId">Id of the aborted transaction</param>
        </member>
        <member name="M:Orleans.Transactions.ITransactionalResource.Commit(System.Int64)">
            <summary>
            Second phase of the commit protocol.
            </summary>
            <param name="transactionId">Id of the committed transaction</param>
            <remarks>
            If this method returns without throwing an exception the manager is
            allowed to forget about the transaction. This means that the resource
            must durably remember that this transaction committed so that it does
            not query for its status.
            </remarks>
        </member>
        <member name="T:Orleans.Transactions.ITransactionInfo">
            <summary>
            Common interface for transaction information passed along
            during the distributed execution of a transaction.
            </summary>
        </member>
        <member name="P:Orleans.Transactions.ITransactionInfo.TransactionId">
            <summary>
            The transaction identifier.
            </summary>
        </member>
        <member name="P:Orleans.Transactions.ITransactionInfo.IsAborted">
            <summary>
            Indicates that the transaction has aborted.
            </summary>
        </member>
        <member name="M:Orleans.Transactions.ITransactionInfo.Fork">
            <summary>
            Forks the transaction info, for passing a copy to a call.
            </summary>
        </member>
        <member name="M:Orleans.Transactions.ITransactionInfo.Join(Orleans.Transactions.ITransactionInfo)">
            <summary>
            Joins the transaction info from a returning call.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Orleans.Transactions.ITransactionInfo.ReconcilePending(System.Int32@)">
            <summary>
            Applies all pending joins, and returns true if there are no orphaned calls
            </summary>
            <returns>true if there are no orphans, false otherwise</returns>
        </member>
        <member name="T:Orleans.Transactions.ITransactionParticipant">
            <summary>
            Interface that allows a component to be a transaction participant.
            </summary>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.CommitReadOnly(System.Guid,Orleans.Transactions.AccessCounter,System.DateTime)">
            <summary>
            Request sent by TA to all participants of a read-only transaction (one-phase commit). 
            Participants respond after committing or aborting the read.
            </summary>
            <param name="transactionId">the id of the transaction to prepare</param>
            <param name="accessCount">number of reads/writes performed on this participant by this transaction</param>
            <param name="timeStamp">the commit timestamp for this transaction</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.Prepare(System.Guid,Orleans.Transactions.AccessCounter,System.DateTime,Orleans.Transactions.ITransactionParticipant)">
            <summary>
            One-way message sent by TA to all participants except TM.  
            </summary>
            <param name="transactionId">the id of the transaction to prepare</param>
            <param name="accessCount">number of reads/writes performed on this participant by this transaction</param>
            <param name="timeStamp">the commit timestamp for this transaction</param>
            <param name="transactionManager">the transaction manager for this transaction</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.PrepareAndCommit(System.Guid,Orleans.Transactions.AccessCounter,System.DateTime,System.Collections.Generic.List{Orleans.Transactions.ITransactionParticipant},System.Int32)">
            <summary>
            Request sent by TA to TM. The TM responds after committing or aborting the transaction.
            </summary>
            <param name="transactionId">the id of the transaction to prepare</param>
            <param name="accessCount">number of reads/writes performed on this participant by this transaction</param>
            <param name="timeStamp">the commit timestamp for this transaction</param>
            <param name="writeParticipants">the participants who wrote during the transaction</param>
            <param name="totalParticipants">the total number of participants in the transaction</param>
            <returns>the status of the transaction</returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.Abort(System.Guid)">
            <summary>
            One-way message sent by TA to participants to let them know a transaction has aborted.
            </summary>
            <param name="transactionId">The id of the aborted transaction</param>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.Prepared(System.Guid,System.DateTime,Orleans.Transactions.ITransactionParticipant,Orleans.Transactions.TransactionalStatus)">
            <summary>
            One-way message sent by a participant to the TM after it (successfully or unsuccessfully) prepares.
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="timeStamp">The commit timestamp of the transaction</param>
            <param name="participant">The participant sending the message</param>
            <param name="status">The outcome of the prepare</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.Cancel(System.Guid,System.DateTime,Orleans.Transactions.TransactionalStatus)">
            <summary>
            One-way message sent by TM to participants to let them know a transaction has aborted.
            </summary>
            <param name="transactionId">The id of the aborted transaction</param>
            <param name="timeStamp">The commit timestamp of the aborted transaction</param>
            <param name="status">Reason for abort</param>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.Confirm(System.Guid,System.DateTime)">
            <summary>
            Request sent by TM to participants to let them know a transaction has committed.
            Participants respond after cleaning up all prepare records.
            </summary>
            <param name="transactionId">The id of the aborted transaction</param>
            <param name="timeStamp">The commit timestamp of the aborted transaction</param>
        </member>
        <member name="M:Orleans.Transactions.ITransactionParticipant.Ping(System.Guid,System.DateTime,Orleans.Transactions.ITransactionParticipant)">
            <summary>
            One-way message sent by participants to TM, to let TM know they are still waiting to hear about
            the fate of a transaction.
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="timeStamp">The commit timestamp of the transaction</param>
            <param name="participant">The participant sending the message</param>
        </member>
        <member name="T:Orleans.Transactions.TransactionalStatus">
            <summary>
            Used to propagate information about the status of a transaction. Used for transaction orchestration, for diagnostics, 
            and for generating informative user exceptions
            </summary>
        </member>
        <member name="T:Orleans.Transactions.AccessCounter">
            <summary>
            Counts read and write accesses on a transaction participant.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionException">
            <summary>
            Base class for all transaction exceptions
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionsDisabledException">
            <summary>
            Orleans transactions are disabled.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansStartTransactionFailedException">
            <summary>
            Signifies that the runtime was unable to start a transaction.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionInDoubtException">
            <summary>
            Signifies that the runtime is unable to determine whether a transaction
            has committed.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionAbortedException">
            <summary>
            Signifies that the executing transaction has aborted.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansValidationFailedException">
            <summary>
            Signifies that the executing transaction has aborted because of optimistic concurrency control validation failure.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansCascadingAbortException">
            <summary>
            Signifies that the executing transaction has aborted because a dependent transaction aborted.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansOrphanCallException">
            <summary>
            Signifies that the executing transaction has aborted because a method did not await all its pending calls.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansPrepareFailedException">
            <summary>
            Signifies that the executing transaction has aborted because some of its participant grains did not prepare successfully.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionTimeoutException">
            <summary>
            Signifies that the executing transaction has aborted because it did not complete within timeout period.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionWaitDieException">
            <summary>
            Signifies that the executing transaction has aborted because it attempted to read or override a grain written by a transaction with higher Id.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansReadOnlyViolatedException">
            <summary>
            Signifies that the executing read-only transaction has aborted because it attempted to write to a grain.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionVersionDeletedException">
            <summary>
            Signifies that the transaction aborted because the grain version required has been deleted.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionUnstableVersionException">
            <summary>
            Signifies that the transaction references a version of the state that is not yet stable.
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansBrokenTransactionLockException">
            <summary>
            Signifies that the executing transaction has aborted because its execution lock was broken
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionLockAcquireTimeoutException">
            <summary>
            Signifies that the executing transaction has aborted because it could not acquire some lock in time
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionLockUpgradeException">
            <summary>
            Signifies that the executing transaction has aborted because it could not upgrade some lock
            </summary>
        </member>
        <member name="T:Orleans.Transactions.OrleansTransactionPrepareTimeoutException">
            <summary>
            Signifies that the executing transaction has aborted because the TM did not receive all prepared messages in time
            </summary>
        </member>
        <member name="T:Orleans.Utilities.CachedReadConcurrentDictionary`2">
            <summary>
            A thread-safe dictionary for read-heavy workloads.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.CacheMissesBeforeCaching">
            <summary>
            The number of cache misses which are tolerated before the cache is regenerated.
            </summary>
        </member>
        <member name="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.cacheMissReads">
            <summary>
            Approximate number of reads which did not hit the cache since it was last invalidated.
            This is used as a heuristic that the dictionary is not being modified frequently with respect to the read volume.
            </summary>
        </member>
        <member name="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.readCache">
            <summary>
            Cached version of <see cref="F:Orleans.Utilities.CachedReadConcurrentDictionary`2.dictionary"/>.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> class
            that contains elements copied from the specified collection.
            </summary>
            <param name="collection">
            The <see cref="T:IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to the new instance.
            </param>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> class
            that contains elements copied from the specified collection and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.
            </param>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/>
            class that contains elements copied from the specified collection and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="collection">
            The <see cref="T:IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to the new instance.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.
            </param>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            dds a key/value pair to the <see cref="T:Orleans.Utilities.CachedReadConcurrentDictionary`2"/> if the key does not exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add the specified key and value.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be a null reference (Nothing
            in Visual Basic) for reference types.</param>
            <returns>true if the key/value pair was added successfully; otherwise, false.</returns>
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Utilities.CachedReadConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:Orleans.Utilities.CachedReadConcurrentDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="T:Orleans.Utilities.RuntimeTypeNameFormatter">
            <summary>
            Utility methods for formatting <see cref="T:System.Type"/> and <see cref="T:System.Reflection.TypeInfo"/> instances in a way which can be parsed by
            <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
        </member>
        <member name="M:Orleans.Utilities.RuntimeTypeNameFormatter.Format(System.Type)">
            <summary>
            Returns a <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
            <param name="type">The type to format.</param>
            <returns>
            A <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </returns>
        </member>
        <member name="M:Orleans.Utilities.RuntimeTypeNameFormatter.Format(System.Reflection.TypeInfo)">
            <summary>
            Returns a <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
            <param name="type">The type to format.</param>
            <returns>
            A <see cref="T:System.String"/> form of <paramref name="type"/> which can be parsed by <see cref="M:System.Type.GetType(System.String)"/>.
            </returns>
        </member>
        <member name="T:Orleans.Factory`1">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Orleans.Factory`2">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TParam1"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Orleans.Factory`3">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TParam1"></typeparam>
            <typeparam name="TParam2"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Orleans.Factory`4">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TParam1"></typeparam>
            <typeparam name="TParam2"></typeparam>
            <typeparam name="TParam3"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Orleans.ReferenceEqualsComparer.Instance">
            <summary>
            Gets an instance of this class.
            </summary>
        </member>
        <member name="M:Orleans.ReferenceEqualsComparer.Equals(System.Object,System.Object)">
            <summary>
            Defines object equality by reference equality (eq, in LISP).
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Orleans.SetExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shortcut to create HashSet from IEnumerable that supports type inference
            (which the standard constructor does not)
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1},System.Action{``1,``1})">
            <summary>
            Synchronize contents of two dictionaries with mutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two mutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1,``1})">
            <summary>
            Synchronize contents of two dictionaries with immutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="sync">Synchronize two values, return synced value</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize2``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``2,``2},System.Action{``2,``2})">
            <summary>
            Synchronize contents of two nested dictionaries with mutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TKey2">Nested key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two mutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize2``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``2,``2,``2})">
            <summary>
            Synchronize contents of two nested dictionaries with immutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TKey2">Nested key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="sync">Synchronize two immutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Copy``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1})">
            <summary>
            Copy a dictionary with mutable values
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="original"></param>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SetExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.String)">
            <summary>
            ToString every element of an enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="toString">Can supply null to use Object.ToString()</param>
            <param name="separator">Before each element, or space if unspecified</param>
            <returns></returns>
        </member>
    </members>
</doc>
