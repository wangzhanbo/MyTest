<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans.Runtime.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Orleans.Runtime.IAttributeToFactoryMapper`1">
            <summary>
            Responsible for mapping a facet metadata to a cachable factory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IAttributeToFactoryMapper`1.GetFactory(System.Reflection.ParameterInfo,`0)">
            <summary>
            Responsible for mapping a facet metadata to a cachable factory from the parameter and facet metadata.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ISiloLifecycleSubject">
            <summary>
            Observable silo lifecycle and observer.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IStartupTask">
            <summary>
            Defines an action to be taken during silo startup.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IStartupTask.Execute(System.Threading.CancellationToken)">
            <summary>
            Called after the silo has started.
            </summary>
            <param name="cancellationToken">The cancellation token which is canceled when the method must abort.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.ILegacyMembershipConfigurator">
            <summary>
            LegacyMembershipConfigurator configure membership table in the legacy way, which is from global configuration
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.ILegacyReminderTableAdapter">
            <summary>
            Configures reminders using legacy configuration.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.ILegacySiloConfigurationAdapter">
            <summary>
            Configures a silo host using legacy configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MembershipService.ILegacySiloConfigurationAdapter.Configure(System.Object,Orleans.Hosting.ISiloHostBuilder)">
            <summary>
            Configures the provided <paramref name="builder"/> using <paramref name="configuration"/>.
            </summary>
            <param name="configuration">The legacy GlobalConfiguration object.</param>
            <param name="builder">The silo host builder.</param>
        </member>
        <member name="T:Orleans.Runtime.MembershipService.GlobalConfigurationReader">
            <summary>
            Wrapper for legacy config.  Should not be used for any new developent, only adapting legacy systems.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.MultiClusterNetwork.IGossipChannel">
            <summary>
            Interface for gossip channel.
            
            A gossip channel stores multicluster data (configuration, gateways) and exchanges
            this data with silos using a gossip-style communication, offering
            two different methods (Publish or Synchronize).
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.IGossipChannel.Initialize(System.String,System.String)">
            <summary>
            Initialize the channel with given configuration.
            </summary>
            <param name="serviceId"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.IGossipChannel.Name">
            <summary>
            A name for the channel.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.IGossipChannel.Publish(Orleans.Runtime.IMultiClusterGossipData)">
            <summary>
            One-way small-scale gossip. 
            Used to update small amounts of data (e.g. multicluster configuration, single gateway status) in the channel.
            The passed-in data is stored only if it is newer than the already stored data.
            </summary>
            <param name="data">The data to update</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.IGossipChannel.Synchronize(Orleans.Runtime.IMultiClusterGossipData)">
            <summary>
            Two-way bulk gossip.
            - any passed-in information that is newer than stored information is stored.
            - any stored information that is newer than passed-in information is returned.
            </summary>
            <param name="gossipdata">The gossip data to compare to the current contents, and store if newer, or not there</param>
            <returns>returns all stored data that is newer, or not part of, the gossipdata</returns>
        </member>
        <member name="T:Orleans.Runtime.MultiClusterNetwork.MultiClusterData">
            <summary>
            Data stored and transmitted in the multicluster network. 
            IMPORTANT: these objects can represent full state, partial state, or delta.
            So far includes multicluster-configuration and multicluster-gateway information.
            Data is gossip-able.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.Gateways">
            <summary>
            The dictionary of gateway entries and their current status.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.Configuration">
            <summary>
            The admin-injected configuration.
            May be null if none has been injected yet, or if this object represents a partial state or delta.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.IsEmpty">
            <summary>
            Whether there is actually any data in here.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.#ctor(System.Collections.Generic.IReadOnlyDictionary{Orleans.Runtime.SiloAddress,Orleans.Runtime.MultiClusterNetwork.GatewayEntry},Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Construct MultiClusterData containing a collection of gateway entries and a multi-cluster configuration.
            </summary>
            <param name="d">The gateway entries, by SiloAddress</param>
            <param name="config">The configuration</param>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.#ctor">
            <summary>
            Construct empty MultiClusterData.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.#ctor(Orleans.Runtime.MultiClusterNetwork.GatewayEntry)">
            <summary>
            Construct MultiClusterData containing a single gateway entry.
            </summary>
            <param name="gatewayEntry">The gateway entry</param>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.#ctor(System.Collections.Generic.IEnumerable{Orleans.Runtime.MultiClusterNetwork.GatewayEntry})">
            <summary>
            Construct MultiClusterData containing a collection of gateway entries.
            </summary>
            <param name="gatewayEntries">The gateway entries, by SiloAddress</param>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.#ctor(Orleans.MultiCluster.MultiClusterConfiguration)">
            <summary>
            Construct MultiClusterData containing a multi-cluster configuration.
            </summary>
            <param name="config">The configuration</param>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.ToString">
            <summary>
            Display content of MultiCluster data as an (abbreviated) string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.IsActiveGatewayForCluster(Orleans.Runtime.SiloAddress,System.String)">
            <summary>
            Check whether a particular silo is an active gateway for a cluster
            </summary>
            <param name="address">the silo address</param>
            <param name="clusterid">the id of the cluster</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.Merge(Orleans.Runtime.IMultiClusterGossipData)">
            <summary>
             merge source into this object, and return result.
             Ignores expired entries in source, and removes expired entries from this.
            </summary>
            <param name="source">The source data to apply to the data in this object</param>
            <returns>The updated data</returns>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.Merge(Orleans.Runtime.IMultiClusterGossipData,Orleans.Runtime.MultiClusterNetwork.MultiClusterData@)">
            <summary>
             incorporate source, producing new result, and report delta.
             Ignores expired entries in source, and removes expired entries from this.
            </summary>
            <param name="source">The source data to apply to the data in this object</param>
            <param name="delta">A delta of what changes were actually applied, used for change listeners</param>
            <returns>The updated data</returns>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.MultiClusterData.Minus(Orleans.Runtime.MultiClusterNetwork.MultiClusterData)">
            <summary>
            Returns all data of this object except for what keys appear in exclude
            </summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.MultiClusterNetwork.GatewayEntry">
            <summary>
            Information about gateways, as stored/transmitted in the multicluster network.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.ClusterId">
            <summary>
            The cluster id.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.SiloAddress">
            <summary>
            The address of the silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.Status">
            <summary>
            The gateway status of the silo (indicates whether this silo is currently acting as a gateway)
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.HeartbeatTimestamp">
            <summary>
            UTC timestamp of this gateway entry.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.Expired">
            <summary>
            Whether this entry has expired based on its timestamp.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.ExpiresAfter">
            <summary>
            time after which entries expire.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.Equals(Orleans.Runtime.MultiClusterNetwork.GatewayEntry)">
            <summary>
            Checks equality of all fields.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.Equals(System.Object)">
            <summary>
            Untyped version of Equals.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.GetHashCode">
            <summary>
            Overrides GetHashCode to conform with definition of Equals.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.MultiClusterNetwork.GatewayEntry.ToString">
            <summary>
            create a string representation of the gateway info.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IMultiClusterGossipService.Publish(Orleans.Runtime.IMultiClusterGossipData,System.Boolean)">
            <summary>One-way small-scale gossip: send partial data to recipient</summary>
            <param name="gossipData">The gossip data</param>
            <param name="forwardLocally">Whether to forward the changes to local silos</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMultiClusterGossipService.Synchronize(Orleans.Runtime.IMultiClusterGossipData)">
            <summary>
            Two-way bulk gossip: send all known data to recipient, and receive all unknown data
            </summary>
            <param name="gossipData">The pushed gossip data</param>
            <returns>The returned gossip data</returns>
        </member>
        <member name="M:Orleans.Runtime.IMultiClusterGossipService.FindLaggingSilos(Orleans.MultiCluster.MultiClusterConfiguration,System.Boolean)">
            <summary>
            Find silos whose configuration does not match the expected configuration.
            </summary>
            <param name="expected">the configuration to compare with</param>
            <param name="forwardLocally">whether to recursively include all silos in the same cluster</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.IFacetMetadata">
            <summary>
            Marker interface for facets
            </summary>
        </member>
        <member name="T:Orleans.Hosting.ISiloHost">
            <summary>
            Represents a silo instance.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ISiloHost.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts this silo.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHost.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops this silo.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
            <remarks>
            A stopped silo cannot be restarted.
            If the provided <paramref name="cancellationToken"/> is canceled or becomes canceled during execution, the silo will terminate ungracefully.
            </remarks>
        </member>
        <member name="P:Orleans.Hosting.ISiloHost.Services">
            <summary>
            Gets the service provider used by this silo.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloHost.Stopped">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> which completes when this silo stops.
            </summary>
        </member>
        <member name="T:Orleans.Hosting.ISiloHostBuilder">
            <summary>
            Functionality for building <see cref="T:Orleans.Hosting.ISiloHost"/> instances.
            </summary>
        </member>
        <member name="P:Orleans.Hosting.ISiloHostBuilder.Properties">
            <summary>
            A central location for sharing state between components during the host building process.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.Build">
            <summary>
            Run the given actions to initialize the host. This can only be called once.
            </summary>
            <returns>An initialized <see cref="T:Orleans.Hosting.ISiloHost"/></returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Set up the configuration for the builder itself. This will be used to initialize the <see cref="T:Orleans.Hosting.IHostingEnvironment"/>
            for use later in the build process. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the host.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureAppConfiguration(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Orleans.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations, as well as in <see cref="P:Orleans.Hosting.ISiloHost.Services"/>.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> for the application.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureServices(System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that will be used
            to construct the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Overrides the factory used to create the service provider.
            </summary>
            <typeparam name="TContainerBuilder"></typeparam>
            <param name="factory"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.ISiloHostBuilder.ConfigureContainer``1(System.Action{Orleans.Hosting.HostBuilderContext,``0})">
            <summary>
            Enables configuring the instantiated dependency container. This can be called multiple times and
            the results will be additive.
            </summary>
            <typeparam name="TContainerBuilder"></typeparam>
            <param name="configureDelegate"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloHostBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> instances.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.UseEnvironment(Orleans.Hosting.ISiloHostBuilder,System.String)">
            <summary>
            Specify the environment to be used by the host.
            </summary>
            <param name="hostBuilder">The host builder to configure.</param>
            <param name="environment">The environment to host the application in.</param>
            <returns>The host builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureServices(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the container. This can be called multiple times and the results will be additive.
            </summary>
            <param name="hostBuilder">The <see cref="T:Orleans.Hosting.ISiloHostBuilder" /> to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureAppConfiguration(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Orleans.Hosting.HostBuilderContext.Configuration"/> for
            subsequent operations, as well as in <see cref="P:Orleans.Hosting.ISiloHost.Services"/>.
            </summary>
            <param name="hostBuilder">The host builder to configure.</param>
            <param name="configureDelegate"></param>
            <returns>The same instance of the host builder for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.Configure``1(Orleans.Hosting.ISiloHostBuilder,System.Action{``0})">
            <summary>
            Registers an action used to configure a particular type of options.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configureOptions">The action used to configure the options.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.Configure``1(Orleans.Hosting.ISiloHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers a configuration instance which <typeparamref name="TOptions"/> will bind against.
            </summary>
            <typeparam name="TOptions">The options type to be configured.</typeparam>
            <param name="builder">The host builder.</param>
            <param name="configuration">The configuration.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.UseServiceProviderFactory``1(Orleans.Hosting.ISiloHostBuilder,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> for this silo is configured. 
            </summary>
            <param name="builder">The host builder.</param>
            <param name="factory">The service provider configuration method.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.UseServiceProviderFactory(Orleans.Hosting.ISiloHostBuilder,System.Func{Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider})">
            <summary>
            Specifies how the <see cref="T:System.IServiceProvider"/> for this silo is configured. 
            </summary>
            <param name="builder">The host builder.</param>
            <param name="configureServiceProvider">The service provider configuration method.</param>
            <returns>The silo builder.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloHostBuilder,System.Action{Orleans.Hosting.HostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloHostBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureLogging(Orleans.Hosting.ISiloHostBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>. This may be called multiple times.
            </summary>
            <param name="builder">The <see cref="T:Orleans.Hosting.ISiloHostBuilder" /> to configure.</param>
            <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/>.</param>
            <returns>The same instance of the <see cref="T:Orleans.Hosting.ISiloHostBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.GetApplicationPartManager(Orleans.Hosting.ISiloHostBuilder)">
            <summary>
            Returns the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this instance.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> for this instance.</returns>
        </member>
        <member name="M:Orleans.Hosting.SiloHostBuilderExtensions.ConfigureApplicationParts(Orleans.Hosting.ISiloHostBuilder,System.Action{Orleans.ApplicationParts.IApplicationPartManager})">
            <summary>
            Configures the <see cref="T:Orleans.ApplicationParts.ApplicationPartManager"/> using the given <see cref="T:System.Action`1"/>.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configure">The configuration delegate.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStartupExtensions">
            <summary>
            The silo builder startup extensions.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask``1(Orleans.Hosting.ISiloHostBuilder,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <typeparam name="TStartup">
            The startup task type.
            </typeparam>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloHostBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloHostBuilder,Orleans.Runtime.IStartupTask,System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloHostBuilder"/>.
            </returns>
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.AddStartupTask(Orleans.Hosting.ISiloHostBuilder,System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Adds a startup task to be executed when the silo has started.
            </summary>
            <param name="builder">
            The builder.
            </param>
            <param name="startupTask">
            The startup task.
            </param>
            <param name="stage">
            The stage to execute the startup task, see values in <see cref="T:Orleans.ServiceLifecycleStage"/>.
            </param>
            <returns>
            The provided <see cref="T:Orleans.Hosting.ISiloHostBuilder"/>.
            </returns>
        </member>
        <member name="T:Orleans.Hosting.SiloBuilderStartupExtensions.StartupTask">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.SiloBuilderStartupExtensions.StartupTask.Participate(Orleans.Runtime.ISiloLifecycle)">
            <inheritdoc />
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddPersistentStreams(Orleans.Hosting.ISiloHostBuilder,System.String,System.Func{System.IServiceProvider,System.String,Orleans.Streams.IQueueAdapterFactory},System.Action{Orleans.Streams.ISiloPersistentStreamConfigurator})">
            <summary>
            Configure silo to use persistent streams.
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Orleans.Configuration.SimpleMessageStreamProviderOptions})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSimpleMessageStreamProvider(Orleans.Hosting.ISiloHostBuilder,System.String,System.Action{Orleans.Configuration.OptionsBuilder{Orleans.Configuration.SimpleMessageStreamProviderOptions}})">
            <summary>
            Configure silo to use SimpleMessageProvider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSiloSimpleMessageStreamProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Orleans.Configuration.SimpleMessageStreamProviderOptions})">
            <summary>
            Configure silo to use simple message stream provider
            </summary>
        </member>
        <member name="M:Orleans.Hosting.StreamHostingExtensions.AddSiloSimpleMessageStreamProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Orleans.Configuration.OptionsBuilder{Orleans.Configuration.SimpleMessageStreamProviderOptions}})">
            <summary>
            Configure silo to use simple message provider
            </summary>
        </member>
        <member name="T:Orleans.Configuration.ProcessExitHandlingOptions">
            <summary>
            ProcessExitHandlingOptions configure silo behavior on process exit
            </summary>
        </member>
        <member name="P:Orleans.Configuration.ProcessExitHandlingOptions.FastKillOnProcessExit">
            <summary>
            Whether to fast kill a silo on process exit or not. Turned on by default 
            </summary>
        </member>
        <member name="T:Orleans.Configuration.SiloOptions">
            <summary>
            Silo configuration options.
            </summary>
        </member>
        <member name="P:Orleans.Configuration.SiloOptions.SiloName">
            <summary>
            Gets or sets the silo name.
            </summary>
        </member>
    </members>
</doc>
